import 'package:flutter/material.dart';
import 'dart:math' as math;

void main() {
  runApp(MainApp());
}

class MainApp extends StatefulWidget {
  @override
  _MainAppState createState() => _MainAppState();
}

class _MainAppState extends State<MainApp> {
  bool isLoggedIn = false;
  String currentUsername = '';

  void handleLoginSuccess(String username) {
    setState(() {
      isLoggedIn = true;
      currentUsername = username;
    });
  }

  void handleLogout() {
    setState(() {
      isLoggedIn = false;
      currentUsername = '';
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'PMIS',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: isLoggedIn
          ? PMISHomePage(
        username: currentUsername,
        onLogout: handleLogout,
      )
          : LoginPage(onLoginSuccess: handleLoginSuccess),
    );
  }
}

class PMISHomePage extends StatefulWidget {
  final String username;
  final VoidCallback onLogout;

  const PMISHomePage({
    Key? key,
    required this.username,
    required this.onLogout,
  }) : super(key: key);

  @override
  _PMISHomePageState createState() => _PMISHomePageState();
}

class _PMISHomePageState extends State<PMISHomePage> {
  int currentPageIndex = 0;
  bool isSidebarVisible = false;
  bool isAccountMenuVisible = false;
  OverlayEntry? _overlayEntry;
  late List<Widget> pages; // Declare it here but don't initialize

  @override
  void initState() {
    super.initState();

    // List of all pages
    pages = [
      IssuesLogPage(),           // 0
      ProjectPlanningPage(),     // 1
      ProjectTaskPage(),         // 2
      ProjectTeamPage(),         // 3
      ProjectUpdatePage(),       // 4
      AreaPage(),               // 5
      BranchPage(),             // 6
      DivisionPage(),           // 7
      PortfolioPage(),          // 8
      ProjectTypePage(),        // 9
      ResponsibleDepartmentPage(), // 10
      ResponsibleEntityPage(),  // 11
      StationPage(),            // 12
      TopicPage(),              // 13
      UnitPage(),               // 14
      AnalysisPage(),           // 15
      DashboardsPage(),         // 16
      ReportsPage(),            // 17
      UsersPage(),              // 18
      SchedulerEventPage(),     // 19
      MyDetailsPage(            // 20
        onUserSaved: (userData) {
          print('User saved: $userData');
        },
        isNewUser: true,
        currentUsername: widget.username,
      ),
      RolePage(),               // 21
    ];
  }


  // Corresponding page names for display
  final List<String> pageNames = [
    'Issues Log',             // 0
    'Project Planning',       // 1
    'Project Task',           // 2
    'Project Team',           // 3
    'Project Update',         // 4
    'Area',                   // 5
    'Branch',                 // 6
    'Division',               // 7
    'Portfolio',              // 8
    'Project Type',           // 9
    'Responsible Department', // 10
    'Responsible Entity',     // 11
    'Station',                // 12
    'Topic',                  // 13
    'Unit',                   // 14
    'Analysis',               // 15
    'Dashboards',             // 16
    'Reports',                // 17
    'Users',                  // 18
    'Scheduler Event',        // 19
    'My Details',             // 20
    'Role',                   // 21
  ];

  // Map page names to indices for easy lookup
  final Map<String, int> pageNameToIndex = {
    'Issues Log': 0,
    'Project Planning': 1,
    'Project Task': 2,
    'Project Team': 3,
    'Project Update': 4,
    'Area': 5,
    'Branch': 6,
    'Division': 7,
    'Portfolio': 8,
    'Project Type': 9,
    'Responsible Department': 10,
    'Responsible Entity': 11,
    'Station': 12,
    'Topic': 13,
    'Unit': 14,
    'Analysis': 15,
    'Dashboards': 16,
    'Reports': 17,
    'Users': 18,
    'Scheduler Event': 19,
    'My Details': 20,
    'Role': 21,
  };

  // Get current page name
  String get currentPageName => pageNames[currentPageIndex];

  // Method to navigate to a page by name
  void navigateToPage(String pageName) {
    final index = pageNameToIndex[pageName];
    if (index != null) {
      setState(() {
        currentPageIndex = index;
        isSidebarVisible = false; // Close sidebar when navigating
      });
    }
  }

  void _showAccountMenu(BuildContext context) {
    final RenderBox renderBox = context.findRenderObject() as RenderBox;
    final position = renderBox.localToGlobal(Offset.zero);

    _overlayEntry = OverlayEntry(
      builder: (context) => Positioned(
        top: position.dy + renderBox.size.height,
        right: 20,
        child: Material(
          elevation: 8,
          borderRadius: BorderRadius.circular(8),
          child: Container(
            width: 200,
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(8),
              border: Border.all(color: Colors.grey.shade300, width: 1),
            ),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                // User info section
                Container(
                  padding: EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: Colors.grey.shade50,
                    borderRadius: BorderRadius.only(
                      topLeft: Radius.circular(8),
                      topRight: Radius.circular(8),
                    ),
                  ),
                  child: Row(
                    children: [
                      Container(
                        width: 40,
                        height: 40,
                        decoration: BoxDecoration(
                          color: Colors.grey.shade300,
                          shape: BoxShape.circle,
                        ),
                        child: Icon(
                          Icons.person,
                          color: Colors.grey.shade600,
                          size: 24,
                        ),
                      ),
                      SizedBox(width: 12),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              'User Name',
                              style: TextStyle(
                                fontSize: 12,
                                color: Colors.grey.shade600,
                              ),
                            ),
                            Text(
                              widget.username,
                              style: TextStyle(
                                fontSize: 14,
                                fontWeight: FontWeight.w500,
                                color: Colors.black,
                              ),
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                ),

                // Menu items
                ListTile(
                  leading: Icon(Icons.person_outlined, size: 20, color: Colors.grey.shade600),
                  title: Text(
                    'My Details',
                    style: TextStyle(fontSize: 14),
                  ),
                  onTap: () {
                    _hideAccountMenu();
                    navigateToPage('My Details');
                  },
                ),

                Divider(height: 1, color: Colors.grey.shade300),

                ListTile(
                  leading: Icon(Icons.logout, size: 20, color: Colors.grey.shade600),
                  title: Text(
                    'Log Off',
                    style: TextStyle(fontSize: 14),
                  ),
                  onTap: () {
                    _hideAccountMenu();
                    widget.onLogout();
                  },
                ),
              ],
            ),
          ),
        ),
      ),
    );

    Overlay.of(context)?.insert(_overlayEntry!);
    setState(() {
      isAccountMenuVisible = true;
    });
  }

  void _hideAccountMenu() {
    _overlayEntry?.remove();
    _overlayEntry = null;
    setState(() {
      isAccountMenuVisible = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () {
        if (isAccountMenuVisible) {
          _hideAccountMenu();
        }
      },
      child: Scaffold(
        appBar: PreferredSize(
          preferredSize: Size.fromHeight(70),
          child: Container(
            decoration: BoxDecoration(
              color: Colors.white,
              boxShadow: [
                BoxShadow(
                  color: Colors.grey.withOpacity(0.3),
                  spreadRadius: 1,
                  blurRadius: 3,
                  offset: Offset(0, 2),
                ),
              ],
            ),
            child: Container(
              height: 70,
              padding: EdgeInsets.symmetric(horizontal: 16),
              child: Row(
                children: [
                  IconButton(
                    icon: Icon(Icons.menu, color: Colors.black54),
                    onPressed: () {
                      setState(() {
                        isSidebarVisible = !isSidebarVisible;
                      });
                    },
                  ),
                  SizedBox(width: 6),
                  Container(
                    width: 40,
                    height: 40,
                    decoration: BoxDecoration(
                      color: Colors.grey.shade200,
                      shape: BoxShape.circle,
                    ),
                    child: Icon(Icons.list_alt, color: Colors.grey, size: 16),
                  ),
                  SizedBox(width: 5),
                  Text(
                    currentPageName,
                    style: TextStyle(
                      fontSize: 15,
                      fontWeight: FontWeight.bold,
                      color: Colors.black,
                    ),
                  ),
                  Spacer(),
                  Row(
                    children: [
                      IconButton(
                        icon: Icon(Icons.notifications, color: Colors.grey, size: 17),
                        onPressed: () {},
                      ),
                      Text(
                        '0',
                        style: TextStyle(color: Colors.black),
                      ),
                      SizedBox(width: 6),
                      Builder(
                        builder: (context) => IconButton(
                          onPressed: () {
                            if (isAccountMenuVisible) {
                              _hideAccountMenu();
                            } else {
                              _showAccountMenu(context);
                            }
                          },
                          icon: Icon(
                              Icons.account_circle_rounded,
                              color: isAccountMenuVisible ? Colors.blue : Colors.black,
                              size: 17
                          ),
                        ),
                      ),
                      IconButton(
                        icon: Icon(Icons.settings_outlined, color: Colors.black, size: 17),
                        onPressed: () {},
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ),
        ),
        body: Stack(
          children: [
            // Main content
            IndexedStack(
              index: currentPageIndex,
              children: pages,
            ),

            // Sidebar overlay
            if (isSidebarVisible)
              GestureDetector(
                onTap: () {
                  setState(() {
                    isSidebarVisible = false;
                  });
                },
                child: Container(
                  color: Colors.black.withOpacity(0.5),
                ),
              ),

            // Sidebar
            if (isSidebarVisible)
              Positioned(
                left: 0,
                top: 0,
                bottom: 0,
                child: Container(
                  width: 250,
                  color: Colors.white,
                  child: Column(
                    children: [
                      // Sidebar header
                      Container(
                        height: 70,
                        padding: EdgeInsets.symmetric(horizontal: 16),
                        decoration: BoxDecoration(
                          color: Colors.grey.shade50,
                          border: Border(bottom: BorderSide(color: Colors.grey.shade300)),
                        ),
                        child: Row(
                          children: [
                            Container(
                              width: 40,
                              height: 40,
                              decoration: BoxDecoration(
                                color: Colors.blue,
                                shape: BoxShape.circle,
                              ),
                              child: Icon(Icons.business, color: Colors.white, size: 20),
                            ),
                            SizedBox(width: 12),
                            Expanded(
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                mainAxisAlignment: MainAxisAlignment.center,
                                children: [
                                  Text(
                                    'Project Management',
                                    style: TextStyle(
                                      fontSize: 14,
                                      fontWeight: FontWeight.bold,
                                      color: Colors.black,
                                      fontStyle: FontStyle.italic,
                                    ),
                                  ),
                                  Text(
                                    'Information System',
                                    style: TextStyle(
                                      fontSize: 14,
                                      fontWeight: FontWeight.bold,
                                      color: Colors.black,
                                      fontStyle: FontStyle.italic,
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ],
                        ),
                      ),

                      // Search filter
                      Container(
                        padding: EdgeInsets.all(16),
                        child: TextField(
                          controller: _searchController,
                          onChanged: _filterMenuItems,
                          decoration: InputDecoration(
                            hintText: 'Filter...',
                            prefixIcon: Icon(Icons.search, size: 20),
                            suffixIcon: _searchQuery.isNotEmpty
                                ? IconButton(
                              icon: Icon(Icons.clear, size: 20),
                              onPressed: () {
                                _searchController.clear();
                                _filterMenuItems('');
                              },
                            )
                                : null,
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(4),
                            ),
                            contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                          ),
                        ),
                      ),

                      // Navigation menu with filtered results
                      Expanded(
                        child: _searchQuery.isEmpty
                            ? ListView(
                          children: [
                            _buildExpandableSection(
                              'Projects',
                              Icons.folder_outlined,
                              [
                                'Issues Log',
                                'Project Planning',
                                'Project Task',
                                'Project Team',
                                'Project Update',
                              ],
                            ),
                            _buildExpandableSection(
                              'System Configuration',
                              Icons.settings,
                              [
                                'Area',
                                'Branch',
                                'Division',
                                'Portfolio',
                                'Project Type',
                                'Responsible Department',
                                'Responsible Entity',
                                'Station',
                                'Topic',
                                'Unit',
                              ],
                            ),
                            _buildExpandableSection(
                              'Reports',
                              Icons.assessment,
                              [
                                'Analysis',
                                'Dashboards',
                                'Reports',
                              ],
                            ),
                            _buildExpandableSection(
                              'User Management',
                              Icons.people,
                              [
                                'Users',
                                'Scheduler Event',
                                'My Details',
                                'Role',
                              ],
                            ),
                          ],
                        )
                            : ListView(
                          children: _buildFilteredResults(),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
          ],
        ),
      ),
    );
  }

  final TextEditingController _searchController = TextEditingController();
  String _searchQuery = '';

// Menu data structure for easier filtering
  final Map<String, Map<String, dynamic>> _menuSections = {
    'Projects': {
      'icon': Icons.folder_outlined,
      'items': [
        'Issues Log',
        'Project Planning',
        'Project Task',
        'Project Team',
        'Project Update',
      ],
    },
    'System Configuration': {
      'icon': Icons.settings,
      'items': [
        'Area',
        'Branch',
        'Division',
        'Portfolio',
        'Project Type',
        'Responsible Department',
        'Responsible Entity',
        'Station',
        'Topic',
        'Unit',
      ],
    },
    'Reports': {
      'icon': Icons.assessment,
      'items': [
        'Analysis',
        'Dashboards',
        'Reports',
      ],
    },
    'User Management': {
      'icon': Icons.people,
      'items': [
        'Users',
        'Scheduler Event',
        'My Details',
        'Role',
      ],
    },
  };

// Search filter method
  void _filterMenuItems(String query) {
    setState(() {
      _searchQuery = query.toLowerCase();
    });
  }

// Build filtered search results
  List<Widget> _buildFilteredResults() {
    List<Widget> filteredWidgets = [];

    if (_searchQuery.isEmpty) {
      return filteredWidgets;
    }

    _menuSections.forEach((sectionTitle, sectionData) {
      List<String> items = List<String>.from(sectionData['items']);
      IconData icon = sectionData['icon'];

      // Check if section title matches
      bool sectionMatches = sectionTitle.toLowerCase().contains(_searchQuery);

      // Filter items that match the search query
      List<String> filteredItems = items.where((item) =>
          item.toLowerCase().contains(_searchQuery)).toList();

      // If section title matches, show all items in that section
      if (sectionMatches) {
        filteredWidgets.add(_buildExpandableSection(sectionTitle, icon, items));
      }
      // If only some items match, show section with only matching items
      else if (filteredItems.isNotEmpty) {
        filteredWidgets.add(_buildExpandableSection(sectionTitle, icon, filteredItems));
      }
    });

    // Show "No results found" if nothing matches
    if (filteredWidgets.isEmpty) {
      filteredWidgets.add(
        Padding(
          padding: EdgeInsets.all(16),
          child: Text(
            'No results found for "$_searchQuery"',
            style: TextStyle(
              color: Colors.grey.shade600,
              fontStyle: FontStyle.italic,
            ),
            textAlign: TextAlign.center,
          ),
        ),
      );
    }

    return filteredWidgets;
  }

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }


  Widget _buildExpandableSection(String title, IconData icon, List<String> items) {
    return ExpansionTile(
      leading: Icon(icon, color: Colors.grey.shade600),
      title: Text(
        title,
        style: TextStyle(
          fontSize: 14,
          fontWeight: FontWeight.w500,
          color: Colors.black,
        ),
      ),
      children: items.map((item) => _buildMenuItem(item)).toList(),
    );
  }

  Widget _buildMenuItem(String title) {
    bool isSelected = currentPageName == title;
    return Container(
      margin: EdgeInsets.only(left: 16),
      child: ListTile(
        leading: Icon(
          _getIconForPage(title),
          color: isSelected ? Colors.blue : Colors.grey.shade600,
          size: 20,
        ),
        title: Text(
          title,
          style: TextStyle(
            fontSize: 13,
            color: isSelected ? Colors.blue : Colors.black,
            fontWeight: isSelected ? FontWeight.w600 : FontWeight.normal,
          ),
        ),
        selected: isSelected,
        onTap: () {
          navigateToPage(title);
          isSidebarVisible = false;
        },
      ),
    );
  }

  IconData _getIconForPage(String page) {
    switch (page) {
      case 'Issues Log':
        return Icons.list_alt;
      case 'Project Planning':
        return Icons.calendar_today;
      case 'Project Task':
        return Icons.task;
      case 'Project Team':
        return Icons.group;
      case 'Project Update':
        return Icons.update;
      case 'Area':
        return Icons.location_on;
      case 'Branch':
        return Icons.sticky_note_2_sharp;
      case 'Division':
        return Icons.location_on;
      case 'Portfolio':
        return Icons.folder_rounded;
      case 'Project Type':
        return Icons.cloud_circle_sharp;
      case 'Responsible Department':
        return Icons.ballot_rounded;
      case 'Responsible Entity':
        return Icons.person;
      case 'Station':
        return Icons.folder_copy_sharp;
      case 'Topic':
        return Icons.list_outlined;
      case 'Unit':
        return Icons.call_missed_outgoing;
      case 'Analysis':
        return Icons.bar_chart_sharp;
      case 'Dashboards':
        return Icons.pie_chart_sharp;
      case 'Reports':
        return Icons.pix;
      case 'Users':
        return Icons.people_sharp;
      case 'Scheduler Event':
        return Icons.calendar_month_sharp;
      case 'My Details':
        return Icons.person_outlined;
      case 'Role':
        return Icons.account_box_sharp;
      default:
        return Icons.circle_outlined;
    }
  }
}

//Login Page
class LoginPage extends StatefulWidget {
  final Function(String) onLoginSuccess;

  const LoginPage({Key? key, required this.onLoginSuccess}) : super(key: key);

  @override
  _LoginPageState createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  final TextEditingController _usernameController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  bool _isLoading = false;

  void _handleLogin() async {
    if (_usernameController.text.isEmpty || _passwordController.text.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Please enter both username and password')),
      );
      return;
    }

    setState(() {
      _isLoading = true;
    });

    // Simulate login process
    await Future.delayed(Duration(seconds: 1));

    // Accept any non-empty credentials
    setState(() {
      _isLoading = false;
    });

    widget.onLoginSuccess(_usernameController.text);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey.shade100,
      body: Center(
        child: SingleChildScrollView(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              // Logo and title
              Container(
                margin: EdgeInsets.only(bottom: 40),
                child: Column(
                  children: [
                    Container(
                      width: 80,
                      height: 80,
                      decoration: BoxDecoration(
                        color: Colors.white,
                        shape: BoxShape.circle,
                        boxShadow: [
                          BoxShadow(
                            color: Colors.grey.withOpacity(0.3),
                            spreadRadius: 2,
                            blurRadius: 5,
                            offset: Offset(0, 3),
                          ),
                        ],
                      ),
                      child: Icon(
                        Icons.business,
                        size: 30,
                        color: Colors.blue,
                      ),
                    ),
                    SizedBox(height: 20),
                    Text(
                      'Project Management',
                      style: TextStyle(
                        fontSize: 20,
                        fontWeight: FontWeight.bold,
                        color: Colors.black,
                        fontStyle: FontStyle.italic,
                      ),
                    ),
                    Text(
                      'Information System',
                      style: TextStyle(
                        fontSize: 20,
                        fontWeight: FontWeight.bold,
                        color: Colors.black,
                        fontStyle: FontStyle.italic,
                      ),
                    ),
                  ],
                ),
              ),

              // Login form
              Container(
                width: 400,
                margin: EdgeInsets.symmetric(horizontal: 20),
                padding: EdgeInsets.all(30),
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(8),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.grey.withOpacity(0.3),
                      spreadRadius: 2,
                      blurRadius: 5,
                      offset: Offset(0, 3),
                    ),
                  ],
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Log In',
                      style: TextStyle(
                        fontSize: 20,
                        fontWeight: FontWeight.bold,
                        color: Colors.black,
                      ),
                      textAlign: TextAlign.center,
                    ),
                    SizedBox(height: 20),
                    Text(
                      'Enter your user name and password below.',
                      style: TextStyle(
                        fontSize: 14,
                        color: Colors.grey.shade600,
                      ),
                    ),
                    SizedBox(height: 30),

                    // Username field
                    Text(
                      'User Name',
                      style: TextStyle(
                        fontSize: 14,
                        fontWeight: FontWeight.w500,
                        color: Colors.black,
                      ),
                    ),
                    SizedBox(height: 8),
                    TextField(
                      controller: _usernameController,
                      decoration: InputDecoration(
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(4),
                          borderSide: BorderSide(color: Colors.grey.shade300),
                        ),
                        enabledBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(4),
                          borderSide: BorderSide(color: Colors.grey.shade300),
                        ),
                        focusedBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(4),
                          borderSide: BorderSide(color: Colors.blue, width: 2),
                        ),
                        contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 12),
                      ),
                    ),
                    SizedBox(height: 20),

                    // Password field
                    Text(
                      'Password',
                      style: TextStyle(
                        fontSize: 14,
                        fontWeight: FontWeight.w500,
                        color: Colors.black,
                      ),
                    ),
                    SizedBox(height: 8),
                    TextField(
                      controller: _passwordController,
                      obscureText: true,
                      decoration: InputDecoration(
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(4),
                          borderSide: BorderSide(color: Colors.grey.shade300),
                        ),
                        enabledBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(4),
                          borderSide: BorderSide(color: Colors.grey.shade300),
                        ),
                        focusedBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(4),
                          borderSide: BorderSide(color: Colors.blue, width: 2),
                        ),
                        contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 12),
                      ),
                    ),
                    SizedBox(height: 30),

                    // Login button
                    SizedBox(
                      width: double.infinity,
                      height: 45,
                      child: ElevatedButton(
                        onPressed: _isLoading ? null : _handleLogin,
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.orange,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(4),
                          ),
                        ),
                        child: _isLoading
                            ? SizedBox(
                          height: 20,
                          width: 20,
                          child: CircularProgressIndicator(
                            color: Colors.white,
                            strokeWidth: 2,
                          ),
                        )
                            : Text(
                          'Log In',
                          style: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                            color: Colors.white,
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  @override
  void dispose() {
    _usernameController.dispose();
    _passwordController.dispose();
    super.dispose();
  }
}

// Issues Log Page
class IssuesLogPage extends StatefulWidget {
  @override
  _IssuesLogPageState createState() => _IssuesLogPageState();
}

class _IssuesLogPageState extends State<IssuesLogPage> {
  final ScrollController _horizontalScrollController = ScrollController();
  final TextEditingController _searchController = TextEditingController();

  // Column widths - can be adjusted
  Map<String, double> columnWidths = {
    'Checkbox': 60,
    'Description': 200,
    'Topic': 150,
    'DateReported': 180,
    'PersonnelAssigned': 150,
    'PersonnelReport': 180,
    'OSTicket': 120,
    'ReportingArea': 150,
    'ReportingDivision': 150,
    'ReportingStation': 150,
    'DateAssigned': 200,
    'ClosureDate': 150,
    'Status': 120,
    'AgingICTD': 150,
    'AgingEntity': 200,
  };

  // Map column keys to data field names
  Map<String, String> columnToDataField = {
    'Description': 'description',
    'Topic': 'topic',
    'DateReported': 'dateReported',
    'PersonnelAssigned': 'personnelAssigned',
    'PersonnelReport': 'personnelReported',
    'OSTicket': 'osTicket',
    'ReportingArea': 'reportingArea',
    'ReportingDivision': 'reportingDivision',
    'DateAssigned': 'dateAssigned',
    'ClosureDate': 'closureDate',
    'Status': 'status',
    'AgingICTD': 'agingICTD',
    'AgingEntity': 'agingEntity',
  };

  // Sorting state
  String _sortColumn = '';
  bool _sortAscending = true;

  // Pagination state
  int _currentPage = 1;
  int _pageSize = 20;
  final List<int> _pageSizeOptions = [10, 20, 50, 100];


  // Sample data structure for future use
  List<Map<String, dynamic>> _issuesData = [
    {
      'selected': false,
      'description': 'Sample Issue 1',
      'topic': 'Hardware',
      'dateReported': '2024-01-15',
      'personnelAssigned': 'John Doe',
      'personnelReport': 'Jane Smith',
      'osTicket': 'OS-001',
      'reportingArea': 'IT',
      'reportingDivision': 'Support',
      'reportingStation': 'Station A',
      'dateAssigned': '2024-01-16',
      'closureDate': '',
      'status': 'Open',
      'agingICTD': '5 days',
      'agingEntity': '4 days',
    },
    {
      'selected': false,
      'description': 'Another Issue',
      'topic': 'Software',
      'dateReported': '2024-01-10',
      'personnelAssigned': 'Mike Johnson',
      'personnelReport': 'Sarah Wilson',
      'osTicket': 'OS-002',
      'reportingArea': 'Finance',
      'reportingDivision': 'Accounting',
      'reportingStation': 'Station B',
      'dateAssigned': '2024-01-11',
      'closureDate': '2024-01-20',
      'status': 'Closed',
      'agingICTD': '10 days',
      'agingEntity': '9 days',
    },
    {
      'selected': false,
      'description': 'Network connectivity issue',
      'topic': 'Network',
      'dateReported': '2024-01-12',
      'personnelAssigned': 'Alice Brown',
      'personnelReport': 'Bob Davis',
      'osTicket': 'OS-003',
      'reportingArea': 'HR',
      'reportingDivision': 'Operations',
      'reportingStation': 'Station C',
      'dateAssigned': '2024-01-13',
      'closureDate': '',
      'status': 'In Progress',
      'agingICTD': '7 days',
      'agingEntity': '6 days',
    },
  ];

  bool _selectAll = false;

  @override
  void dispose() {
    _horizontalScrollController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  List<Map<String, dynamic>> get _filteredData {
    var filtered = _issuesData;

    // Apply search filter
    if (_searchController.text.isNotEmpty) {
      filtered = filtered.where((issue) {
        return issue.values.any((value) =>
            value.toString().toLowerCase().contains(_searchController.text.toLowerCase()));
      }).toList();
    }

    // Apply sorting
    if (_sortColumn.isNotEmpty) {
      String dataField = columnToDataField[_sortColumn] ?? _sortColumn;
      filtered.sort((a, b) {
        var aValue = a[dataField] ?? '';
        var bValue = b[dataField] ?? '';

        int comparison = aValue.toString().compareTo(bValue.toString());
        return _sortAscending ? comparison : -comparison;
      });
    }

    return filtered;
  }

  List<Map<String, dynamic>> get _paginatedData {
    var filtered = _filteredData;
    int startIndex = (_currentPage - 1) * _pageSize;
    int endIndex = startIndex + _pageSize;

    if (startIndex >= filtered.length) return [];
    if (endIndex > filtered.length) endIndex = filtered.length;

    return filtered.sublist(startIndex, endIndex);
  }

  int get _totalPages {
    return (_filteredData.length / _pageSize).ceil();
  }

  void _navigateToNewIssuePage() async {
    final result = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => NewIssuePage(),
      ),
    );

    if (result != null) {
      setState(() {
        _issuesData.add({
          'selected': false,
          'description': result['descriptionOfIssue'],
          'topic': result['topic'],
          'dateReported': result['dateReportedToICTD'],
          'personnelAssigned': result['personnelAssigned'],
          'personnelReport': result['personnelReportingIssue'], // Fixed field name
          'osTicket': result['osTicketNumber'], // Fixed field name
          'reportingArea': result['reportingArea'],
          'reportingDivision': result['reportingDivision'],
          'reportingStation': result['reportingStation'],
          'dateAssigned': result['dateAssignedToResponsibleEntity'],
          'closureDate': result['issueClosureDate'],
          'status': result['issueStatus'],
          'agingICTD': result['agingForIssueICTD'],
          'agingEntity': result['agingForIssueResponsibleEntity'],
        });
      });

      // If keepOpen flag is set, reopen the page
      if (result['keepOpen'] == true) {
        _navigateToNewIssuePage();
      }
    }
  }


  void _refreshData() {
    setState(() {
      // Unselect all checkboxes
      for (var issue in _issuesData) {
        issue['selected'] = false;
      }
      _selectAll = false;
      // add actual data refresh logic here
    });
  }

  void _toggleSelectAll() {
    setState(() {
      _selectAll = !_selectAll;
      for (var issue in _paginatedData) {
        issue['selected'] = _selectAll;
      }
    });
  }

  void _deleteSelected() {
    setState(() {
      _issuesData.removeWhere((issue) => issue['selected'] == true);
      _selectAll = false;
      // Adjust current page if needed
      if (_currentPage > _totalPages && _totalPages > 0) {
        _currentPage = _totalPages;
      }
    });
  }

  void _exportData() {
    // Add export functionality here
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Export functionality would be implemented here')),
    );
  }

  void _showFilterDialog(String columnKey) {
    // Add filter dialog functionality here
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Filter ${columnKey}'),
        content: Text('Filter functionality would be implemented here'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Close'),
          ),
        ],
      ),
    );
  }

  void _sortData(String columnKey) {
    setState(() {
      if (_sortColumn == columnKey) {
        _sortAscending = !_sortAscending;
      } else {
        _sortColumn = columnKey;
        _sortAscending = true;
      }
    });
  }

  bool _hasSelectedItems() {
    return _issuesData.any((issue) => issue['selected'] == true);
  }

  Widget _buildResizableColumn({
    required String title,
    required String columnKey,
    required bool isLast,
    Widget? customContent,
  }) {
    return Container(
      width: columnWidths[columnKey],
      child: Row(
        children: [
          Expanded(
            child: Container(
              height: 40, // Fixed height for consistent checkbox alignment
              padding: EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.grey.shade200,
                border: Border(
                  right: BorderSide(color: Colors.grey.shade400),
                  bottom: BorderSide(color: Colors.grey.shade400),
                ),
              ),
              child: customContent ??
                  Row(
                    children: [
                      Expanded(
                        child: Text(
                          title,
                          style: TextStyle(fontWeight: FontWeight.bold, fontSize: 12),
                          overflow: TextOverflow.ellipsis,
                        ),
                      ),
                      if (columnKey == 'Description') ...[
                        GestureDetector(
                          onTap: () => _sortData(columnKey),
                          child: Icon(
                            _sortColumn == columnKey
                                ? (_sortAscending ? Icons.arrow_upward : Icons.arrow_downward)
                                : Icons.unfold_more,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                        ),
                        SizedBox(width: 4),
                      ],
                      if (columnKey != 'Checkbox')
                        GestureDetector(
                          onTap: () => _showFilterDialog(columnKey),
                          child: Icon(
                            Icons.filter_alt_outlined,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                        ),
                    ],
                  ),
            ),
          ),
          if (!isLast)
            GestureDetector(
              onPanUpdate: (details) {
                setState(() {
                  columnWidths[columnKey] =
                      (columnWidths[columnKey]! + details.delta.dx).clamp(60.0, 400.0);
                });
              },
              child: Container(
                width: 4,
                height: 40,
                color: Colors.grey.shade400,
                child: MouseRegion(
                  cursor: SystemMouseCursors.resizeColumn,
                  child: Container(),
                ),
              ),
            ),
        ],
      ),
    );
  }

  Widget _buildDataCell(dynamic data, String columnKey, {Widget? customContent}) {
    return Container(
      width: columnWidths[columnKey],
      height: 40, // Fixed height for consistent alignment
      padding: EdgeInsets.all(8),
      decoration: BoxDecoration(
        border: Border(
          right: BorderSide(color: Colors.grey.shade400),
          bottom: BorderSide(color: Colors.grey.shade400),
        ),
      ),
      child: Align(
        alignment: Alignment.centerLeft,
        child: customContent ??
            Text(
              data.toString(),
              style: TextStyle(fontSize: 12),
              overflow: TextOverflow.ellipsis,
            ),
      ),
    );
  }


  Widget _buildPaginationControls() {
    return Container(
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        border: Border(
          top: BorderSide(color: Colors.grey.shade300, width: 1),
        ),
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          // Page numbers
          Row(
            children: [
              for (int i = 1; i <= _totalPages && i <= 4; i++)
                GestureDetector(
                  onTap: () {
                    setState(() {
                      _currentPage = i;
                    });
                  },
                  child: Container(
                    margin: EdgeInsets.symmetric(horizontal: 4),
                    padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                    decoration: BoxDecoration(
                      color: _currentPage == i ? Colors.orange.shade700 : Colors.transparent,
                      borderRadius: BorderRadius.circular(4),
                    ),
                    child: Text(
                      i.toString(),
                      style: TextStyle(
                        color: _currentPage == i ? Colors.white : Colors.black,
                        fontWeight: _currentPage == i ? FontWeight.bold : FontWeight.normal,
                      ),
                    ),
                  ),
                ),
            ],
          ),
          // Page size selector
          Row(
            children: [
              Text('Page Size: ', style: TextStyle(fontSize: 14)),
              DropdownButton<int>(
                value: _pageSize,
                items: _pageSizeOptions.map((size) {
                  return DropdownMenuItem<int>(
                    value: size,
                    child: Text(size.toString()),
                  );
                }).toList(),
                onChanged: (value) {
                  setState(() {
                    _pageSize = value!;
                    _currentPage = 1; // Reset to first page
                  });
                },
              ),
            ],
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        color: Colors.grey.shade50,
        child: Column(
          children: [
            // Header with buttons and search
            Container(
              width: double.infinity, // Full width
              padding: EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.white,
                border: Border(
                  bottom: BorderSide(color: Colors.grey.shade300, width: 1),
                ),
              ),
              child: LayoutBuilder(
                builder: (context, constraints) {
                  final isSmallScreen = constraints.maxWidth < 600;
                  final buttonStyle = OutlinedButton.styleFrom(
                    padding: isSmallScreen
                        ? EdgeInsets.symmetric(horizontal: 6, vertical: 4)
                        : EdgeInsets.symmetric(horizontal: 8, vertical: 6),
                    textStyle: TextStyle(
                      fontSize: isSmallScreen ? 12 : 14,
                    ),
                    minimumSize: Size(0, isSmallScreen ? 30 : 36),
                    side: BorderSide(color: Colors.grey.shade300),
                  );

                  return SingleChildScrollView(
                    scrollDirection: Axis.horizontal,
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.start, // Left-aligned content
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        // New Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _navigateToNewIssuePage,
                            icon: Icon(Icons.add, color: Colors.orange.shade700, size: 20),
                            padding: EdgeInsets.all(4),
                            tooltip: 'New',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _navigateToNewIssuePage,
                            icon: Icon(Icons.add, color: Colors.orange.shade700, size: 20),
                            label: Text('New'),
                            style: buttonStyle.copyWith(
                              backgroundColor: MaterialStateProperty.all(Colors.white),
                              foregroundColor: MaterialStateProperty.all(Colors.black),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Delete Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _hasSelectedItems() ? _deleteSelected : null,
                            icon: Icon(Icons.delete,
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                                size: 20
                            ),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Delete',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _hasSelectedItems() ? _deleteSelected : null,
                            icon: Icon(Icons.delete,
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                                size: 20
                            ),
                            label: Text(
                              'Delete',
                              style: TextStyle(
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                              ),
                            ),
                            style: buttonStyle.copyWith(
                              foregroundColor: MaterialStateProperty.all(
                                _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                              ),
                              side: MaterialStateProperty.all(
                                BorderSide(color: Colors.grey.shade300),
                              ),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Search Field
                        Container(
                          width: isSmallScreen ? 180 : 300,
                          child: TextField(
                            controller: _searchController,
                            onChanged: (value) {
                              setState(() {
                                _currentPage = 1;
                              });
                            },
                            decoration: InputDecoration(
                              isDense: true,
                              hintText: 'Search...',
                              suffixIcon: Icon(Icons.search, color: Colors.orange.shade700),
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(4),
                              ),
                              contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                            ),
                          ),
                        ),

                        SizedBox(width: 12),

                        // Export Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _exportData,
                            icon: Icon(Icons.download, color: Colors.orange.shade700, size: 20),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Export',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _exportData,
                            icon: Icon(Icons.download, color: Colors.orange.shade700, size: 20),
                            label: Text('Export'),
                            style: buttonStyle.copyWith(
                              backgroundColor: MaterialStateProperty.all(Colors.white),
                              foregroundColor: MaterialStateProperty.all(Colors.black),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Refresh Button
                        IconButton(
                          onPressed: _refreshData,
                          icon: Icon(Icons.refresh, color: Colors.orange.shade700, size: 20),
                          padding: EdgeInsets.all(4),
                          tooltip: 'Refresh',
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),

            // Table area
            Expanded(
              child: Container(
                margin: EdgeInsets.all(16),
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.grey.shade300),
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(4),
                ),
                child: Column(
                  children: [
                    // Table with synchronized scrolling
                    Expanded(
                      child: _paginatedData.isEmpty
                          ? Center(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(
                              Icons.folder_open,
                              size: 64,
                              color: Colors.grey.shade400,
                            ),
                            SizedBox(height: 16),
                            Text(
                              'No issues found',
                              style: TextStyle(
                                fontSize: 18,
                                color: Colors.grey.shade600,
                              ),
                            ),
                            SizedBox(height: 8),
                            Text(
                              'Click "New" to add your first issue',
                              style: TextStyle(
                                fontSize: 14,
                                color: Colors.grey.shade500,
                              ),
                            ),
                          ],
                        ),
                      )
                          : SingleChildScrollView(
                        controller: _horizontalScrollController,
                        scrollDirection: Axis.horizontal,
                        child: Column(
                          children: [
                            // Table header
                            Row(
                              children: [
                                _buildResizableColumn(
                                  title: '',
                                  columnKey: 'Checkbox',
                                  isLast: false,
                                  customContent: Center(
                                    child: Checkbox(
                                      value: _selectAll,
                                      onChanged: (value) => _toggleSelectAll(),
                                    ),
                                  ),
                                ),
                                _buildResizableColumn(
                                  title: 'Description Of Issue',
                                  columnKey: 'Description',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Topic',
                                  columnKey: 'Topic',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Date Reported To ICTD',
                                  columnKey: 'DateReported',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Personnel Assigned',
                                  columnKey: 'PersonnelAssigned',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Personnel Reporting Issue',
                                  columnKey: 'PersonnelReport',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'OSTicket NO',
                                  columnKey: 'OSTicket',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Reporting Area',
                                  columnKey: 'ReportingArea',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Reporting Division',
                                  columnKey: 'ReportingDivision',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Reporting Station',
                                  columnKey: 'ReportingStation',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Date Assigned to Responsible Entity',
                                  columnKey: 'DateAssigned',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Issue Closure Date',
                                  columnKey: 'ClosureDate',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Issue Status',
                                  columnKey: 'Status',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Aging For Issue ICTD',
                                  columnKey: 'AgingICTD',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Aging For Issue Responsible Entity',
                                  columnKey: 'AgingEntity',
                                  isLast: true,
                                ),
                              ],
                            ),

                            // Table body
                            Expanded(
                              child: SingleChildScrollView(
                                child: Column(
                                  children: _paginatedData.map((issue) {
                                    return Row(
                                      children: [
                                        _buildDataCell(
                                          '',
                                          'Checkbox',
                                          customContent: Center(
                                            child: Checkbox(
                                              value: issue['selected'],
                                              onChanged: (value) {
                                                setState(() {
                                                  issue['selected'] = value;
                                                });
                                              },
                                            ),
                                          ),
                                        ),
                                        _buildDataCell(issue['description'] ?? '', 'Description'),
                                        _buildDataCell(issue['topic'] ?? '', 'Topic'),
                                        _buildDataCell(issue['dateReported'] ?? '', 'DateReported'),
                                        _buildDataCell(issue['personnelAssigned'] ?? '', 'PersonnelAssigned'),
                                        _buildDataCell(issue['personnelReport'] ?? '', 'PersonnelReport'),
                                        _buildDataCell(issue['osTicket'] ?? '', 'OSTicket'),
                                        _buildDataCell(issue['reportingArea'] ?? '', 'ReportingArea'),
                                        _buildDataCell(issue['reportingDivision'] ?? '', 'ReportingDivision'),
                                        _buildDataCell(issue['reportingStation'] ?? '', 'ReportingStation'),
                                        _buildDataCell(issue['dateAssigned'] ?? '', 'DateAssigned'),
                                        _buildDataCell(issue['closureDate'] ?? '', 'ClosureDate'),
                                        _buildDataCell(issue['status'] ?? '', 'Status'),
                                        _buildDataCell(issue['agingICTD'] ?? '', 'AgingICTD'),
                                        _buildDataCell(issue['agingEntity'] ?? '', 'AgingEntity'),
                                      ],
                                    );
                                  }).toList(),
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                    // Pagination controls
                    if (_totalPages > 0) _buildPaginationControls(),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// New Issue Page
class NewIssuePage extends StatefulWidget {
  @override
  _NewIssuePageState createState() => _NewIssuePageState();
}

class _NewIssuePageState extends State<NewIssuePage> {
  final _formKey = GlobalKey<FormState>();
  final Map<String, TextEditingController> _controllers = {};

  // Form field values
  String _selectedIssueStatus = 'Open';
  String _selectedAgingForIssueResponsibleEntity = '0';
  String _selectedAgingForIssueICTD = '0';
  String _selectedReportingPortfolio = '';
  String _selectedReportingArea = '';
  String _selectedReportingBranch = '';
  String _selectedReportingDivision = '';
  String _selectedReportingStation = '';
  String _selectedResponsibleDepartment = '';
  String _selectedResponsibleEntity = '';

  List<ProjectPlanning> _projectPlannings = [];
  int _selectedTabIndex = 0;

  @override
  void initState() {
    super.initState();
    // Initialize controllers for all form fields
    [
      'topic',
      'osTicketNumber',
      'issueClosureDate',
      'externalTicketNumber',
      'personnelReportingIssue',
      'personnelAssigned',
      'dateReportedToResponsibleEntity',
      'dateAssignedToResponsibleEntity',
      'dateReportedToICTD',
      'descriptionOfIssue',
      'updateFromResponsibleEntity'
    ].forEach((field) {
      _controllers[field] = TextEditingController();
    });
  }

  @override
  void dispose() {
    _controllers.values.forEach((controller) => controller.dispose());
    super.dispose();
  }

  void _saveIssue() {
    if (_formKey.currentState!.validate()) {
      // Prepare the data to return
      Map<String, dynamic> formData = {
        'issueStatus': _selectedIssueStatus,
        'agingForIssueResponsibleEntity': _selectedAgingForIssueResponsibleEntity,
        'agingForIssueICTD': _selectedAgingForIssueICTD,
        'reportingPortfolio': _selectedReportingPortfolio,
        'reportingArea': _selectedReportingArea,
        'reportingBranch': _selectedReportingBranch,
        'reportingDivision': _selectedReportingDivision,
        'reportingStation': _selectedReportingStation,
        'responsibleDepartment': _selectedResponsibleDepartment,
        'responsibleEntity': _selectedResponsibleEntity,
        'keepOpen': false,
      };

      // Add all controller values
      _controllers.forEach((key, controller) {
        formData[key] = controller.text;
      });

      Navigator.pop(context, formData);
    }
  }

  void _saveAndNew() {
    if (_formKey.currentState!.validate()) {
      // Prepare the data to return
      Map<String, dynamic> formData = {
        'issueStatus': _selectedIssueStatus,
        'agingForIssueResponsibleEntity': _selectedAgingForIssueResponsibleEntity,
        'agingForIssueICTD': _selectedAgingForIssueICTD,
        'reportingPortfolio': _selectedReportingPortfolio,
        'reportingArea': _selectedReportingArea,
        'reportingBranch': _selectedReportingBranch,
        'reportingDivision': _selectedReportingDivision,
        'reportingStation': _selectedReportingStation,
        'responsibleDepartment': _selectedResponsibleDepartment,
        'responsibleEntity': _selectedResponsibleEntity,
        'keepOpen': true,
      };

      // Add all controller values
      _controllers.forEach((key, controller) {
        formData[key] = controller.text;
      });

      Navigator.pop(context, formData);
    }
  }

  void _deleteIssue() {
    Navigator.pop(context, null);
  }

  void _refreshData() {
    setState(() {
      // Refresh the data
    });
  }

  void _addNewProject() {
    setState(() {
      _projectPlannings.add(ProjectPlanning(
        projectName: '',
        projectManager: '',
        projectBudget: '',
        projectStartDate: DateTime.now(),
        projectEndDate: DateTime.now(),
        team: '',
        projectCategory: '',
        division: '',
        unit: '',
        projectStatus: '',
      ));
    });
  }

  void _deleteProject(int index) {
    setState(() {
      _projectPlannings.removeAt(index);
    });
  }

  Widget _buildDropdownField({
    required String label,
    required String value,
    required List<String> items,
    required Function(String?) onChanged,
    bool isRequired = false,
    bool hasAddButton = false,
  }) {
    return DropdownButtonFormField<String>(
      value: value.isEmpty ? null : value,
      decoration: InputDecoration(
        labelText: isRequired ? '$label*' : label,
        border: OutlineInputBorder(),
        contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
        suffixIcon: hasAddButton ? Icon(Icons.add, size: 20) : null,
      ),
      items: items.map((item) => DropdownMenuItem(
        value: item,
        child: Text(item),
      )).toList(),
      onChanged: onChanged,
      validator: isRequired ? (value) {
        if (value == null || value.isEmpty) {
          return 'Please select a $label';
        }
        return null;
      } : null,
    );
  }

  Widget _buildDateField({
    required String label,
    required String controllerKey,
    bool isRequired = false,
  }) {
    return TextFormField(
      controller: _controllers[controllerKey],
      decoration: InputDecoration(
        labelText: isRequired ? '$label*' : label,
        border: OutlineInputBorder(),
        contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
        suffixIcon: Icon(Icons.calendar_today, size: 20),
      ),
      readOnly: true,
      onTap: () async {
        DateTime? picked = await showDatePicker(
          context: context,
          initialDate: DateTime.now(),
          firstDate: DateTime(2000),
          lastDate: DateTime(2100),
        );
        if (picked != null) {
          _controllers[controllerKey]?.text =
          '${picked.month}/${picked.day}/${picked.year}';
        }
      },
      validator: isRequired ? (value) {
        if (value == null || value.isEmpty) {
          return 'Please select a $label';
        }
        return null;
      } : null,
    );
  }

  Widget _buildProjectPlanningsTab() {
    return Container(
      padding: EdgeInsets.all(16),
      child: Column(
        children: [

          // Action buttons
          Container(
            width: double.infinity,
            child: SingleChildScrollView(
              scrollDirection: Axis.horizontal,
              child: Row(
                children: [
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.add, size: 16),
                    label: Text('New'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.link, size: 16),
                    label: Text('Link'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.link_off, size: 16),
                    label: Text('Unlink'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.delete, size: 16, color: Colors.red),
                    label: Text('Delete'),
                    style: OutlinedButton.styleFrom(
                      foregroundColor: Colors.red,
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.check_circle, size: 16, color: Colors.green),
                    label: Text('Complete'),
                    style: OutlinedButton.styleFrom(
                      foregroundColor: Colors.green,
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  Container(
                    width: 180,
                    child: TextField(
                      decoration: InputDecoration(
                        isDense: true,
                        hintText: 'Search...',
                        prefixIcon: Icon(Icons.search, size: 16),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(4),
                          borderSide: BorderSide(color: Colors.grey.shade300),
                        ),
                        contentPadding: EdgeInsets.symmetric(vertical: 8, horizontal: 8),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
          SizedBox(height: 16),
          // Table
          Expanded(
            child: Container(
              decoration: BoxDecoration(
                border: Border.all(color: Colors.grey.shade300),
                borderRadius: BorderRadius.circular(4),
              ),
              child: Column(
                children: [
                  // Table header
                  Container(
                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 12),
                    decoration: BoxDecoration(
                      color: Colors.grey.shade100,
                      border: Border(bottom: BorderSide(color: Colors.grey.shade300)),
                    ),
                    child: SingleChildScrollView(
                      scrollDirection: Axis.horizontal,
                      child: Row(
                        children: [
                          Container(width: 40, child: Checkbox(value: false, onChanged: (_) {})),
                          SizedBox(width: 8),
                          _buildCompactTableHeader('Project Name'),
                          _buildCompactTableHeader('Project Manager'),
                          _buildCompactTableHeader('Project Budget'),
                          _buildCompactTableHeader('Project Start Date'),
                          _buildCompactTableHeader('Project End Date'),
                          _buildCompactTableHeader('Team'),
                          _buildCompactTableHeader('Project Category'),
                          _buildCompactTableHeader('Division'),
                          _buildCompactTableHeader('Unit'),
                          _buildCompactTableHeader('Project Status'),
                        ],
                      ),
                    ),
                  ),
                  // Table content
                  Expanded(
                    child: _projectPlannings.isEmpty
                        ? Center(child: Text('No data to display', style: TextStyle(color: Colors.grey)))
                        : ListView.builder(
                      itemCount: _projectPlannings.length,
                      itemBuilder: (context, index) {
                        return Container(
                          padding: EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                          decoration: BoxDecoration(
                            border: Border(bottom: BorderSide(color: Colors.grey.shade200)),
                          ),
                          child: Row(
                            children: [
                              Container(width: 40, child: Checkbox(value: false, onChanged: (_) {})),
                              Icon(Icons.add, size: 16, color: Colors.orange.shade700),
                              SizedBox(width: 16),
                              _buildTableCell(_projectPlannings[index].projectName, flex: 2),
                              _buildTableCell(_projectPlannings[index].projectManager),
                              _buildTableCell(_projectPlannings[index].projectBudget),
                              _buildTableCell('${_projectPlannings[index].projectStartDate.month}/${_projectPlannings[index].projectStartDate.day}/${_projectPlannings[index].projectStartDate.year}'),
                              _buildTableCell('${_projectPlannings[index].projectEndDate.month}/${_projectPlannings[index].projectEndDate.day}/${_projectPlannings[index].projectEndDate.year}'),
                              _buildTableCell(_projectPlannings[index].team),
                              _buildTableCell(_projectPlannings[index].projectCategory),
                              _buildTableCell(_projectPlannings[index].division),
                              _buildTableCell(_projectPlannings[index].unit),
                              _buildTableCell(_projectPlannings[index].projectStatus),
                            ],
                          ),
                        );
                      },
                    ),
                  ),
                ],
              ),
            ),
          ),
          // Pagination
          Container(
            padding: EdgeInsets.symmetric(vertical: 16),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Container(
                  padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                  decoration: BoxDecoration(
                    color: Colors.orange.shade700,
                    borderRadius: BorderRadius.circular(4),
                  ),
                  child: Text('1', style: TextStyle(color: Colors.white, fontWeight: FontWeight.w600)),
                ),
                Row(
                  children: [
                    Text('Page Size: '),
                    DropdownButton<int>(
                      value: 20,
                      items: [10, 20, 50, 100].map((size) => DropdownMenuItem(
                        value: size,
                        child: Text(size.toString()),
                      )).toList(),
                      onChanged: (value) {},
                      underline: Container(),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildCompactTableHeader(String title) {
    return Container(
      width: 120,
      padding: EdgeInsets.symmetric(horizontal: 4),
      child: Row(
        children: [
          Expanded(
            child: Text(
              title,
              style: TextStyle(fontWeight: FontWeight.w600, fontSize: 10),
              overflow: TextOverflow.ellipsis,
            ),
          ),
          Icon(Icons.filter_list, size: 10, color: Colors.grey),
        ],
      ),
    );
  }

  Widget _buildTableCell(String text, {int flex = 1}) {
    return Expanded(
      flex: flex,
      child: Text(
        text.isEmpty ? '-' : text,
        style: TextStyle(fontSize: 12),
      ),
    );
  }

  Widget _buildTableHeader(String title) {
    return Expanded(
      child: Row(
        children: [
          Text(
            title,
            style: TextStyle(
              fontWeight: FontWeight.w600,
              color: Colors.black87,
              fontSize: 12,
            ),
          ),
          Icon(Icons.filter_list, size: 12, color: Colors.grey.shade600),
        ],
      ),
    );
  }


  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        Navigator.pop(context, null);
        return false;
      },
      child: Scaffold(
        appBar: AppBar(
          title: Text('Issues Log'),
          backgroundColor: Colors.white,
          foregroundColor: Colors.black,
          elevation: 0,
          actions: [
            IconButton(
              onPressed: () => Navigator.pop(context),
              icon: Icon(Icons.arrow_back),
            ),
            IconButton(
              onPressed: () => Navigator.pop(context),
              icon: Icon(Icons.arrow_forward),
            ),
            IconButton(
              onPressed: _refreshData,
              icon: Icon(Icons.refresh),
            ),
          ],
        ),
        body: Container(
          color: Colors.grey.shade50,
          child: Column(
            children: [
              // Action buttons - Made responsive
              Container(
                padding: EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.white,
                  border: Border(
                    bottom: BorderSide(color: Colors.grey.shade300, width: 1),
                  ),
                ),
                child: LayoutBuilder(
                  builder: (context, constraints) {
                    bool isSmallScreen = constraints.maxWidth < 600;

                    if (isSmallScreen) {
                      // Stack buttons vertically on small screens
                      return Column(
                        children: [
                          Row(
                            children: [
                              Expanded(
                                child: OutlinedButton.icon(
                                  onPressed: _deleteIssue,
                                  icon: Icon(Icons.delete, color: Colors.red.shade400, size: 18),
                                  label: Text('Delete', style: TextStyle(fontSize: 12)),
                                  style: OutlinedButton.styleFrom(
                                    foregroundColor: Colors.red.shade400,
                                    side: BorderSide(color: Colors.grey.shade300),
                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                  ),
                                ),
                              ),
                            ],
                          ),
                          SizedBox(height: 6),
                          Row(
                            children: [
                              Expanded(
                                child: OutlinedButton.icon(
                                  onPressed: _saveAndNew,
                                  icon: Icon(Icons.save, color: Colors.orange.shade700, size: 18),
                                  label: Text('Save & New', style: TextStyle(fontSize: 12)),
                                  style: OutlinedButton.styleFrom(
                                    foregroundColor: Colors.orange.shade700,
                                    side: BorderSide(color: Colors.orange.shade700),
                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                  ),
                                ),
                              ),
                              SizedBox(width: 6),
                              Expanded(
                                child: ElevatedButton.icon(
                                  onPressed: _saveIssue,
                                  icon: Icon(Icons.save, color: Colors.white, size: 18),
                                  label: Text('Save', style: TextStyle(fontSize: 12)),
                                  style: ElevatedButton.styleFrom(
                                    backgroundColor: Colors.orange.shade700,
                                    foregroundColor: Colors.white,
                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ],
                      );
                    } else {
                      // Original horizontal layout for larger screens
                      return Row(
                        children: [
                          OutlinedButton.icon(
                            onPressed: _deleteIssue,
                            icon: Icon(Icons.delete, color: Colors.red.shade400, size: 20),
                            label: Text('Delete'),
                            style: OutlinedButton.styleFrom(
                              foregroundColor: Colors.red.shade400,
                              side: BorderSide(color: Colors.grey.shade300),
                            ),
                          ),
                          Spacer(),
                          OutlinedButton.icon(
                            onPressed: _saveAndNew,
                            icon: Icon(Icons.save, color: Colors.orange.shade700, size: 20),
                            label: Text('Save and New'),
                            style: OutlinedButton.styleFrom(
                              foregroundColor: Colors.orange.shade700,
                              side: BorderSide(color: Colors.orange.shade700),
                            ),
                          ),
                          SizedBox(width: 8),
                          ElevatedButton.icon(
                            onPressed: _saveIssue,
                            icon: Icon(Icons.save, color: Colors.white, size: 20),
                            label: Text('Save'),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.orange.shade700,
                              foregroundColor: Colors.white,
                            ),
                          ),
                        ],
                      );
                    }
                  },
                ),
              ),

              // Form content
              Expanded(
                child: SingleChildScrollView(
                  padding: EdgeInsets.all(12),
                  child: Form(
                    key: _formKey,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Issues Log',
                          style: TextStyle(
                            fontSize: 24,
                            fontWeight: FontWeight.bold,
                            color: Colors.black87,
                          ),
                        ),
                        SizedBox(height: 20),

                        // Issue Information Section
                        Container(
                          width: double.infinity,
                          padding: EdgeInsets.all(12),
                          decoration: BoxDecoration(
                            color: Colors.white,
                            borderRadius: BorderRadius.circular(8),
                            border: Border.all(color: Colors.grey.shade300),
                          ),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                'Issue Information',
                                style: TextStyle(
                                  fontSize: 18,
                                  fontWeight: FontWeight.w600,
                                  color: Colors.black87,
                                ),
                              ),
                              SizedBox(height: 12),

                              // Topic and Issue Status - Made responsive
                              LayoutBuilder(
                                builder: (context, constraints) {
                                  bool isSmallScreen = constraints.maxWidth < 600;

                                  if (isSmallScreen) {
                                    return Column(
                                      children: [
                                        TextFormField(
                                          controller: _controllers['topic'],
                                          decoration: InputDecoration(
                                            labelText: 'Topic',
                                            border: OutlineInputBorder(),
                                            contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 12),
                                            suffixIcon: Icon(Icons.add, size: 20),
                                          ),
                                        ),
                                        SizedBox(height: 12),
                                        _buildDropdownField(
                                          label: 'Issue Status',
                                          value: _selectedIssueStatus,
                                          items: ['Open', 'Ongoing', 'Resolved'],
                                          onChanged: (value) {
                                            setState(() {
                                              _selectedIssueStatus = value ?? '';
                                            });
                                          },
                                        ),
                                      ],
                                    );
                                  } else {
                                    return Row(
                                      children: [
                                        Expanded(
                                          child: TextFormField(
                                            controller: _controllers['topic'],
                                            decoration: InputDecoration(
                                              labelText: 'Topic',
                                              border: OutlineInputBorder(),
                                              contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
                                              suffixIcon: Icon(Icons.add, size: 20),
                                            ),
                                          ),
                                        ),
                                        SizedBox(width: 16),
                                        Expanded(
                                          child: _buildDropdownField(
                                            label: 'Issue Status',
                                            value: _selectedIssueStatus,
                                            items: ['Open', 'Ongoing', 'Resolved'],
                                            onChanged: (value) {
                                              setState(() {
                                                _selectedIssueStatus = value ?? '';
                                              });
                                            },
                                          ),
                                        ),
                                      ],
                                    );
                                  }
                                },
                              ),
                              SizedBox(height: 12),

                              // OS Ticket Number and Issue Closure Date - Made responsive
                              LayoutBuilder(
                                builder: (context, constraints) {
                                  bool isSmallScreen = constraints.maxWidth < 600;

                                  if (isSmallScreen) {
                                    return Column(
                                      children: [
                                        TextFormField(
                                          controller: _controllers['osTicketNumber'],
                                          decoration: InputDecoration(
                                            labelText: 'OS Ticket Number',
                                            border: OutlineInputBorder(),
                                            contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 12),
                                          ),
                                        ),
                                        SizedBox(height: 12),
                                        _buildDateField(
                                          label: 'Issue Closure Date',
                                          controllerKey: 'issueClosureDate',
                                        ),
                                      ],
                                    );
                                  } else {
                                    return Row(
                                      children: [
                                        Expanded(
                                          child: TextFormField(
                                            controller: _controllers['osTicketNumber'],
                                            decoration: InputDecoration(
                                              labelText: 'OS Ticket Number',
                                              border: OutlineInputBorder(),
                                              contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
                                            ),
                                          ),
                                        ),
                                        SizedBox(width: 16),
                                        Expanded(
                                          child: _buildDateField(
                                            label: 'Issue Closure Date',
                                            controllerKey: 'issueClosureDate',
                                          ),
                                        ),
                                      ],
                                    );
                                  }
                                },
                              ),
                              SizedBox(height: 12),

                              // Aging For Issue Responsible Entity and External Ticket Number - Made responsive
                              LayoutBuilder(
                                builder: (context, constraints) {
                                  bool isSmallScreen = constraints.maxWidth < 600;

                                  if (isSmallScreen) {
                                    return Column(
                                      children: [
                                        _buildDropdownField(
                                          label: 'Aging For Issue Responsible Entity',
                                          value: _selectedAgingForIssueResponsibleEntity,
                                          items: ['0', '1', '2', '3', '4', '5'],
                                          onChanged: (value) {
                                            setState(() {
                                              _selectedAgingForIssueResponsibleEntity = value ?? '';
                                            });
                                          },
                                          hasAddButton: true,
                                        ),
                                        SizedBox(height: 12),
                                        TextFormField(
                                          controller: _controllers['externalTicketNumber'],
                                          decoration: InputDecoration(
                                            labelText: 'External Ticket Number',
                                            border: OutlineInputBorder(),
                                            contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 12),
                                          ),
                                        ),
                                      ],
                                    );
                                  } else {
                                    return Row(
                                      children: [
                                        Expanded(
                                          child: _buildDropdownField(
                                            label: 'Aging For Issue Responsible Entity',
                                            value: _selectedAgingForIssueResponsibleEntity,
                                            items: ['0', '1', '2', '3', '4', '5'],
                                            onChanged: (value) {
                                              setState(() {
                                                _selectedAgingForIssueResponsibleEntity = value ?? '';
                                              });
                                            },
                                            hasAddButton: true,
                                          ),
                                        ),
                                        SizedBox(width: 16),
                                        Expanded(
                                          child: TextFormField(
                                            controller: _controllers['externalTicketNumber'],
                                            decoration: InputDecoration(
                                              labelText: 'External Ticket Number',
                                              border: OutlineInputBorder(),
                                              contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
                                            ),
                                          ),
                                        ),
                                      ],
                                    );
                                  }
                                },
                              ),
                              SizedBox(height: 12),

                              // Personnel Reporting Issue and Aging For Issue ICTD - Made responsive
                              LayoutBuilder(
                                builder: (context, constraints) {
                                  bool isSmallScreen = constraints.maxWidth < 600;

                                  if (isSmallScreen) {
                                    return Column(
                                      children: [
                                        TextFormField(
                                          controller: _controllers['personnelReportingIssue'],
                                          decoration: InputDecoration(
                                            labelText: 'Personnel Reporting Issue',
                                            border: OutlineInputBorder(),
                                            contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 12),
                                          ),
                                        ),
                                        SizedBox(height: 12),
                                        _buildDropdownField(
                                          label: 'Aging For Issue ICTD',
                                          value: _selectedAgingForIssueICTD,
                                          items: ['0', '1', '2', '3', '4', '5'],
                                          onChanged: (value) {
                                            setState(() {
                                              _selectedAgingForIssueICTD = value ?? '';
                                            });
                                          },
                                          hasAddButton: true,
                                        ),
                                      ],
                                    );
                                  } else {
                                    return Row(
                                      children: [
                                        Expanded(
                                          child: TextFormField(
                                            controller: _controllers['personnelReportingIssue'],
                                            decoration: InputDecoration(
                                              labelText: 'Personnel Reporting Issue',
                                              border: OutlineInputBorder(),
                                              contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
                                            ),
                                          ),
                                        ),
                                        SizedBox(width: 16),
                                        Expanded(
                                          child: _buildDropdownField(
                                            label: 'Aging For Issue ICTD',
                                            value: _selectedAgingForIssueICTD,
                                            items: ['0', '1', '2', '3', '4', '5'],
                                            onChanged: (value) {
                                              setState(() {
                                                _selectedAgingForIssueICTD = value ?? '';
                                              });
                                            },
                                            hasAddButton: true,
                                          ),
                                        ),
                                      ],
                                    );
                                  }
                                },
                              ),
                              SizedBox(height: 12),

                              // Date Reported To Responsible Entity and Personnel Assigned - Made responsive
                              LayoutBuilder(
                                builder: (context, constraints) {
                                  bool isSmallScreen = constraints.maxWidth < 600;

                                  if (isSmallScreen) {
                                    return Column(
                                      children: [
                                        _buildDateField(
                                          label: 'Date Reported To Responsible Entity',
                                          controllerKey: 'dateReportedToResponsibleEntity',
                                        ),
                                        SizedBox(height: 12),
                                        TextFormField(
                                          controller: _controllers['personnelAssigned'],
                                          decoration: InputDecoration(
                                            labelText: 'Personnel Assigned',
                                            border: OutlineInputBorder(),
                                            contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 12),
                                          ),
                                        ),
                                      ],
                                    );
                                  } else {
                                    return Row(
                                      children: [
                                        Expanded(
                                          child: _buildDateField(
                                            label: 'Date Reported To Responsible Entity',
                                            controllerKey: 'dateReportedToResponsibleEntity',
                                          ),
                                        ),
                                        SizedBox(width: 16),
                                        Expanded(
                                          child: TextFormField(
                                            controller: _controllers['personnelAssigned'],
                                            decoration: InputDecoration(
                                              labelText: 'Personnel Assigned',
                                              border: OutlineInputBorder(),
                                              contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
                                            ),
                                          ),
                                        ),
                                      ],
                                    );
                                  }
                                },
                              ),
                              SizedBox(height: 12),

                              // Date Assigned To Responsible Entity
                              _buildDateField(
                                label: 'Date Assigned To Responsible Entity',
                                controllerKey: 'dateAssignedToResponsibleEntity',
                              ),
                              SizedBox(height: 12),

                              // Date Reported To ICTD
                              _buildDateField(
                                label: 'Date Reported To ICTD',
                                controllerKey: 'dateReportedToICTD',
                                isRequired: true,
                              ),
                            ],
                          ),
                        ),
                        SizedBox(height: 20),

                        // Locations Section
                        Container(
                          width: double.infinity,
                          padding: EdgeInsets.all(12),
                          decoration: BoxDecoration(
                            color: Colors.white,
                            borderRadius: BorderRadius.circular(8),
                            border: Border.all(color: Colors.grey.shade300),
                          ),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                'Locations',
                                style: TextStyle(
                                  fontSize: 18,
                                  fontWeight: FontWeight.w600,
                                  color: Colors.black87,
                                ),
                              ),
                              SizedBox(height: 12),

                              // Reporting Portfolio and Reporting Area - Made responsive
                              LayoutBuilder(
                                builder: (context, constraints) {
                                  bool isSmallScreen = constraints.maxWidth < 600;

                                  if (isSmallScreen) {
                                    return Column(
                                      children: [
                                        _buildDropdownField(
                                          label: 'Reporting Portfolio',
                                          value: _selectedReportingPortfolio,
                                          items: ['Portfolio 1', 'Portfolio 2', 'Portfolio 3'],
                                          onChanged: (value) {
                                            setState(() {
                                              _selectedReportingPortfolio = value ?? '';
                                            });
                                          },
                                          hasAddButton: true,
                                        ),
                                        SizedBox(height: 12),
                                        _buildDropdownField(
                                          label: 'Reporting Area',
                                          value: _selectedReportingArea,
                                          items: ['Area 1', 'Area 2', 'Area 3'],
                                          onChanged: (value) {
                                            setState(() {
                                              _selectedReportingArea = value ?? '';
                                            });
                                          },
                                          hasAddButton: true,
                                        ),
                                      ],
                                    );
                                  } else {
                                    return Row(
                                      children: [
                                        Expanded(
                                          child: _buildDropdownField(
                                            label: 'Reporting Portfolio',
                                            value: _selectedReportingPortfolio,
                                            items: ['Portfolio 1', 'Portfolio 2', 'Portfolio 3'],
                                            onChanged: (value) {
                                              setState(() {
                                                _selectedReportingPortfolio = value ?? '';
                                              });
                                            },
                                            hasAddButton: true,
                                          ),
                                        ),
                                        SizedBox(width: 16),
                                        Expanded(
                                          child: _buildDropdownField(
                                            label: 'Reporting Area',
                                            value: _selectedReportingArea,
                                            items: ['Area 1', 'Area 2', 'Area 3'],
                                            onChanged: (value) {
                                              setState(() {
                                                _selectedReportingArea = value ?? '';
                                              });
                                            },
                                            hasAddButton: true,
                                          ),
                                        ),
                                      ],
                                    );
                                  }
                                },
                              ),
                              SizedBox(height: 12),

                              // Reporting Branch and Reporting Division - Made responsive
                              LayoutBuilder(
                                builder: (context, constraints) {
                                  bool isSmallScreen = constraints.maxWidth < 600;

                                  if (isSmallScreen) {
                                    return Column(
                                      children: [
                                        _buildDropdownField(
                                          label: 'Reporting Branch',
                                          value: _selectedReportingBranch,
                                          items: ['Branch 1', 'Branch 2', 'Branch 3'],
                                          onChanged: (value) {
                                            setState(() {
                                              _selectedReportingBranch = value ?? '';
                                            });
                                          },
                                          hasAddButton: true,
                                        ),
                                        SizedBox(height: 12),
                                        _buildDropdownField(
                                          label: 'Reporting Division',
                                          value: _selectedReportingDivision,
                                          items: ['Division 1', 'Division 2', 'Division 3'],
                                          onChanged: (value) {
                                            setState(() {
                                              _selectedReportingDivision = value ?? '';
                                            });
                                          },
                                          hasAddButton: true,
                                        ),
                                      ],
                                    );
                                  } else {
                                    return Row(
                                      children: [
                                        Expanded(
                                          child: _buildDropdownField(
                                            label: 'Reporting Branch',
                                            value: _selectedReportingBranch,
                                            items: ['Branch 1', 'Branch 2', 'Branch 3'],
                                            onChanged: (value) {
                                              setState(() {
                                                _selectedReportingBranch = value ?? '';
                                              });
                                            },
                                            hasAddButton: true,
                                          ),
                                        ),
                                        SizedBox(width: 16),
                                        Expanded(
                                          child: _buildDropdownField(
                                            label: 'Reporting Division',
                                            value: _selectedReportingDivision,
                                            items: ['Division 1', 'Division 2', 'Division 3'],
                                            onChanged: (value) {
                                              setState(() {
                                                _selectedReportingDivision = value ?? '';
                                              });
                                            },
                                            hasAddButton: true,
                                          ),
                                        ),
                                      ],
                                    );
                                  }
                                },
                              ),
                              SizedBox(height: 12),

                              // Reporting Station
                              _buildDropdownField(
                                label: 'Reporting Station',
                                value: _selectedReportingStation,
                                items: ['Station 1', 'Station 2', 'Station 3'],
                                onChanged: (value) {
                                  setState(() {
                                    _selectedReportingStation = value ?? '';
                                  });
                                },
                                hasAddButton: true,
                              ),
                              SizedBox(height: 12),

                              // Responsible Department and Responsible Entity - Made responsive
                              LayoutBuilder(
                                builder: (context, constraints) {
                                  bool isSmallScreen = constraints.maxWidth < 600;

                                  if (isSmallScreen) {
                                    return Column(
                                      children: [
                                        _buildDropdownField(
                                          label: 'Responsible Department',
                                          value: _selectedResponsibleDepartment,
                                          items: ['Department 1', 'Department 2', 'Department 3'],
                                          onChanged: (value) {
                                            setState(() {
                                              _selectedResponsibleDepartment = value ?? '';
                                            });
                                          },
                                          hasAddButton: true,
                                        ),
                                        SizedBox(height: 12),
                                        _buildDropdownField(
                                          label: 'Responsible Entity',
                                          value: _selectedResponsibleEntity,
                                          items: ['Entity 1', 'Entity 2', 'Entity 3'],
                                          onChanged: (value) {
                                            setState(() {
                                              _selectedResponsibleEntity = value ?? '';
                                            });
                                          },
                                          hasAddButton: true,
                                        ),
                                      ],
                                    );
                                  } else {
                                    return Row(
                                      children: [
                                        Expanded(
                                          child: _buildDropdownField(
                                            label: 'Responsible Department',
                                            value: _selectedResponsibleDepartment,
                                            items: ['Department 1', 'Department 2', 'Department 3'],
                                            onChanged: (value) {
                                              setState(() {
                                                _selectedResponsibleDepartment = value ?? '';
                                              });
                                            },
                                            hasAddButton: true,
                                          ),
                                        ),
                                        SizedBox(width: 16),
                                        Expanded(
                                          child: _buildDropdownField(
                                            label: 'Responsible Entity',
                                            value: _selectedResponsibleEntity,
                                            items: ['Entity 1', 'Entity 2', 'Entity 3'],
                                            onChanged: (value) {
                                              setState(() {
                                                _selectedResponsibleEntity = value ?? '';
                                              });
                                            },
                                            hasAddButton: true,
                                          ),
                                        ),
                                      ],
                                    );
                                  }
                                },
                              ),
                            ],
                          ),
                        ),
                        SizedBox(height: 20),

                        // Description Of Issue
                        TextFormField(
                          controller: _controllers['descriptionOfIssue'],
                          decoration: InputDecoration(
                            labelText: 'Description Of Issue',
                            border: OutlineInputBorder(),
                            contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 12),
                          ),
                          maxLines: 4,
                        ),
                        SizedBox(height: 12),

                        // Update From Responsible Entity
                        TextFormField(
                          controller: _controllers['updateFromResponsibleEntity'],
                          decoration: InputDecoration(
                            labelText: 'Update From Responsible Entity',
                            border: OutlineInputBorder(),
                            contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 12),
                          ),
                          maxLines: 4,
                        ),
                        SizedBox(height: 20),

                        // Project Plannings Section
                        // Tabs Section
                        Container(
                          decoration: BoxDecoration(
                            color: Colors.white,
                            borderRadius: BorderRadius.circular(8),
                            border: Border.all(color: Colors.grey.shade300),
                          ),
                          child: Column(
                            children: [
                              // Tab headers
                              Container(
                                decoration: BoxDecoration(
                                  border: Border(bottom: BorderSide(color: Colors.grey.shade300)),
                                ),
                                child: Row(
                                  children: [
                                    GestureDetector(
                                      onTap: () => setState(() => _selectedTabIndex = 0),
                                      child: Container(
                                        padding: EdgeInsets.symmetric(horizontal: 20, vertical: 12),
                                        decoration: BoxDecoration(
                                          color: _selectedTabIndex == 0 ? Colors.orange.shade700 : Colors.transparent,
                                          borderRadius: BorderRadius.only(
                                            topLeft: Radius.circular(8),
                                          ),
                                        ),
                                        child: Row(
                                          children: [
                                            Icon(
                                              Icons.task_alt,
                                              size: 16,
                                              color: _selectedTabIndex == 0 ? Colors.white : Colors.orange.shade700,
                                            ),
                                            SizedBox(width: 8),
                                            Text(
                                              'Project Plannings',
                                              style: TextStyle(
                                                color: _selectedTabIndex == 0 ? Colors.white : Colors.black87,
                                                fontWeight: FontWeight.w500,
                                              ),
                                            ),
                                          ],
                                        ),
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                              // Tab content
                              Container(
                                height: 400,
                                child: _selectedTabIndex == 0 ? _buildProjectPlanningsTab() : null,
                              ),
                            ],
                          ),
                        ),
                        SizedBox(height: 32),
                      ],
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Model class for project plannings
class ProjectPlanning {
  final String projectName;
  final String projectManager;
  final String projectBudget;
  final DateTime projectStartDate;
  final DateTime projectEndDate;
  final String team;
  final String projectCategory;
  final String division;
  final String unit;
  final String projectStatus;

  ProjectPlanning({
    required this.projectName,
    required this.projectManager,
    required this.projectBudget,
    required this.projectStartDate,
    required this.projectEndDate,
    required this.team,
    required this.projectCategory,
    required this.division,
    required this.unit,
    required this.projectStatus,
  });
}

// Project Planning Page
class ProjectPlanningPage extends StatefulWidget {
  @override
  _ProjectPlanningPageState createState() => _ProjectPlanningPageState();
}

class _ProjectPlanningPageState extends State<ProjectPlanningPage> {
  final ScrollController _horizontalScrollController = ScrollController();
  final TextEditingController _searchController = TextEditingController();

  // Column widths - can be adjusted
  Map<String, double> columnWidths = {
    'Checkbox': 60,
    'ProjectName': 200,
    'ProjectManager': 150,
    'ProjectBudget': 120,
    'ProjectStartDate': 150,
    'ProjectEndDate': 150,
    'Team': 200,
    'ProjectCategory': 150,
    'Division': 200,
    'Unit': 200,
    'ProjectStatus': 150,
  };

  // Map column keys to data field names
  Map<String, String> columnToDataField = {
    'ProjectName': 'projectName',
    'ProjectManager': 'projectManager',
    'ProjectBudget': 'projectBudget',
    'ProjectStartDate': 'projectStartDate',
    'ProjectEndDate': 'projectEndDate',
    'Team': 'team',
    'ProjectCategory': 'projectCategory',
    'Division': 'division',
    'Unit': 'unit',
    'ProjectStatus': 'projectStatus',
  };

  // Sorting state
  String _sortColumn = '';
  bool _sortAscending = true;

  // Pagination state
  int _currentPage = 1;
  int _pageSize = 20;
  final List<int> _pageSizeOptions = [10, 20, 50, 100];

  // Sample data structure
  List<Map<String, dynamic>> _allProjectsData = [
    {
      'selected': false,
      'projectName': 'Apparel Manager',
      'projectManager': 'Shevon Robinson',
      'projectBudget': '\$0.00',
      'projectStartDate': '7/1/2024',
      'projectEndDate': '8/30/2024',
      'team': 'Apparel Manager Development',
      'projectCategory': 'Internal',
      'division': 'Information and Communications Technology',
      'unit': 'Systems Maintenance and Development',
      'projectStatus': 'Deferred',
    },
  ];

  bool _selectAll = false;

  @override
  void dispose() {
    _horizontalScrollController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  List<Map<String, dynamic>> get _filteredData {
    var filtered = _allProjectsData;

    // Apply search filter
    if (_searchController.text.isNotEmpty) {
      filtered = filtered.where((project) {
        return project.values.any((value) =>
            value.toString().toLowerCase().contains(_searchController.text.toLowerCase()));
      }).toList();
    }

    // Apply sorting
    if (_sortColumn.isNotEmpty) {
      String dataField = columnToDataField[_sortColumn] ?? _sortColumn;
      filtered.sort((a, b) {
        var aValue = a[dataField] ?? '';
        var bValue = b[dataField] ?? '';

        int comparison = aValue.toString().compareTo(bValue.toString());
        return _sortAscending ? comparison : -comparison;
      });
    }

    return filtered;
  }

  List<Map<String, dynamic>> get _paginatedData {
    var filtered = _filteredData;
    int startIndex = (_currentPage - 1) * _pageSize;
    int endIndex = startIndex + _pageSize;

    if (startIndex >= filtered.length) return [];
    if (endIndex > filtered.length) endIndex = filtered.length;

    return filtered.sublist(startIndex, endIndex);
  }

  int get _totalPages {
    return (_filteredData.length / _pageSize).ceil();
  }

  void _navigateToNewProjectPage() async {
    final result = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => NewProjectPage(),
      ),
    );

    if (result != null) {
      setState(() {
        _allProjectsData.add({
          'selected': false,
          'projectName': result['projectName'],
          'projectManager': result['projectManager'],
          'projectBudget': result['projectBudget'],
          'projectStartDate': result['projectStartDate'],
          'projectEndDate': result['projectEndDate'],
          'team': result['team'],
          'projectCategory': result['projectCategory'],
          'division': result['division'],
          'unit': result['unit'],
          'projectStatus': result['projectStatus'],
        });
      });
      // If keepOpen flag is set, reopen the page
      if (result['keepOpen'] == true) {
        _navigateToNewProjectPage();
      }
    }
  }

  void _refreshData() {
    setState(() {
      // Unselect all checkboxes
      for (var project in _allProjectsData) {
        project['selected'] = false;
      }
      _selectAll = false;
      // You can add actual data refresh logic here
    });
  }

  void _toggleSelectAll() {
    setState(() {
      _selectAll = !_selectAll;
      for (var project in _paginatedData) {
        project['selected'] = _selectAll;
      }
    });
  }

  void _deleteSelected() {
    setState(() {
      _allProjectsData.removeWhere((project) => project['selected'] == true);
      _selectAll = false;
      // Adjust current page if needed
      if (_currentPage > _totalPages && _totalPages > 0) {
        _currentPage = _totalPages;
      }
    });
  }

  void _markCompleted() {
    setState(() {
      for (var project in _allProjectsData) {
        if (project['selected'] == true) {
          project['projectStatus'] = 'Completed';
          project['selected'] = false;
        }
      }
      _selectAll = false;
    });
  }

  void _exportData() {
    // Add export functionality here
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Export functionality would be implemented here')),
    );
  }

  void _showFilterDialog(String columnKey) {
    // Add filter dialog functionality here
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Filter ${columnKey}'),
        content: Text('Filter functionality would be implemented here'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Close'),
          ),
        ],
      ),
    );
  }

  void _sortData(String columnKey) {
    setState(() {
      if (_sortColumn == columnKey) {
        _sortAscending = !_sortAscending;
      } else {
        _sortColumn = columnKey;
        _sortAscending = true;
      }
    });
  }

  bool _hasSelectedItems() {
    return _allProjectsData.any((project) => project['selected'] == true);
  }

  bool _hasSelectedIncompleteItems() {
    return _allProjectsData.any((project) =>
    project['selected'] == true &&
        project['projectStatus']?.toLowerCase() != 'completed');
  }

  Widget _buildResizableColumn({
    required String title,
    required String columnKey,
    required bool isLast,
    Widget? customContent,
  }) {
    return Container(
      width: columnWidths[columnKey],
      child: Row(
        children: [
          Expanded(
            child: Container(
              height: 40, // Fixed height for consistent checkbox alignment
              padding: EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.grey.shade200,
                border: Border(
                  right: BorderSide(color: Colors.grey.shade400),
                  bottom: BorderSide(color: Colors.grey.shade400),
                ),
              ),
              child: customContent ??
                  Row(
                    children: [
                      Expanded(
                        child: Text(
                          title,
                          style: TextStyle(fontWeight: FontWeight.bold, fontSize: 12),
                          overflow: TextOverflow.ellipsis,
                        ),
                      ),
                      if (columnKey == 'ProjectName') ...[
                        GestureDetector(
                          onTap: () => _sortData(columnKey),
                          child: Icon(
                            _sortColumn == columnKey
                                ? (_sortAscending ? Icons.arrow_upward : Icons.arrow_downward)
                                : Icons.unfold_more,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                        ),
                        SizedBox(width: 4),
                      ],
                      if (columnKey != 'Checkbox')
                        GestureDetector(
                          onTap: () => _showFilterDialog(columnKey),
                          child: Icon(
                            Icons.filter_alt_outlined,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                        ),
                    ],
                  ),
            ),
          ),
          if (!isLast)
            GestureDetector(
              onPanUpdate: (details) {
                setState(() {
                  columnWidths[columnKey] =
                      (columnWidths[columnKey]! + details.delta.dx).clamp(60.0, 400.0);
                });
              },
              child: Container(
                width: 4,
                height: 40,
                color: Colors.grey.shade400,
                child: MouseRegion(
                  cursor: SystemMouseCursors.resizeColumn,
                  child: Container(),
                ),
              ),
            ),
        ],
      ),
    );
  }

  Widget _buildDataCell(dynamic data, String columnKey, {Widget? customContent}) {
    return Container(
      width: columnWidths[columnKey],
      height: 40, // Fixed height for consistent alignment
      padding: EdgeInsets.all(8),
      decoration: BoxDecoration(
        border: Border(
          right: BorderSide(color: Colors.grey.shade400),
          bottom: BorderSide(color: Colors.grey.shade400),
        ),
      ),
      child: Align(
        alignment: Alignment.centerLeft,
        child: customContent ??
            Text(
              data.toString(),
              style: TextStyle(fontSize: 12),
              overflow: TextOverflow.ellipsis,
            ),
      ),
    );
  }

  Color _getStatusColor(String status) {
    switch (status.toLowerCase()) {
      case 'completed':
        return Colors.green;
      case 'not started':
        return Colors.orange;
      case 'deferred':
        return Colors.purple;
      case 'in progress':
        return Colors.blue;
      default:
        return Colors.grey;
    }
  }

  Widget _buildStatusChip(String status) {
    return Container(
      padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      decoration: BoxDecoration(
        color: _getStatusColor(status).withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: _getStatusColor(status)),
      ),
      child: Text(
        status,
        style: TextStyle(
          color: _getStatusColor(status),
          fontSize: 10,
          fontWeight: FontWeight.w500,
        ),
      ),
    );
  }

  Widget _buildPaginationControls() {
    return Container(
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        border: Border(
          top: BorderSide(color: Colors.grey.shade300, width: 1),
        ),
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          // Page numbers
          Row(
            children: [
              for (int i = 1; i <= _totalPages && i <= 4; i++)
                GestureDetector(
                  onTap: () {
                    setState(() {
                      _currentPage = i;
                    });
                  },
                  child: Container(
                    margin: EdgeInsets.symmetric(horizontal: 4),
                    padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                    decoration: BoxDecoration(
                      color: _currentPage == i ? Colors.orange.shade700 : Colors.transparent,
                      borderRadius: BorderRadius.circular(4),
                    ),
                    child: Text(
                      i.toString(),
                      style: TextStyle(
                        color: _currentPage == i ? Colors.white : Colors.black,
                        fontWeight: _currentPage == i ? FontWeight.bold : FontWeight.normal,
                      ),
                    ),
                  ),
                ),
            ],
          ),
          // Page size selector
          Row(
            children: [
              Text('Page Size: ', style: TextStyle(fontSize: 14)),
              DropdownButton<int>(
                value: _pageSize,
                items: _pageSizeOptions.map((size) {
                  return DropdownMenuItem<int>(
                    value: size,
                    child: Text(size.toString()),
                  );
                }).toList(),
                onChanged: (value) {
                  setState(() {
                    _pageSize = value!;
                    _currentPage = 1; // Reset to first page
                  });
                },
              ),
            ],
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        color: Colors.grey.shade50,
        child: Column(
          children: [
            // Header with buttons and search
            Container(
              width: double.infinity, // Full width
              padding: EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.white,
                border: Border(
                  bottom: BorderSide(color: Colors.grey.shade300, width: 1),
                ),
              ),
              child: LayoutBuilder(
                builder: (context, constraints) {
                  final isSmallScreen = constraints.maxWidth < 600;
                  final buttonStyle = OutlinedButton.styleFrom(
                    padding: isSmallScreen
                        ? EdgeInsets.symmetric(horizontal: 6, vertical: 4)
                        : EdgeInsets.symmetric(horizontal: 8, vertical: 6),
                    textStyle: TextStyle(
                      fontSize: isSmallScreen ? 12 : 14,
                    ),
                    minimumSize: Size(0, isSmallScreen ? 30 : 36),
                    side: BorderSide(color: Colors.grey.shade300),
                  );

                  return SingleChildScrollView(
                    scrollDirection: Axis.horizontal,
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.start, // Left-aligned content
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        // New Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _navigateToNewProjectPage,
                            icon: Icon(Icons.add, color: Colors.orange.shade700, size: 20),
                            padding: EdgeInsets.all(4),
                            tooltip: 'New',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _navigateToNewProjectPage,
                            icon: Icon(Icons.add, color: Colors.orange.shade700, size: 20),
                            label: Text('New'),
                            style: buttonStyle.copyWith(
                              backgroundColor: MaterialStateProperty.all(Colors.white),
                              foregroundColor: MaterialStateProperty.all(Colors.black),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Delete Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _hasSelectedItems() ? _deleteSelected : null,
                            icon: Icon(Icons.delete,
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                                size: 20
                            ),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Delete',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _hasSelectedItems() ? _deleteSelected : null,
                            icon: Icon(Icons.delete,
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                                size: 20
                            ),
                            label: Text(
                              'Delete',
                              style: TextStyle(
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                              ),
                            ),
                            style: buttonStyle.copyWith(
                              foregroundColor: MaterialStateProperty.all(
                                _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                              ),
                              side: MaterialStateProperty.all(
                                BorderSide(color: Colors.grey.shade300),
                              ),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Mark Complete
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _hasSelectedIncompleteItems() ? _markCompleted : null,
                            icon: Icon(Icons.check_circle,
                                color: _hasSelectedIncompleteItems() ? Colors.green.shade600 : Colors.grey.shade400,
                                size: 20
                            ),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Completed',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _hasSelectedIncompleteItems() ? _markCompleted : null,
                            icon: Icon(Icons.check_circle,
                                color: _hasSelectedIncompleteItems() ? Colors.green.shade600 : Colors.grey.shade400,
                                size: 20
                            ),
                            label: Text(
                              'Completed',
                              style: TextStyle(
                                color: _hasSelectedIncompleteItems() ? Colors.green.shade600 : Colors.grey.shade400,
                              ),
                            ),
                            style: buttonStyle.copyWith(
                              foregroundColor: MaterialStateProperty.all(
                                _hasSelectedIncompleteItems() ? Colors.green.shade600 : Colors.grey.shade400,
                              ),
                              side: MaterialStateProperty.all(
                                BorderSide(color: Colors.grey.shade300),
                              ),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Search Field
                        Container(
                          width: isSmallScreen ? 180 : 300,
                          child: TextField(
                            controller: _searchController,
                            onChanged: (value) {
                              setState(() {
                                _currentPage = 1;
                              });
                            },
                            decoration: InputDecoration(
                              isDense: true,
                              hintText: 'Search...',
                              suffixIcon: Icon(Icons.search, color: Colors.orange.shade700),
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(4),
                              ),
                              contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                            ),
                          ),
                        ),

                        SizedBox(width: 12),

                        // Export Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _exportData,
                            icon: Icon(Icons.download, color: Colors.orange.shade700, size: 20),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Export',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _exportData,
                            icon: Icon(Icons.download, color: Colors.orange.shade700, size: 20),
                            label: Text('Export'),
                            style: buttonStyle.copyWith(
                              backgroundColor: MaterialStateProperty.all(Colors.white),
                              foregroundColor: MaterialStateProperty.all(Colors.black),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Refresh Button
                        IconButton(
                          onPressed: _refreshData,
                          icon: Icon(Icons.refresh, color: Colors.orange.shade700, size: 20),
                          padding: EdgeInsets.all(4),
                          tooltip: 'Refresh',
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),

            // Table area
            Expanded(
              child: Container(
                margin: EdgeInsets.all(16),
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.grey.shade300),
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(4),
                ),
                child: Column(
                  children: [
                    // Table with synchronized scrolling
                    Expanded(
                      child: _paginatedData.isEmpty
                          ? Center(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(
                              Icons.folder_open,
                              size: 64,
                              color: Colors.grey.shade400,
                            ),
                            SizedBox(height: 16),
                            Text(
                              'No projects found',
                              style: TextStyle(
                                fontSize: 18,
                                color: Colors.grey.shade600,
                              ),
                            ),
                            SizedBox(height: 8),
                            Text(
                              'Click "New" to add your first project',
                              style: TextStyle(
                                fontSize: 14,
                                color: Colors.grey.shade500,
                              ),
                            ),
                          ],
                        ),
                      )
                          : SingleChildScrollView(
                        controller: _horizontalScrollController,
                        scrollDirection: Axis.horizontal,
                        child: Column(
                          children: [
                            // Table header
                            Row(
                              children: [
                                _buildResizableColumn(
                                  title: '',
                                  columnKey: 'Checkbox',
                                  isLast: false,
                                  customContent: Center(
                                    child: Checkbox(
                                      value: _selectAll,
                                      onChanged: (value) => _toggleSelectAll(),
                                    ),
                                  ),
                                ),
                                _buildResizableColumn(
                                  title: 'Project Name',
                                  columnKey: 'ProjectName',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Project Manager',
                                  columnKey: 'ProjectManager',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Project Budget',
                                  columnKey: 'ProjectBudget',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Project Start Date',
                                  columnKey: 'ProjectStartDate',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Project End Date',
                                  columnKey: 'ProjectEndDate',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Team',
                                  columnKey: 'Team',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Project Category',
                                  columnKey: 'ProjectCategory',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Division',
                                  columnKey: 'Division',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Unit',
                                  columnKey: 'Unit',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Project Status',
                                  columnKey: 'ProjectStatus',
                                  isLast: true,
                                ),
                              ],
                            ),

                            // Table body
                            Expanded(
                              child: SingleChildScrollView(
                                child: Column(
                                  children: _paginatedData.map((project) {
                                    return Row(
                                      children: [
                                        _buildDataCell(
                                          '',
                                          'Checkbox',
                                          customContent: Center(
                                            child: Checkbox(
                                              value: project['selected'],
                                              onChanged: (value) {
                                                setState(() {
                                                  project['selected'] = value;
                                                });
                                              },
                                            ),
                                          ),
                                        ),
                                        _buildDataCell(project['projectName'] ?? '', 'ProjectName'),
                                        _buildDataCell(project['projectManager'] ?? '', 'ProjectManager'),
                                        _buildDataCell(project['projectBudget'] ?? '', 'ProjectBudget'),
                                        _buildDataCell(project['projectStartDate'] ?? '', 'ProjectStartDate'),
                                        _buildDataCell(project['projectEndDate'] ?? '', 'ProjectEndDate'),
                                        _buildDataCell(project['team'] ?? '', 'Team'),
                                        _buildDataCell(project['projectCategory'] ?? '', 'ProjectCategory'),
                                        _buildDataCell(project['division'] ?? '', 'Division'),
                                        _buildDataCell(project['unit'] ?? '', 'Unit'),
                                        _buildDataCell(
                                          project['projectStatus'] ?? '',
                                          'ProjectStatus',
                                          customContent: _buildStatusChip(project['projectStatus'] ?? ''),
                                        ),
                                      ],
                                    );
                                  }).toList(),
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                    // Pagination controls
                    if (_totalPages > 0) _buildPaginationControls(),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// New Project Page
class NewProjectPage extends StatefulWidget {
  @override
  _NewProjectPageState createState() => _NewProjectPageState();
}

class _NewProjectPageState extends State<NewProjectPage> {
  final _formKey = GlobalKey<FormState>();
  final Map<String, TextEditingController> _controllers = {};

  // Form field values
  String _selectedDivision = 'Information and Communications Technology';
  String _selectedUnit = 'Deputy Superintendent of Police Office';
  String _selectedProjectCategory = '';
  String _selectedTeam = '';
  String _selectedProjectStatus = 'Not started';

  List<Task> _tasks = [];
  List<Issue> _issues = [];
  int _selectedTabIndex = 0;

  @override
  void initState() {
    super.initState();
    // Initialize controllers for all form fields
    [
      'projectName',
      'projectManager',
      'projectDescription',
      'projectStartDate',
      'projectEndDate',
      'projectBudget'
    ].forEach((field) {
      _controllers[field] = TextEditingController();
    });

    // Set default budget
    _controllers['projectBudget']?.text = '\$0.00';
  }

  @override
  void dispose() {
    _controllers.values.forEach((controller) => controller.dispose());
    super.dispose();
  }

  void _saveProject() {
    if (_formKey.currentState!.validate()) {
      // Prepare the data to return
      Map<String, dynamic> formData = {
        'projectName': _controllers['projectName']!.text,
        'projectManager': _controllers['projectManager']!.text,
        'projectBudget': _controllers['projectBudget']!.text,
        'projectStartDate': _controllers['projectStartDate']!.text,
        'projectEndDate': _controllers['projectEndDate']!.text,
        'team': _selectedTeam,
        'projectCategory': _selectedProjectCategory,
        'division': _selectedDivision,
        'unit': _selectedUnit,
        'projectStatus': _selectedProjectStatus,
        'keepOpen': false,
      };

      // Add all controller values
      _controllers.forEach((key, controller) {
        formData[key] = controller.text;
      });

      Navigator.pop(context, formData);
    }
  }

  void _saveAndNew() {
    if (_formKey.currentState!.validate()) {
      // Prepare the data to return
      Map<String, dynamic> formData = {
        'projectName': _controllers['projectName']!.text,
        'projectManager': _controllers['projectManager']!.text,
        'projectBudget': _controllers['projectBudget']!.text,
        'projectStartDate': _controllers['projectStartDate']!.text,
        'projectEndDate': _controllers['projectEndDate']!.text,
        'team': _selectedTeam,
        'projectCategory': _selectedProjectCategory,
        'division': _selectedDivision,
        'unit': _selectedUnit,
        'projectStatus': _selectedProjectStatus,
        'keepOpen': true,
      };

      // Add all controller values
      _controllers.forEach((key, controller) {
        formData[key] = controller.text;
      });

      Navigator.pop(context, formData);
    }
  }

  void _deleteProject() {
    Navigator.pop(context, null);
  }

  void _markCompleted() {
    setState(() {
      _selectedProjectStatus = 'Completed';
    });
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Project marked as completed!')),
    );
  }

  Widget _buildDropdownField({
    required String label,
    required String value,
    required List<String> items,
    required Function(String?) onChanged,
    bool isRequired = false,
    bool hasAddButton = false,
  }) {
    return DropdownButtonFormField<String>(
      value: value.isEmpty ? null : value,
      decoration: InputDecoration(
        labelText: isRequired ? '$label*' : label,
        border: OutlineInputBorder(),
        contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
        suffixIcon: hasAddButton
            ? Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            IconButton(
              icon: Icon(Icons.add, size: 20, color: Colors.orange.shade700),
              onPressed: () {},
            ),
          ],
        )
            : null,
      ),
      items: items.map((item) => DropdownMenuItem(
        value: item,
        child: Text(item),
      )).toList(),
      onChanged: onChanged,
      validator: isRequired ? (value) {
        if (value == null || value.isEmpty) {
          return 'Please select a $label';
        }
        return null;
      } : null,
    );
  }

  Widget _buildDateField({
    required String label,
    required String controllerKey,
    bool isRequired = false,
  }) {
    return TextFormField(
      controller: _controllers[controllerKey],
      decoration: InputDecoration(
        labelText: isRequired ? '$label*' : label,
        border: OutlineInputBorder(),
        contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
        suffixIcon: Icon(Icons.calendar_today, size: 20),
      ),
      readOnly: true,
      onTap: () async {
        DateTime? picked = await showDatePicker(
          context: context,
          initialDate: DateTime.now(),
          firstDate: DateTime(2000),
          lastDate: DateTime(2100),
        );
        if (picked != null) {
          _controllers[controllerKey]?.text =
          '${picked.month}/${picked.day}/${picked.year}';
        }
      },
      validator: isRequired ? (value) {
        if (value == null || value.isEmpty) {
          return 'Please select a $label';
        }
        return null;
      } : null,
    );
  }

  Widget _buildTasksTab() {
    return Container(
      padding: EdgeInsets.all(16),
      child: Column(
        children: [

          // Action buttons
          Container(
            width: double.infinity,
            child: SingleChildScrollView(
              scrollDirection: Axis.horizontal,
              child: Row(
                children: [
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.add, size: 16),
                    label: Text('New'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.link, size: 16),
                    label: Text('Link'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.link_off, size: 16),
                    label: Text('Unlink'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.delete, size: 16, color: Colors.red),
                    label: Text('Delete'),
                    style: OutlinedButton.styleFrom(
                      foregroundColor: Colors.red,
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.check_circle, size: 16, color: Colors.green),
                    label: Text('Complete'),
                    style: OutlinedButton.styleFrom(
                      foregroundColor: Colors.green,
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  Container(
                    width: 180,
                    child: TextField(
                      decoration: InputDecoration(
                        isDense: true,
                        hintText: 'Search...',
                        prefixIcon: Icon(Icons.search, size: 16),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(4),
                          borderSide: BorderSide(color: Colors.grey.shade300),
                        ),
                        contentPadding: EdgeInsets.symmetric(vertical: 8, horizontal: 8),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
          SizedBox(height: 16),
          // Table
          Expanded(
            child: Container(
              decoration: BoxDecoration(
                border: Border.all(color: Colors.grey.shade300),
                borderRadius: BorderRadius.circular(4),
              ),
              child: Column(
                children: [
                  // Table header
                  Container(
                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 12),
                    decoration: BoxDecoration(
                      color: Colors.grey.shade100,
                      border: Border(bottom: BorderSide(color: Colors.grey.shade300)),
                    ),
                    child: SingleChildScrollView(
                      scrollDirection: Axis.horizontal,
                      child: Row(
                        children: [
                          Container(width: 40, child: Checkbox(value: false, onChanged: (_) {})),
                          SizedBox(width: 8),
                          _buildCompactTableHeader('Task Subject'),
                          _buildCompactTableHeader('Task Status'),
                          _buildCompactTableHeader('Assigned To'),
                          _buildCompactTableHeader('Task Start Date'),
                          _buildCompactTableHeader('Task End Date'),
                        ],
                      ),
                    ),
                  ),
                  // Table content
                  Expanded(
                    child: _tasks.isEmpty
                        ? Center(child: Text('No data to display', style: TextStyle(color: Colors.grey)))
                        : ListView.builder(
                      itemCount: _tasks.length,
                      itemBuilder: (context, index) {
                        return Container(
                          padding: EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                          decoration: BoxDecoration(
                            border: Border(bottom: BorderSide(color: Colors.grey.shade200)),
                          ),
                          child: Row(
                            children: [
                              Container(width: 40, child: Checkbox(value: false, onChanged: (_) {})),
                              Icon(Icons.add, size: 16, color: Colors.orange.shade700),
                              SizedBox(width: 16),
                              _buildTableCell(_tasks[index].subject, flex: 2),
                              _buildTableCell(_tasks[index].status),
                              _buildTableCell(_tasks[index].assignedTo),
                              _buildTableCell(_tasks[index].startDate),
                              _buildTableCell(_tasks[index].endDate),
                            ],
                          ),
                        );
                      },
                    ),
                  ),
                ],
              ),
            ),
          ),
          // Pagination
          Container(
            padding: EdgeInsets.symmetric(vertical: 16),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Container(
                  padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                  decoration: BoxDecoration(
                    color: Colors.orange.shade700,
                    borderRadius: BorderRadius.circular(4),
                  ),
                  child: Text('1', style: TextStyle(color: Colors.white, fontWeight: FontWeight.w600)),
                ),
                Row(
                  children: [
                    Text('Page Size: '),
                    DropdownButton<int>(
                      value: 20,
                      items: [10, 20, 50, 100].map((size) => DropdownMenuItem(
                        value: size,
                        child: Text(size.toString()),
                      )).toList(),
                      onChanged: (value) {},
                      underline: Container(),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildIssuesLogTab() {
    return Container(
      padding: EdgeInsets.all(16),
      child: Column(
        children: [
          // Action buttons
          Container(
            width: double.infinity,
            child: SingleChildScrollView(
              scrollDirection: Axis.horizontal,
              child: Row(
                children: [
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.add, size: 16),
                    label: Text('New'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.link, size: 16),
                    label: Text('Link'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.link_off, size: 16),
                    label: Text('Unlink'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.delete, size: 16, color: Colors.red),
                    label: Text('Delete'),
                    style: OutlinedButton.styleFrom(
                      foregroundColor: Colors.red,
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  Container(
                    width: 180,
                    child: TextField(
                      decoration: InputDecoration(
                        isDense: true,
                        hintText: 'Search...',
                        prefixIcon: Icon(Icons.search, size: 16),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(4),
                          borderSide: BorderSide(color: Colors.grey.shade300),
                        ),
                        contentPadding: EdgeInsets.symmetric(vertical: 8, horizontal: 8),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
          SizedBox(height: 16),
          // Issues table with many columns
          Expanded(
            child: Container(
              decoration: BoxDecoration(
                border: Border.all(color: Colors.grey.shade300),
                borderRadius: BorderRadius.circular(4),
              ),
              child: Column(
                children: [
                  // Table header
                  Container(
                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 12),
                    decoration: BoxDecoration(
                      color: Colors.grey.shade100,
                      border: Border(bottom: BorderSide(color: Colors.grey.shade300)),
                    ),
                    child: SingleChildScrollView(
                      scrollDirection: Axis.horizontal,
                      child: Row(
                        children: [
                          Container(width: 40, child: Checkbox(value: false, onChanged: (_) {})),
                          SizedBox(width: 8),
                          _buildCompactTableHeader('Description Of Issue'),
                          _buildCompactTableHeader('Topic'),
                          _buildCompactTableHeader('Date Report To ICTD'),
                          _buildCompactTableHeader('Person Assigned'),
                          _buildCompactTableHeader('Person Report Issue'),
                          _buildCompactTableHeader('OSTicket NO'),
                          _buildCompactTableHeader('Report Area'),
                          _buildCompactTableHeader('Report Division'),
                          _buildCompactTableHeader('Date Report To Respon Entity'),
                          _buildCompactTableHeader('Date Assigned To Respon Entity'),
                          _buildCompactTableHeader('Issue Closure Date'),
                          _buildCompactTableHeader('Issue Status'),
                          _buildCompactTableHeader('Aging For Issue ICTD'),
                          _buildCompactTableHeader('Aging For Issue Respon Entity'),
                        ],
                      ),
                    ),
                  ),
                  // Table content
                  Expanded(
                    child: Center(
                      child: Text('No data to display', style: TextStyle(color: Colors.grey)),
                    ),
                  ),
                ],
              ),
            ),
          ),
          // Pagination
          Container(
            padding: EdgeInsets.symmetric(vertical: 16),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Container(
                  padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                  decoration: BoxDecoration(
                    color: Colors.orange.shade700,
                    borderRadius: BorderRadius.circular(4),
                  ),
                  child: Text('1', style: TextStyle(color: Colors.white, fontWeight: FontWeight.w600)),
                ),
                Row(
                  children: [
                    Text('Page Size: '),
                    DropdownButton<int>(
                      value: 20,
                      items: [10, 20, 50, 100].map((size) => DropdownMenuItem(
                        value: size,
                        child: Text(size.toString()),
                      )).toList(),
                      onChanged: (value) {},
                      underline: Container(),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildTableHeader(String title, {int flex = 1}) {
    return Expanded(
      flex: flex,
      child: Row(
        children: [
          Text(
            title,
            style: TextStyle(fontWeight: FontWeight.w600, fontSize: 12),
          ),
          Icon(Icons.filter_list, size: 12, color: Colors.grey),
        ],
      ),
    );
  }

  Widget _buildCompactTableHeader(String title) {
    return Container(
      width: 120,
      padding: EdgeInsets.symmetric(horizontal: 4),
      child: Row(
        children: [
          Expanded(
            child: Text(
              title,
              style: TextStyle(fontWeight: FontWeight.w600, fontSize: 10),
              overflow: TextOverflow.ellipsis,
            ),
          ),
          Icon(Icons.filter_list, size: 10, color: Colors.grey),
        ],
      ),
    );
  }

  Widget _buildTableCell(String text, {int flex = 1}) {
    return Expanded(
      flex: flex,
      child: Text(
        text.isEmpty ? '-' : text,
        style: TextStyle(fontSize: 12),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Project Planning'),
        backgroundColor: Colors.white,
        foregroundColor: Colors.black,
        elevation: 0,
        leading: IconButton(
          onPressed: () => Navigator.pop(context),
          icon: Icon(Icons.arrow_back),
        ),
        actions: [
          IconButton(
            onPressed: () => Navigator.pop(context),
            icon: Icon(Icons.arrow_back),
          ),
          IconButton(
            onPressed: () => Navigator.pop(context),
            icon: Icon(Icons.arrow_forward),
          ),
          IconButton(
            onPressed: () {},
            icon: Icon(Icons.refresh),
          ),
        ],
      ),
      body: Container(
        color: Colors.grey.shade50,
        child: Column(
          children: [
            // Action buttons - Made responsive
            Container(
              width: double.infinity,
              padding: EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.white,
                border: Border(bottom: BorderSide(color: Colors.grey.shade300)),
              ),
              child: LayoutBuilder(
                builder: (context, constraints) {
                  // Check if screen is small
                  bool isSmallScreen = constraints.maxWidth < 600;

                  if (isSmallScreen) {
                    // Stack buttons vertically on small screens
                    return Column(
                      children: [
                        Row(
                          children: [
                            Expanded(
                              child: OutlinedButton.icon(
                                onPressed: _deleteProject,
                                icon: Icon(Icons.delete, color: Colors.red, size: 18),
                                label: Text('Delete', style: TextStyle(fontSize: 12)),
                                style: OutlinedButton.styleFrom(
                                  foregroundColor: Colors.red,
                                  side: BorderSide(color: Colors.grey.shade300),
                                  padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                ),
                              ),
                            ),
                            SizedBox(width: 6),
                            Expanded(
                              child: OutlinedButton.icon(
                                onPressed: _markCompleted,
                                icon: Icon(Icons.check, color: Colors.green, size: 18),
                                label: Text('Complete', style: TextStyle(fontSize: 12)),
                                style: OutlinedButton.styleFrom(
                                  foregroundColor: Colors.green,
                                  side: BorderSide(color: Colors.grey.shade300),
                                  padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                ),
                              ),
                            ),
                          ],
                        ),
                        SizedBox(height: 6),
                        Row(
                          children: [
                            Expanded(
                              child: OutlinedButton.icon(
                                onPressed: _saveAndNew,
                                icon: Icon(Icons.save, color: Colors.orange.shade700, size: 18),
                                label: Text('Save & New', style: TextStyle(fontSize: 12)),
                                style: OutlinedButton.styleFrom(
                                  foregroundColor: Colors.orange.shade700,
                                  side: BorderSide(color: Colors.orange.shade700),
                                  padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                ),
                              ),
                            ),
                            SizedBox(width: 6),
                            Expanded(
                              child: ElevatedButton.icon(
                                onPressed: _saveProject,
                                icon: Icon(Icons.save, color: Colors.white, size: 18),
                                label: Text('Save', style: TextStyle(fontSize: 12)),
                                style: ElevatedButton.styleFrom(
                                  backgroundColor: Colors.orange.shade700,
                                  foregroundColor: Colors.white,
                                  padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                ),
                              ),
                            ),
                          ],
                        ),
                      ],
                    );
                  } else {
                    // Original horizontal layout for larger screens
                    return Row(
                      children: [
                        OutlinedButton.icon(
                          onPressed: _deleteProject,
                          icon: Icon(Icons.delete, color: Colors.red, size: 20),
                          label: Text('Delete'),
                          style: OutlinedButton.styleFrom(
                            foregroundColor: Colors.red,
                            side: BorderSide(color: Colors.grey.shade300),
                          ),
                        ),
                        SizedBox(width: 8),
                        OutlinedButton.icon(
                          onPressed: _markCompleted,
                          icon: Icon(Icons.check, color: Colors.green, size: 20),
                          label: Text('Completed'),
                          style: OutlinedButton.styleFrom(
                            foregroundColor: Colors.green,
                            side: BorderSide(color: Colors.grey.shade300),
                          ),
                        ),
                        Spacer(),
                        OutlinedButton.icon(
                          onPressed: _saveAndNew,
                          icon: Icon(Icons.save, color: Colors.orange.shade700, size: 20),
                          label: Text('Save and New'),
                          style: OutlinedButton.styleFrom(
                            foregroundColor: Colors.orange.shade700,
                            side: BorderSide(color: Colors.orange.shade700),
                          ),
                        ),
                        SizedBox(width: 8),
                        ElevatedButton.icon(
                          onPressed: _saveProject,
                          icon: Icon(Icons.save, color: Colors.white, size: 20),
                          label: Text('Save'),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.orange.shade700,
                            foregroundColor: Colors.white,
                          ),
                        ),
                      ],
                    );
                  }
                },
              ),
            ),

            // Form content
            Expanded(
              child: SingleChildScrollView(
                padding: EdgeInsets.all(12),
                child: Form(
                  key: _formKey,
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Project Planning',
                        style: TextStyle(
                          fontSize: 24,
                          fontWeight: FontWeight.bold,
                          color: Colors.black87,
                        ),
                      ),
                      SizedBox(height: 20),

                      // Project Information Section
                      Container(
                        width: double.infinity,
                        padding: EdgeInsets.all(12),
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.circular(8),
                          border: Border.all(color: Colors.grey.shade300),
                        ),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            // Project Name and Project Manager - Made responsive
                            LayoutBuilder(
                              builder: (context, constraints) {
                                bool isSmallScreen = constraints.maxWidth < 600;

                                if (isSmallScreen) {
                                  return Column(
                                    children: [
                                      TextFormField(
                                        controller: _controllers['projectName'],
                                        decoration: InputDecoration(
                                          labelText: 'Project Name*',
                                          border: OutlineInputBorder(),
                                          contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 12),
                                        ),
                                        validator: (value) {
                                          if (value == null || value.isEmpty) {
                                            return 'Please enter project name';
                                          }
                                          return null;
                                        },
                                      ),
                                      SizedBox(height: 12),
                                      TextFormField(
                                        controller: _controllers['projectManager'],
                                        decoration: InputDecoration(
                                          labelText: 'Project Manager*',
                                          border: OutlineInputBorder(),
                                          contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 12),
                                        ),
                                        validator: (value) {
                                          if (value == null || value.isEmpty) {
                                            return 'Please enter project manager';
                                          }
                                          return null;
                                        },
                                      ),
                                    ],
                                  );
                                } else {
                                  return Row(
                                    children: [
                                      Expanded(
                                        child: TextFormField(
                                          controller: _controllers['projectName'],
                                          decoration: InputDecoration(
                                            labelText: 'Project Name*',
                                            border: OutlineInputBorder(),
                                            contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
                                          ),
                                          validator: (value) {
                                            if (value == null || value.isEmpty) {
                                              return 'Please enter project name';
                                            }
                                            return null;
                                          },
                                        ),
                                      ),
                                      SizedBox(width: 16),
                                      Expanded(
                                        child: TextFormField(
                                          controller: _controllers['projectManager'],
                                          decoration: InputDecoration(
                                            labelText: 'Project Manager*',
                                            border: OutlineInputBorder(),
                                            contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
                                          ),
                                          validator: (value) {
                                            if (value == null || value.isEmpty) {
                                              return 'Please enter project manager';
                                            }
                                            return null;
                                          },
                                        ),
                                      ),
                                    ],
                                  );
                                }
                              },
                            ),
                            SizedBox(height: 12),

                            // Project Description
                            TextFormField(
                              controller: _controllers['projectDescription'],
                              decoration: InputDecoration(
                                labelText: 'Project Description*',
                                border: OutlineInputBorder(),
                                contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 12),
                              ),
                              maxLines: 3,
                              validator: (value) {
                                if (value == null || value.isEmpty) {
                                  return 'Please enter project description';
                                }
                                return null;
                              },
                            ),
                            SizedBox(height: 12),

                            // Project Start Date and Project End Date - Made responsive
                            LayoutBuilder(
                              builder: (context, constraints) {
                                bool isSmallScreen = constraints.maxWidth < 600;

                                if (isSmallScreen) {
                                  return Column(
                                    children: [
                                      _buildDateField(
                                        label: 'Project Start Date',
                                        controllerKey: 'projectStartDate',
                                        isRequired: true,
                                      ),
                                      SizedBox(height: 12),
                                      _buildDateField(
                                        label: 'Project End Date',
                                        controllerKey: 'projectEndDate',
                                        isRequired: true,
                                      ),
                                    ],
                                  );
                                } else {
                                  return Row(
                                    children: [
                                      Expanded(
                                        child: _buildDateField(
                                          label: 'Project Start Date',
                                          controllerKey: 'projectStartDate',
                                          isRequired: true,
                                        ),
                                      ),
                                      SizedBox(width: 16),
                                      Expanded(
                                        child: _buildDateField(
                                          label: 'Project End Date',
                                          controllerKey: 'projectEndDate',
                                          isRequired: true,
                                        ),
                                      ),
                                    ],
                                  );
                                }
                              },
                            ),
                            SizedBox(height: 12),

                            // Project Budget
                            TextFormField(
                              controller: _controllers['projectBudget'],
                              decoration: InputDecoration(
                                labelText: 'Project Budget',
                                border: OutlineInputBorder(),
                                contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 12),
                                suffixIcon: Icon(Icons.keyboard_arrow_up_outlined),
                              ),
                              keyboardType: TextInputType.number,
                            ),
                            SizedBox(height: 12),

                            // Division and Unit - Made responsive
                            LayoutBuilder(
                              builder: (context, constraints) {
                                bool isSmallScreen = constraints.maxWidth < 600;

                                if (isSmallScreen) {
                                  return Column(
                                    children: [
                                      _buildDropdownField(
                                        label: 'Division',
                                        value: _selectedDivision,
                                        items: [
                                          'Information and Communications Technology',
                                          'NA',
                                          'Technology Branch',
                                          'Telecommunications'
                                        ],
                                        onChanged: (value) {
                                          setState(() {
                                            _selectedDivision = value ?? '';
                                          });
                                        },
                                        hasAddButton: true,
                                      ),
                                      SizedBox(height: 12),
                                      _buildDropdownField(
                                        label: 'Unit',
                                        value: _selectedUnit,
                                        items: [
                                          'Data and Quality',
                                          'Deputy Superintendent of Police Office',
                                          'Director Office'
                                        ],
                                        onChanged: (value) {
                                          setState(() {
                                            _selectedUnit = value ?? '';
                                          });
                                        },
                                        hasAddButton: true,
                                      ),
                                    ],
                                  );
                                } else {
                                  return Row(
                                    children: [
                                      Expanded(
                                        child: _buildDropdownField(
                                          label: 'Division',
                                          value: _selectedDivision,
                                          items: [
                                            'Information and Communications Technology',
                                            'NA',
                                            'Technology Branch',
                                            'Telecommunications'
                                          ],
                                          onChanged: (value) {
                                            setState(() {
                                              _selectedDivision = value ?? '';
                                            });
                                          },
                                          hasAddButton: true,
                                        ),
                                      ),
                                      SizedBox(width: 16),
                                      Expanded(
                                        child: _buildDropdownField(
                                          label: 'Unit',
                                          value: _selectedUnit,
                                          items: [
                                            'Data and Quality',
                                            'Deputy Superintendent of Police Office',
                                            'Director Office'
                                          ],
                                          onChanged: (value) {
                                            setState(() {
                                              _selectedUnit = value ?? '';
                                            });
                                          },
                                          hasAddButton: true,
                                        ),
                                      ),
                                    ],
                                  );
                                }
                              },
                            ),
                            SizedBox(height: 12),

                            // Project Category and Team - Made responsive
                            LayoutBuilder(
                              builder: (context, constraints) {
                                bool isSmallScreen = constraints.maxWidth < 600;

                                if (isSmallScreen) {
                                  return Column(
                                    children: [
                                      _buildDropdownField(
                                        label: 'Project Category',
                                        value: _selectedProjectCategory,
                                        items: ['Area Wide', 'Branch Wide', 'Division Wide'],
                                        onChanged: (value) {
                                          setState(() {
                                            _selectedProjectCategory = value ?? '';
                                          });
                                        },
                                        hasAddButton: true,
                                      ),
                                      SizedBox(height: 12),
                                      _buildDropdownField(
                                        label: 'Team',
                                        value: _selectedTeam,
                                        items: ['Development Team', 'Inventory Team', 'Technical Team'],
                                        onChanged: (value) {
                                          setState(() {
                                            _selectedTeam = value ?? '';
                                          });
                                        },
                                        hasAddButton: true,
                                      ),
                                    ],
                                  );
                                } else {
                                  return Row(
                                    children: [
                                      Expanded(
                                        child: _buildDropdownField(
                                          label: 'Project Category',
                                          value: _selectedProjectCategory,
                                          items: ['Area Wide', 'Branch Wide', 'Division Wide'],
                                          onChanged: (value) {
                                            setState(() {
                                              _selectedProjectCategory = value ?? '';
                                            });
                                          },
                                          hasAddButton: true,
                                        ),
                                      ),
                                      SizedBox(width: 16),
                                      Expanded(
                                        child: _buildDropdownField(
                                          label: 'Team',
                                          value: _selectedTeam,
                                          items: ['Development Team', 'Inventory Team', 'Technical Team'],
                                          onChanged: (value) {
                                            setState(() {
                                              _selectedTeam = value ?? '';
                                            });
                                          },
                                          hasAddButton: true,
                                        ),
                                      ),
                                    ],
                                  );
                                }
                              },
                            ),
                            SizedBox(height: 12),

                            // Project Status
                            _buildDropdownField(
                              label: 'Project Status',
                              value: _selectedProjectStatus,
                              items: ['Not started', 'In Progress', 'Completed', 'Deferred'],
                              onChanged: (value) {
                                setState(() {
                                  _selectedProjectStatus = value ?? '';
                                });
                              },
                            ),
                          ],
                        ),
                      ),
                      SizedBox(height: 20),

                      // Tabs Section
                      Container(
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.circular(8),
                          border: Border.all(color: Colors.grey.shade300),
                        ),
                        child: Column(
                          children: [
                            // Tab headers
                            Container(
                              decoration: BoxDecoration(
                                border: Border(bottom: BorderSide(color: Colors.grey.shade300)),
                              ),
                              child: Row(
                                children: [
                                  GestureDetector(
                                    onTap: () => setState(() => _selectedTabIndex = 0),
                                    child: Container(
                                      padding: EdgeInsets.symmetric(horizontal: 20, vertical: 12),
                                      decoration: BoxDecoration(
                                        color: _selectedTabIndex == 0 ? Colors.orange.shade700 : Colors.transparent,
                                        borderRadius: BorderRadius.only(
                                          topLeft: Radius.circular(8),
                                        ),
                                      ),
                                      child: Row(
                                        children: [
                                          Icon(
                                            Icons.task_alt,
                                            size: 16,
                                            color: _selectedTabIndex == 0 ? Colors.white : Colors.orange.shade700,
                                          ),
                                          SizedBox(width: 8),
                                          Text(
                                            'Tasks',
                                            style: TextStyle(
                                              color: _selectedTabIndex == 0 ? Colors.white : Colors.black87,
                                              fontWeight: FontWeight.w500,
                                            ),
                                          ),
                                        ],
                                      ),
                                    ),
                                  ),
                                  GestureDetector(
                                    onTap: () => setState(() => _selectedTabIndex = 1),
                                    child: Container(
                                      padding: EdgeInsets.symmetric(horizontal: 20, vertical: 12),
                                      decoration: BoxDecoration(
                                        color: _selectedTabIndex == 1 ? Colors.orange.shade700 : Colors.transparent,
                                      ),
                                      child: Row(
                                        children: [
                                          Icon(
                                            Icons.bug_report,
                                            size: 16,
                                            color: _selectedTabIndex == 1 ? Colors.white : Colors.orange.shade700,
                                          ),
                                          SizedBox(width: 8),
                                          Text(
                                            'Issues Logs',
                                            style: TextStyle(
                                              color: _selectedTabIndex == 1 ? Colors.white : Colors.black87,
                                              fontWeight: FontWeight.w500,
                                            ),
                                          ),
                                        ],
                                      ),
                                    ),
                                  ),
                                ],
                              ),
                            ),
                            // Tab content
                            Container(
                              height: 400,
                              child: _selectedTabIndex == 0 ? _buildTasksTab() : _buildIssuesLogTab(),
                            ),
                          ],
                        ),
                      ),
                      SizedBox(height: 32),
                    ],
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// Model classes
class Task {
  final String subject;
  final String status;
  final String assignedTo;
  final String startDate;
  final String endDate;

  Task({
    required this.subject,
    required this.status,
    required this.assignedTo,
    required this.startDate,
    required this.endDate,
  });
}

class Issue {
  final String description;
  final String topic;
  final String dateReportToICTD;
  final String personAssigned;
  final String personReportIssue;
  final String osTicketNo;
  final String reportArea;
  final String reportDivision;
  final String dateReportToResponEntity;
  final String dateAssignedToResponEntity;
  final String issueClosureDate;
  final String issueStatus;
  final String agingForIssueICTD;
  final String agingForIssueResponEntity;

  Issue({
    required this.description,
    required this.topic,
    required this.dateReportToICTD,
    required this.personAssigned,
    required this.personReportIssue,
    required this.osTicketNo,
    required this.reportArea,
    required this.reportDivision,
    required this.dateReportToResponEntity,
    required this.dateAssignedToResponEntity,
    required this.issueClosureDate,
    required this.issueStatus,
    required this.agingForIssueICTD,
    required this.agingForIssueResponEntity,
  });
}

//Project Task Page
class ProjectTaskPage extends StatefulWidget {
  @override
  _ProjectTaskPageState createState() => _ProjectTaskPageState();
}

class _ProjectTaskPageState extends State<ProjectTaskPage> {
  final ScrollController _horizontalScrollController = ScrollController();
  final TextEditingController _searchController = TextEditingController();

  // Column widths - can be adjusted
  Map<String, double> columnWidths = {
    'Checkbox': 60,
    'TaskSubject': 500,
    'TaskStatus': 120,
    'AssignedTo': 220,
    'TaskStartDate': 150,
    'TaskEndDate': 150,
    'ProjectName': 300,
  };

  // Map column keys to data field names
  Map<String, String> columnToDataField = {
    'TaskSubject': 'taskSubject',
    'TaskStatus': 'taskStatus',
    'AssignedTo': 'assignedTo',
    'TaskStartDate': 'taskStartDate',
    'TaskEndDate': 'taskEndDate',
    'ProjectName': 'projectName',
  };

  // Sorting state
  String _sortColumn = '';
  bool _sortAscending = true;

  // Pagination state
  int _currentPage = 1;
  int _pageSize = 20;
  final List<int> _pageSizeOptions = [10, 20, 50, 100];

  // Sample data structure
  List<Map<String, dynamic>> _projectTasks = [
    {
      'selected': false,
      'taskSubject': 'User Manual for the Profile and Charge Management System',
      'taskStatus': 'In progress',
      'assignedTo': 'matthieu-rhys.brown',
      'taskStartDate': '6/2/2025',
      'taskEndDate': '6/30/2025',
      'projectName': 'Profile and Charge Management System (PCMS)',
    },
  ];

  bool _selectAll = false;

  @override
  void dispose() {
    _horizontalScrollController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  List<Map<String, dynamic>> get _filteredData {
    var filtered = _projectTasks;

    // Apply search filter
    if (_searchController.text.isNotEmpty) {
      filtered = filtered.where((project) {
        return project.values.any((value) =>
            value.toString().toLowerCase().contains(_searchController.text.toLowerCase()));
      }).toList();
    }

    // Apply sorting
    if (_sortColumn.isNotEmpty) {
      String dataField = columnToDataField[_sortColumn] ?? _sortColumn;
      filtered.sort((a, b) {
        var aValue = a[dataField] ?? '';
        var bValue = b[dataField] ?? '';

        int comparison = aValue.toString().compareTo(bValue.toString());
        return _sortAscending ? comparison : -comparison;
      });
    }

    return filtered;
  }

  List<Map<String, dynamic>> get _paginatedData {
    var filtered = _filteredData;
    int startIndex = (_currentPage - 1) * _pageSize;
    int endIndex = startIndex + _pageSize;

    if (startIndex >= filtered.length) return [];
    if (endIndex > filtered.length) endIndex = filtered.length;

    return filtered.sublist(startIndex, endIndex);
  }

  int get _totalPages {
    return (_filteredData.length / _pageSize).ceil();
  }

  void _navigateToNewTaskPage() async {
    final result = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => NewTaskPage(),
      ),
    );

    if (result != null) {
      setState(() {
        _projectTasks.add({
          'selected': false,
          'taskSubject': result['taskSubject'],
          'taskStatus': result['taskStatus'],
          'assignedTo': result['assignedTo'],
          'taskStartDate': result['taskStartDate'],
          'taskEndDate': result['taskEndDate'],
        });
      });

      // If keepOpen flag is set, reopen the page
      if (result['keepOpen'] == true) {
        _navigateToNewTaskPage();
      }
    }
  }

  void _refreshData() {
    setState(() {
      // Unselect all checkboxes
      for (var project in _projectTasks) {
        project['selected'] = false;
      }
      _selectAll = false;
      // add actual data refresh logic here
    });
  }

  void _toggleSelectAll() {
    setState(() {
      _selectAll = !_selectAll;
      for (var project in _paginatedData) {
        project['selected'] = _selectAll;
      }
    });
  }

  void _deleteSelected() {
    setState(() {
      _projectTasks.removeWhere((project) => project['selected'] == true);
      _selectAll = false;
      // Adjust current page if needed
      if (_currentPage > _totalPages && _totalPages > 0) {
        _currentPage = _totalPages;
      }
    });
  }

  void _markCompleted() {
    setState(() {
      for (var project in _projectTasks) {
        if (project['selected'] == true) {
          project['taskStatus'] = 'Completed';
          project['selected'] = false;
        }
      }
      _selectAll = false;
    });
  }

  void _exportData() {
    // Add export functionality here
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Export functionality would be implemented here')),
    );
  }

  void _showFilterDialog(String columnKey) {
    // Add filter dialog functionality here
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Filter ${columnKey}'),
        content: Text('Filter functionality would be implemented here'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Close'),
          ),
        ],
      ),
    );
  }

  void _sortData(String columnKey) {
    setState(() {
      if (_sortColumn == columnKey) {
        _sortAscending = !_sortAscending;
      } else {
        _sortColumn = columnKey;
        _sortAscending = true;
      }
    });
  }

  bool _hasSelectedItems() {
    return _projectTasks.any((project) => project['selected'] == true);
  }

  bool _hasSelectedIncompleteItems() {
    return _projectTasks.any((project) =>
    project['selected'] == true &&
        project['projectStatus']?.toLowerCase() != 'completed');
  }

  Widget _buildResizableColumn({
    required String title,
    required String columnKey,
    required bool isLast,
    Widget? customContent,
  }) {
    return Container(
      width: columnWidths[columnKey],
      child: Row(
        children: [
          Expanded(
            child: Container(
              height: 40, // Fixed height for consistent checkbox alignment
              padding: EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.grey.shade200,
                border: Border(
                  right: BorderSide(color: Colors.grey.shade400),
                  bottom: BorderSide(color: Colors.grey.shade400),
                ),
              ),
              child: customContent ??
                  Row(
                    children: [
                      Expanded(
                        child: Text(
                          title,
                          style: TextStyle(fontWeight: FontWeight.bold, fontSize: 12),
                          overflow: TextOverflow.ellipsis,
                        ),
                      ),
                      if (columnKey == 'TaskSubject') ...[
                        GestureDetector(
                          onTap: () => _sortData(columnKey),
                          child: Icon(
                            _sortColumn == columnKey
                                ? (_sortAscending ? Icons.arrow_upward : Icons.arrow_downward)
                                : Icons.unfold_more,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                        ),
                        SizedBox(width: 4),
                      ],
                      if (columnKey != 'Checkbox')
                        GestureDetector(
                          onTap: () => _showFilterDialog(columnKey),
                          child: Icon(
                            Icons.filter_alt_outlined,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                        ),
                    ],
                  ),
            ),
          ),
          if (!isLast)
            GestureDetector(
              onPanUpdate: (details) {
                setState(() {
                  columnWidths[columnKey] =
                      (columnWidths[columnKey]! + details.delta.dx).clamp(60.0, 400.0);
                });
              },
              child: Container(
                width: 4,
                height: 40,
                color: Colors.grey.shade400,
                child: MouseRegion(
                  cursor: SystemMouseCursors.resizeColumn,
                  child: Container(),
                ),
              ),
            ),
        ],
      ),
    );
  }

  Widget _buildDataCell(dynamic data, String columnKey, {Widget? customContent}) {
    return Container(
      width: columnWidths[columnKey],
      height: 40, // Fixed height for consistent alignment
      padding: EdgeInsets.all(8),
      decoration: BoxDecoration(
        border: Border(
          right: BorderSide(color: Colors.grey.shade400),
          bottom: BorderSide(color: Colors.grey.shade400),
        ),
      ),
      child: Align(
        alignment: Alignment.centerLeft,
        child: customContent ??
            Text(
              data.toString(),
              style: TextStyle(fontSize: 12),
              overflow: TextOverflow.ellipsis,
            ),
      ),
    );
  }

  Color _getStatusColor(String status) {
    switch (status.toLowerCase()) {
      case 'completed':
        return Colors.green;
      case 'not started':
        return Colors.orange;
      case 'deferred':
        return Colors.purple;
      case 'in progress':
        return Colors.blue;
      default:
        return Colors.grey;
    }
  }

  Widget _buildStatusChip(String status) {
    return Container(
      padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      decoration: BoxDecoration(
        color: _getStatusColor(status).withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: _getStatusColor(status)),
      ),
      child: Text(
        status,
        style: TextStyle(
          color: _getStatusColor(status),
          fontSize: 10,
          fontWeight: FontWeight.w500,
        ),
      ),
    );
  }

  Widget _buildPaginationControls() {
    return Container(
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        border: Border(
          top: BorderSide(color: Colors.grey.shade300, width: 1),
        ),
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          // Page numbers
          Row(
            children: [
              for (int i = 1; i <= _totalPages && i <= 4; i++)
                GestureDetector(
                  onTap: () {
                    setState(() {
                      _currentPage = i;
                    });
                  },
                  child: Container(
                    margin: EdgeInsets.symmetric(horizontal: 4),
                    padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                    decoration: BoxDecoration(
                      color: _currentPage == i ? Colors.orange.shade700 : Colors.transparent,
                      borderRadius: BorderRadius.circular(4),
                    ),
                    child: Text(
                      i.toString(),
                      style: TextStyle(
                        color: _currentPage == i ? Colors.white : Colors.black,
                        fontWeight: _currentPage == i ? FontWeight.bold : FontWeight.normal,
                      ),
                    ),
                  ),
                ),
            ],
          ),
          // Page size selector
          Row(
            children: [
              Text('Page Size: ', style: TextStyle(fontSize: 14)),
              DropdownButton<int>(
                value: _pageSize,
                items: _pageSizeOptions.map((size) {
                  return DropdownMenuItem<int>(
                    value: size,
                    child: Text(size.toString()),
                  );
                }).toList(),
                onChanged: (value) {
                  setState(() {
                    _pageSize = value!;
                    _currentPage = 1; // Reset to first page
                  });
                },
              ),
            ],
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        color: Colors.grey.shade50,
        child: Column(
          children: [
            // Header with buttons and search
            Container(
              width: double.infinity, // Full width
              padding: EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.white,
                border: Border(
                  bottom: BorderSide(color: Colors.grey.shade300, width: 1),
                ),
              ),
              child: LayoutBuilder(
                builder: (context, constraints) {
                  final isSmallScreen = constraints.maxWidth < 600;
                  final buttonStyle = OutlinedButton.styleFrom(
                    padding: isSmallScreen
                        ? EdgeInsets.symmetric(horizontal: 6, vertical: 4)
                        : EdgeInsets.symmetric(horizontal: 8, vertical: 6),
                    textStyle: TextStyle(
                      fontSize: isSmallScreen ? 12 : 14,
                    ),
                    minimumSize: Size(0, isSmallScreen ? 30 : 36),
                    side: BorderSide(color: Colors.grey.shade300),
                  );

                  return SingleChildScrollView(
                    scrollDirection: Axis.horizontal,
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.start, // Left-aligned content
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        // New Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _navigateToNewTaskPage,
                            icon: Icon(Icons.add, color: Colors.orange.shade700, size: 20),
                            padding: EdgeInsets.all(4),
                            tooltip: 'New',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _navigateToNewTaskPage,
                            icon: Icon(Icons.add, color: Colors.orange.shade700, size: 20),
                            label: Text('New'),
                            style: buttonStyle.copyWith(
                              backgroundColor: MaterialStateProperty.all(Colors.white),
                              foregroundColor: MaterialStateProperty.all(Colors.black),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Delete Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _hasSelectedItems() ? _deleteSelected : null,
                            icon: Icon(Icons.delete,
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                                size: 20
                            ),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Delete',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _hasSelectedItems() ? _deleteSelected : null,
                            icon: Icon(Icons.delete,
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                                size: 20
                            ),
                            label: Text(
                              'Delete',
                              style: TextStyle(
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                              ),
                            ),
                            style: buttonStyle.copyWith(
                              foregroundColor: MaterialStateProperty.all(
                                _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                              ),
                              side: MaterialStateProperty.all(
                                BorderSide(color: Colors.grey.shade300),
                              ),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Mark Complete
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _hasSelectedIncompleteItems() ? _markCompleted : null,
                            icon: Icon(Icons.check_circle,
                                color: _hasSelectedIncompleteItems() ? Colors.green.shade600 : Colors.grey.shade400,
                                size: 20
                            ),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Completed',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _hasSelectedIncompleteItems() ? _markCompleted : null,
                            icon: Icon(Icons.check_circle,
                                color: _hasSelectedIncompleteItems() ? Colors.green.shade600 : Colors.grey.shade400,
                                size: 20
                            ),
                            label: Text(
                              'Completed',
                              style: TextStyle(
                                color: _hasSelectedIncompleteItems() ? Colors.green.shade600 : Colors.grey.shade400,
                              ),
                            ),
                            style: buttonStyle.copyWith(
                              foregroundColor: MaterialStateProperty.all(
                                _hasSelectedIncompleteItems() ? Colors.green.shade600 : Colors.grey.shade400,
                              ),
                              side: MaterialStateProperty.all(
                                BorderSide(color: Colors.grey.shade300),
                              ),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Search Field
                        Container(
                          width: isSmallScreen ? 180 : 300,
                          child: TextField(
                            controller: _searchController,
                            onChanged: (value) {
                              setState(() {
                                _currentPage = 1;
                              });
                            },
                            decoration: InputDecoration(
                              isDense: true,
                              hintText: 'Search...',
                              suffixIcon: Icon(Icons.search, color: Colors.orange.shade700),
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(4),
                              ),
                              contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                            ),
                          ),
                        ),

                        SizedBox(width: 12),

                        // Export Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _exportData,
                            icon: Icon(Icons.download, color: Colors.orange.shade700, size: 20),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Export',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _exportData,
                            icon: Icon(Icons.download, color: Colors.orange.shade700, size: 20),
                            label: Text('Export'),
                            style: buttonStyle.copyWith(
                              backgroundColor: MaterialStateProperty.all(Colors.white),
                              foregroundColor: MaterialStateProperty.all(Colors.black),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Refresh Button
                        IconButton(
                          onPressed: _refreshData,
                          icon: Icon(Icons.refresh, color: Colors.orange.shade700, size: 20),
                          padding: EdgeInsets.all(4),
                          tooltip: 'Refresh',
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),

            // Table area
            Expanded(
              child: Container(
                margin: EdgeInsets.all(16),
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.grey.shade300),
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(4),
                ),
                child: Column(
                  children: [
                    // Table with synchronized scrolling
                    Expanded(
                      child: _paginatedData.isEmpty
                          ? Center(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(
                              Icons.folder_open,
                              size: 64,
                              color: Colors.grey.shade400,
                            ),
                            SizedBox(height: 16),
                            Text(
                              'No tasks found',
                              style: TextStyle(
                                fontSize: 18,
                                color: Colors.grey.shade600,
                              ),
                            ),
                            SizedBox(height: 8),
                            Text(
                              'Click "New" to add your first task',
                              style: TextStyle(
                                fontSize: 14,
                                color: Colors.grey.shade500,
                              ),
                            ),
                          ],
                        ),
                      )
                          : SingleChildScrollView(
                        controller: _horizontalScrollController,
                        scrollDirection: Axis.horizontal,
                        child: Column(
                          children: [
                            // Table header
                            Row(
                              children: [
                                _buildResizableColumn(
                                  title: '',
                                  columnKey: 'Checkbox',
                                  isLast: false,
                                  customContent: Center(
                                    child: Checkbox(
                                      value: _selectAll,
                                      onChanged: (value) => _toggleSelectAll(),
                                    ),
                                  ),
                                ),
                                _buildResizableColumn(
                                  title: 'Task Subject',
                                  columnKey: 'TaskSubject',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Task Status',
                                  columnKey: 'TaskStatus',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Assigned To',
                                  columnKey: 'AssignedTo',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Task Start Date',
                                  columnKey: 'TaskStartDate',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Task End Date',
                                  columnKey: 'TaskEndDate',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Project Name',
                                  columnKey: 'ProjectName',
                                  isLast: true,
                                ),
                              ],
                            ),

                            // Table body
                            Expanded(
                              child: SingleChildScrollView(
                                child: Column(
                                  children: _paginatedData.map((project) {
                                    return Row(
                                      children: [
                                        _buildDataCell(
                                          '',
                                          'Checkbox',
                                          customContent: Center(
                                            child: Checkbox(
                                              value: project['selected'],
                                              onChanged: (value) {
                                                setState(() {
                                                  project['selected'] = value;
                                                });
                                              },
                                            ),
                                          ),
                                        ),
                                        _buildDataCell(project['taskSubject'] ?? '', 'TaskSubject'),
                                        _buildDataCell(
                                          project['taskStatus'] ?? '',
                                          'TaskStatus',
                                          customContent: _buildStatusChip(project['taskStatus'] ?? ''),
                                        ),
                                        _buildDataCell(project['assignedTo'] ?? '', 'AssignedTo'),
                                        _buildDataCell(project['taskStartDate'] ?? '', 'TaskStartDate'),
                                        _buildDataCell(project['taskEndDate'] ?? '', 'TaskEndDate'),
                                        _buildDataCell(project['projectName'] ?? '', 'ProjectName'),
                                      ],
                                    );
                                  }).toList(),
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                    // Pagination controls
                    if (_totalPages > 0) _buildPaginationControls(),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// New Task Page
class NewTaskPage extends StatefulWidget {
  @override
  _NewTaskPageState createState() => _NewTaskPageState();
}

class _NewTaskPageState extends State<NewTaskPage> {
  final _formKey = GlobalKey<FormState>();
  final Map<String, TextEditingController> _controllers = {};

  // Form field values
  String _selectedTaskStatus = 'Not started';
  String _selectedAssignedTo = '';

  List<TaskUpdate> _taskUpdates = [];
  int _selectedTabIndex = 0;

  @override
  void initState() {
    super.initState();
    // Initialize controllers for all form fields
    [
      'taskSubject', 'taskStartDate', 'taskEndDate', 'taskUpdates'
    ].forEach((field) {
      _controllers[field] = TextEditingController();
    });
  }

  @override
  void dispose() {
    _controllers.values.forEach((controller) => controller.dispose());
    super.dispose();
  }

  void _saveTask() {
    if (_formKey.currentState!.validate()) {
      // Prepare the data to return
      Map<String, dynamic> formData = {
        'taskSubject': _controllers['taskSubject']!.text,
        'taskStatus': _selectedTaskStatus,
        'assignedTo': _selectedAssignedTo,
        'taskStartDate': _controllers['taskStartDate']!.text,
        'taskEndDate': _controllers['taskEndDate']!.text,
        'projectName': '', // You may want to add project name field to the form
        'keepOpen': false,
      };

      Navigator.pop(context, formData);
    }
  }

  void _saveAndNew() {
    if (_formKey.currentState!.validate()) {
      // Prepare the data to return
      Map<String, dynamic> formData = {
        'taskSubject': _controllers['taskSubject']!.text,
        'taskStatus': _selectedTaskStatus,
        'assignedTo': _selectedAssignedTo,
        'taskStartDate': _controllers['taskStartDate']!.text,
        'taskEndDate': _controllers['taskEndDate']!.text,
        'projectName': '', // You may want to add project name field to the form
        'keepOpen': true,
      };

      Navigator.pop(context, formData);
    }
  }

  void _deleteTask() {
    Navigator.pop(context, null);
  }

  void _refreshData() {
    setState(() {
      // Refresh the data
    });
  }

  void _addNewUpdate() {
    setState(() {
      _taskUpdates.add(TaskUpdate(
        dateUpdated: DateTime.now(),
        workPlanned: '',
      ));
    });
  }

  void _deleteUpdate(int index) {
    setState(() {
      _taskUpdates.removeAt(index);
    });
  }

  Widget _buildDropdownField({
    required String label,
    required String value,
    required List<String> items,
    required Function(String?) onChanged,
    bool isRequired = false,
  }) {
    return DropdownButtonFormField<String>(
      value: value.isEmpty ? null : value,
      decoration: InputDecoration(
        labelText: isRequired ? '$label*' : label,
        border: OutlineInputBorder(),
        contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
        suffixIcon: Icon(Icons.add, size: 20),
      ),
      items: items.map((item) => DropdownMenuItem(
        value: item,
        child: Text(item),
      )).toList(),
      onChanged: onChanged,
      validator: isRequired ? (value) {
        if (value == null || value.isEmpty) {
          return 'Please select a $label';
        }
        return null;
      } : null,
    );
  }

  Widget _buildDateField({
    required String label,
    required String controllerKey,
    bool isRequired = false,
  }) {
    return TextFormField(
      controller: _controllers[controllerKey],
      decoration: InputDecoration(
        labelText: isRequired ? '$label*' : label,
        border: OutlineInputBorder(),
        contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
        suffixIcon: Icon(Icons.calendar_today),
      ),
      readOnly: true,
      onTap: () async {
        DateTime? picked = await showDatePicker(
          context: context,
          initialDate: DateTime.now(),
          firstDate: DateTime(2000),
          lastDate: DateTime(2100),
        );
        if (picked != null) {
          _controllers[controllerKey]?.text =
          '${picked.month}/${picked.day}/${picked.year}';
        }
      },
      validator: isRequired ? (value) {
        if (value == null || value.isEmpty) {
          return 'Please select a $label';
        }
        return null;
      } : null,
    );
  }

  Widget _buildUpdatesTab() {
    return Container(
      padding: EdgeInsets.all(16),
      child: Column(
        children: [

          // Action buttons
          Container(
            width: double.infinity,
            child: SingleChildScrollView(
              scrollDirection: Axis.horizontal,
              child: Row(
                children: [
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.add, size: 16),
                    label: Text('New'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.link, size: 16),
                    label: Text('Link'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.link_off, size: 16),
                    label: Text('Unlink'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.delete, size: 16, color: Colors.red),
                    label: Text('Delete'),
                    style: OutlinedButton.styleFrom(
                      foregroundColor: Colors.red,
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  Container(
                    width: 180,
                    child: TextField(
                      decoration: InputDecoration(
                        isDense: true,
                        hintText: 'Search...',
                        prefixIcon: Icon(Icons.search, size: 16),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(4),
                          borderSide: BorderSide(color: Colors.grey.shade300),
                        ),
                        contentPadding: EdgeInsets.symmetric(vertical: 8, horizontal: 8),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
          SizedBox(height: 16),
          // Table
          Expanded(
            child: Container(
              decoration: BoxDecoration(
                border: Border.all(color: Colors.grey.shade300),
                borderRadius: BorderRadius.circular(4),
              ),
              child: Column(
                children: [
                  // Table header
                  Container(
                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 12),
                    decoration: BoxDecoration(
                      color: Colors.grey.shade100,
                      border: Border(bottom: BorderSide(color: Colors.grey.shade300)),
                    ),
                    child: SingleChildScrollView(
                      scrollDirection: Axis.horizontal,
                      child: Row(
                        children: [
                          Container(width: 40, child: Checkbox(value: false, onChanged: (_) {})),
                          SizedBox(width: 8),
                          _buildCompactTableHeader('Date Updated'),
                          _buildCompactTableHeader('Update'),
                          _buildCompactTableHeader('Work Planned'),
                        ],
                      ),
                    ),
                  ),
                  // Table content
                  Expanded(
                    child: _taskUpdates.isEmpty
                        ? Center(child: Text('No data to display', style: TextStyle(color: Colors.grey)))
                        : ListView.builder(
                      itemCount: _taskUpdates.length,
                      itemBuilder: (context, index) {
                        return Container(
                          padding: EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                          decoration: BoxDecoration(
                            border: Border(bottom: BorderSide(color: Colors.grey.shade200)),
                          ),
                          child: Row(
                            children: [
                              Container(width: 40, child: Checkbox(value: false, onChanged: (_) {})),
                              Icon(Icons.add, size: 16, color: Colors.orange.shade700),
                              SizedBox(width: 16),
                              _buildTableCell('${_taskUpdates[index].dateUpdated.month}/${_taskUpdates[index].dateUpdated.day}/${_taskUpdates[index].dateUpdated.year}'),
                              _buildTableCell(_taskUpdates[index].workPlanned, flex: 2),
                            ],
                          ),
                        );
                      },
                    ),
                  ),
                ],
              ),
            ),
          ),
          // Pagination
          Container(
            padding: EdgeInsets.symmetric(vertical: 16),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Container(
                  padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                  decoration: BoxDecoration(
                    color: Colors.orange.shade700,
                    borderRadius: BorderRadius.circular(4),
                  ),
                  child: Text('1', style: TextStyle(color: Colors.white, fontWeight: FontWeight.w600)),
                ),
                Row(
                  children: [
                    Text('Page Size: '),
                    DropdownButton<int>(
                      value: 20,
                      items: [10, 20, 50, 100].map((size) => DropdownMenuItem(
                        value: size,
                        child: Text(size.toString()),
                      )).toList(),
                      onChanged: (value) {},
                      underline: Container(),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildCompactTableHeader(String title) {
    return Container(
      width: 120,
      padding: EdgeInsets.symmetric(horizontal: 4),
      child: Row(
        children: [
          Expanded(
            child: Text(
              title,
              style: TextStyle(fontWeight: FontWeight.w600, fontSize: 10),
              overflow: TextOverflow.ellipsis,
            ),
          ),
          Icon(Icons.filter_list, size: 10, color: Colors.grey),
        ],
      ),
    );
  }

  Widget _buildTableCell(String text, {int flex = 1}) {
    return Expanded(
      flex: flex,
      child: Text(
        text.isEmpty ? '-' : text,
        style: TextStyle(fontSize: 12),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Project Task'),
        backgroundColor: Colors.white,
        foregroundColor: Colors.black,
        elevation: 0,
        actions: [
          IconButton(
            onPressed: () => Navigator.pop(context),
            icon: Icon(Icons.arrow_back),
          ),
          IconButton(
            onPressed: () => Navigator.pop(context),
            icon: Icon(Icons.arrow_forward),
          ),
          IconButton(
            onPressed: _refreshData,
            icon: Icon(Icons.refresh),
          ),
        ],
      ),
      body: Container(
        color: Colors.grey.shade50,
        child: Column(
          children: [
            // Action buttons - Made responsive
            Container(
              padding: EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.white,
                border: Border(
                  bottom: BorderSide(color: Colors.grey.shade300, width: 1),
                ),
              ),
              child: LayoutBuilder(
                builder: (context, constraints) {
                  bool isSmallScreen = constraints.maxWidth < 600;

                  if (isSmallScreen) {
                    // Stack buttons vertically on small screens
                    return Column(
                      children: [
                        Row(
                          children: [
                            Expanded(
                              child: OutlinedButton.icon(
                                onPressed: _deleteTask,
                                icon: Icon(Icons.delete, color: Colors.red.shade400, size: 18),
                                label: Text('Delete', style: TextStyle(fontSize: 12)),
                                style: OutlinedButton.styleFrom(
                                  foregroundColor: Colors.red.shade400,
                                  side: BorderSide(color: Colors.grey.shade300),
                                  padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                ),
                              ),
                            ),
                            SizedBox(width: 6),
                            Expanded(
                              child: OutlinedButton.icon(
                                onPressed: () {
                                  setState(() {
                                    _selectedTaskStatus = 'Completed';
                                  });
                                },
                                icon: Icon(Icons.check_circle, color: Colors.green.shade600, size: 18),
                                label: Text('Complete', style: TextStyle(fontSize: 12)),
                                style: OutlinedButton.styleFrom(
                                  foregroundColor: Colors.green.shade600,
                                  side: BorderSide(color: Colors.grey.shade300),
                                  padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                ),
                              ),
                            ),
                          ],
                        ),
                        SizedBox(height: 6),
                        Row(
                          children: [
                            Expanded(
                              child: OutlinedButton.icon(
                                onPressed: _saveAndNew,
                                icon: Icon(Icons.save, color: Colors.orange.shade700, size: 18),
                                label: Text('Save & New', style: TextStyle(fontSize: 12)),
                                style: OutlinedButton.styleFrom(
                                  foregroundColor: Colors.orange.shade700,
                                  side: BorderSide(color: Colors.orange.shade700),
                                  padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                ),
                              ),
                            ),
                            SizedBox(width: 6),
                            Expanded(
                              child: ElevatedButton.icon(
                                onPressed: _saveTask,
                                icon: Icon(Icons.save, color: Colors.white, size: 18),
                                label: Text('Save', style: TextStyle(fontSize: 12)),
                                style: ElevatedButton.styleFrom(
                                  backgroundColor: Colors.orange.shade700,
                                  foregroundColor: Colors.white,
                                  padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                ),
                              ),
                            ),
                          ],
                        ),
                      ],
                    );
                  } else {
                    // Original horizontal layout for larger screens
                    return Row(
                      children: [
                        OutlinedButton.icon(
                          onPressed: _deleteTask,
                          icon: Icon(Icons.delete, color: Colors.red.shade400, size: 20),
                          label: Text('Delete'),
                          style: OutlinedButton.styleFrom(
                            foregroundColor: Colors.red.shade400,
                            side: BorderSide(color: Colors.grey.shade300),
                          ),
                        ),
                        SizedBox(width: 8),
                        OutlinedButton.icon(
                          onPressed: () {
                            setState(() {
                              _selectedTaskStatus = 'Completed';
                            });
                          },
                          icon: Icon(Icons.check_circle, color: Colors.green.shade600, size: 20),
                          label: Text('Mark Completed'),
                          style: OutlinedButton.styleFrom(
                            foregroundColor: Colors.green.shade600,
                            side: BorderSide(color: Colors.grey.shade300),
                          ),
                        ),
                        Spacer(),
                        OutlinedButton.icon(
                          onPressed: _saveAndNew,
                          icon: Icon(Icons.save, color: Colors.orange.shade700, size: 20),
                          label: Text('Save and New'),
                          style: OutlinedButton.styleFrom(
                            foregroundColor: Colors.orange.shade700,
                            side: BorderSide(color: Colors.orange.shade700),
                          ),
                        ),
                        SizedBox(width: 8),
                        ElevatedButton.icon(
                          onPressed: _saveTask,
                          icon: Icon(Icons.save, color: Colors.white, size: 20),
                          label: Text('Save'),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.orange.shade700,
                            foregroundColor: Colors.white,
                          ),
                        ),
                      ],
                    );
                  }
                },
              ),
            ),

            // Form content
            Expanded(
              child: SingleChildScrollView(
                padding: EdgeInsets.all(12),
                child: Form(
                  key: _formKey,
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Project Task',
                        style: TextStyle(
                          fontSize: 24,
                          fontWeight: FontWeight.bold,
                          color: Colors.black87,
                        ),
                      ),
                      SizedBox(height: 20),

                      // Task Subject and Assigned To - Made responsive
                      LayoutBuilder(
                        builder: (context, constraints) {
                          bool isSmallScreen = constraints.maxWidth < 600;

                          if (isSmallScreen) {
                            return Column(
                              children: [
                                TextFormField(
                                  controller: _controllers['taskSubject'],
                                  decoration: InputDecoration(
                                    labelText: 'Task Subject*',
                                    border: OutlineInputBorder(),
                                    contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 12),
                                  ),
                                  validator: (value) {
                                    if (value == null || value.isEmpty) {
                                      return 'Please enter a task subject';
                                    }
                                    return null;
                                  },
                                ),
                                SizedBox(height: 12),
                                _buildDropdownField(
                                  label: 'Assigned To',
                                  value: _selectedAssignedTo,
                                  items: [
                                    'John Doe',
                                    'Jane Smith',
                                    'Mike Johnson',
                                    'Sarah Williams',
                                    'David Brown',
                                    'Lisa Davis',
                                  ],
                                  onChanged: (value) {
                                    setState(() {
                                      _selectedAssignedTo = value ?? '';
                                    });
                                  },
                                  isRequired: true,
                                ),
                              ],
                            );
                          } else {
                            return Row(
                              children: [
                                Expanded(
                                  child: TextFormField(
                                    controller: _controllers['taskSubject'],
                                    decoration: InputDecoration(
                                      labelText: 'Task Subject*',
                                      border: OutlineInputBorder(),
                                      contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
                                    ),
                                    validator: (value) {
                                      if (value == null || value.isEmpty) {
                                        return 'Please enter a task subject';
                                      }
                                      return null;
                                    },
                                  ),
                                ),
                                SizedBox(width: 16),
                                Expanded(
                                  child: _buildDropdownField(
                                    label: 'Assigned To',
                                    value: _selectedAssignedTo,
                                    items: [
                                      'John Doe',
                                      'Jane Smith',
                                      'Mike Johnson',
                                      'Sarah Williams',
                                      'David Brown',
                                      'Lisa Davis',
                                    ],
                                    onChanged: (value) {
                                      setState(() {
                                        _selectedAssignedTo = value ?? '';
                                      });
                                    },
                                    isRequired: true,
                                  ),
                                ),
                              ],
                            );
                          }
                        },
                      ),
                      SizedBox(height: 12),

                      // Task Status - Made responsive
                      LayoutBuilder(
                        builder: (context, constraints) {
                          bool isSmallScreen = constraints.maxWidth < 600;

                          return Container(
                            width: isSmallScreen ? double.infinity : constraints.maxWidth / 2 - 8,
                            padding: EdgeInsets.all(12),
                            decoration: BoxDecoration(
                              border: Border.all(color: Colors.grey.shade300),
                              borderRadius: BorderRadius.circular(4),
                            ),
                            child: Row(
                              children: [
                                SizedBox(width: 8),
                                Text(
                                  _selectedTaskStatus,
                                  style: TextStyle(
                                    color: Colors.orange.shade700,
                                    fontWeight: FontWeight.w600,
                                  ),
                                ),
                                Spacer(),
                                DropdownButton<String>(
                                  value: _selectedTaskStatus,
                                  items: [
                                    'Not started',
                                    'In Progress',
                                    'Completed',
                                    'Deferred',
                                  ].map((status) => DropdownMenuItem(
                                    value: status,
                                    child: Text(status),
                                  )).toList(),
                                  onChanged: (value) {
                                    setState(() {
                                      _selectedTaskStatus = value ?? '';
                                    });
                                  },
                                  underline: Container(),
                                ),
                              ],
                            ),
                          );
                        },
                      ),
                      SizedBox(height: 12),

                      // Task Start Date and Task End Date - Made responsive
                      LayoutBuilder(
                        builder: (context, constraints) {
                          bool isSmallScreen = constraints.maxWidth < 600;

                          if (isSmallScreen) {
                            return Column(
                              children: [
                                _buildDateField(
                                  label: 'Task Start Date',
                                  controllerKey: 'taskStartDate',
                                  isRequired: true,
                                ),
                                SizedBox(height: 12),
                                _buildDateField(
                                  label: 'Task End Date',
                                  controllerKey: 'taskEndDate',
                                  isRequired: true,
                                ),
                              ],
                            );
                          } else {
                            return Row(
                              children: [
                                Expanded(
                                  child: _buildDateField(
                                    label: 'Task Start Date',
                                    controllerKey: 'taskStartDate',
                                    isRequired: true,
                                  ),
                                ),
                                SizedBox(width: 16),
                                Expanded(
                                  child: _buildDateField(
                                    label: 'Task End Date',
                                    controllerKey: 'taskEndDate',
                                    isRequired: true,
                                  ),
                                ),
                              ],
                            );
                          }
                        },
                      ),
                      SizedBox(height: 12),

                      // Task Updates
                      TextFormField(
                        controller: _controllers['taskUpdates'],
                        decoration: InputDecoration(
                          labelText: 'Task Updates*',
                          border: OutlineInputBorder(),
                          contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 12),
                        ),
                        maxLines: 4,
                        validator: (value) {
                          if (value == null || value.isEmpty) {
                            return 'Please enter task updates';
                          }
                          return null;
                        },
                      ),
                      SizedBox(height: 20),

                      // Updates Section
                      Container(
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.circular(8),
                          border: Border.all(color: Colors.grey.shade300),
                        ),
                        child: Column(
                          children: [
                            // Tab headers
                            Container(
                              decoration: BoxDecoration(
                                border: Border(bottom: BorderSide(color: Colors.grey.shade300)),
                              ),
                              child: Row(
                                children: [
                                  GestureDetector(
                                    onTap: () => setState(() => _selectedTabIndex = 0),
                                    child: Container(
                                      padding: EdgeInsets.symmetric(horizontal: 20, vertical: 12),
                                      decoration: BoxDecoration(
                                        color: _selectedTabIndex == 0 ? Colors.orange.shade700 : Colors.transparent,
                                        borderRadius: BorderRadius.only(
                                          topLeft: Radius.circular(8),
                                        ),
                                      ),
                                      child: Row(
                                        children: [
                                          Icon(
                                            Icons.refresh_sharp,
                                            size: 16,
                                            color: _selectedTabIndex == 0 ? Colors.white : Colors.orange.shade700,
                                          ),
                                          SizedBox(width: 8),
                                          Text(
                                            'Updates',
                                            style: TextStyle(
                                              color: _selectedTabIndex == 0 ? Colors.white : Colors.black87,
                                              fontWeight: FontWeight.w500,
                                            ),
                                          ),
                                        ],
                                      ),
                                    ),
                                  ),
                                ],
                              ),
                            ),
                            // Tab content
                            Container(
                              height: 400,
                              child: _selectedTabIndex == 0 ? _buildUpdatesTab() : null,
                            ),
                          ],
                        ),
                      ),
                      SizedBox(height: 32),
                    ],
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// Model class for task updates
class TaskUpdate {
  final DateTime dateUpdated;
  final String workPlanned;

  TaskUpdate({
    required this.dateUpdated,
    required this.workPlanned,
  });
}

//Project Team Page
class ProjectTeamPage extends StatefulWidget {
  @override
  _ProjectTeamPageState createState() => _ProjectTeamPageState();
}

class _ProjectTeamPageState extends State<ProjectTeamPage> {
  final ScrollController _horizontalScrollController = ScrollController();
  final TextEditingController _searchController = TextEditingController();

  // Column widths - can be adjusted
  Map<String, double> columnWidths = {
    'Checkbox': 60,
    'TeamName': 700,
    'Unit': 700,
  };

  // Map column keys to data field names
  Map<String, String> columnToDataField = {
    'TeamName': 'teamName',
    'Unit': 'unit',
  };

  // Sorting state
  String _sortColumn = '';
  bool _sortAscending = true;

  // Pagination state
  int _currentPage = 1;
  int _pageSize = 20;
  final List<int> _pageSizeOptions = [10, 20, 50, 100];

  // Sample data structure
  List<Map<String, dynamic>> _teamsData = [
    {
      'selected': false,
      'teamName': 'A1HQFT Development',
      'unit': 'Systems Maintenance and Development',
    },
    {
      'selected': false,
      'teamName': 'API Migration Development',
      'unit': 'Systems Maintenance and Development',
    },
    {
      'selected': false,
      'teamName': 'Apparel Manager Development',
      'unit': 'Systems Maintenance and Development',
    },
    {
      'selected': false,
      'teamName': 'Bail Reporting Digitization and Audit',
      'unit': 'Systems Maintenance and Development',
    },
    {
      'selected': false,
      'teamName': 'Body Worn Camera Training Team',
      'unit': 'Training',
    },
    {
      'selected': false,
      'teamName': 'Body-Worn Camera Team',
      'unit': 'Operations',
    },
    {
      'selected': false,
      'teamName': 'CBIMS Development',
      'unit': 'Systems Maintenance and Development',
    },
    {
      'selected': false,
      'teamName': 'CSIS Development',
      'unit': 'Systems Maintenance and Development',
    },
    {
      'selected': false,
      'teamName': 'DDPI Development',
      'unit': 'Systems Maintenance and Development',
    },
  ];

  bool _selectAll = false;

  @override
  void dispose() {
    _horizontalScrollController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  List<Map<String, dynamic>> get _filteredData {
    var filtered = _teamsData;

    // Apply search filter
    if (_searchController.text.isNotEmpty) {
      filtered = filtered.where((project) {
        return project.values.any((value) =>
            value.toString().toLowerCase().contains(_searchController.text.toLowerCase()));
      }).toList();
    }

    // Apply sorting
    if (_sortColumn.isNotEmpty) {
      String dataField = columnToDataField[_sortColumn] ?? _sortColumn;
      filtered.sort((a, b) {
        var aValue = a[dataField] ?? '';
        var bValue = b[dataField] ?? '';

        int comparison = aValue.toString().compareTo(bValue.toString());
        return _sortAscending ? comparison : -comparison;
      });
    }

    return filtered;
  }

  List<Map<String, dynamic>> get _paginatedData {
    var filtered = _filteredData;
    int startIndex = (_currentPage - 1) * _pageSize;
    int endIndex = startIndex + _pageSize;

    if (startIndex >= filtered.length) return [];
    if (endIndex > filtered.length) endIndex = filtered.length;

    return filtered.sublist(startIndex, endIndex);
  }

  int get _totalPages {
    return (_filteredData.length / _pageSize).ceil();
  }

  void _refreshData() {
    setState(() {
      // Unselect all checkboxes
      for (var project in _teamsData) {
        project['selected'] = false;
      }
      _selectAll = false;
      // add actual data refresh logic here
    });
  }

  void _navigateToNewTeamPage() async {
    final result = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => NewTeamPage(),
      ),
    );

    if (result != null) {
      setState(() {
        _teamsData.add({
          'selected': false,
          'teamName': result['teamName'],
          'unit': result['unit'],
        });
      });

      // If keepOpen flag is set, reopen the page
      if (result['keepOpen'] == true) {
        _navigateToNewTeamPage();
      }
    }
  }

  void _toggleSelectAll() {
    setState(() {
      _selectAll = !_selectAll;
      for (var project in _paginatedData) {
        project['selected'] = _selectAll;
      }
    });
  }

  void _deleteSelected() {
    setState(() {
      _teamsData.removeWhere((project) => project['selected'] == true);
      _selectAll = false;
      // Adjust current page if needed
      if (_currentPage > _totalPages && _totalPages > 0) {
        _currentPage = _totalPages;
      }
    });
  }

  void _exportData() {
    // Add export functionality here
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Export functionality would be implemented here')),
    );
  }

  void _showFilterDialog(String columnKey) {
    // Add filter dialog functionality here
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Filter ${columnKey}'),
        content: Text('Filter functionality would be implemented here'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Close'),
          ),
        ],
      ),
    );
  }

  void _sortData(String columnKey) {
    setState(() {
      if (_sortColumn == columnKey) {
        _sortAscending = !_sortAscending;
      } else {
        _sortColumn = columnKey;
        _sortAscending = true;
      }
    });
  }

  bool _hasSelectedItems() {
    return _teamsData.any((project) => project['selected'] == true);
  }

  Widget _buildResizableColumn({
    required String title,
    required String columnKey,
    required bool isLast,
    Widget? customContent,
  }) {
    return Container(
      width: columnWidths[columnKey],
      child: Row(
        children: [
          Expanded(
            child: Container(
              height: 40, // Fixed height for consistent checkbox alignment
              padding: EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.grey.shade200,
                border: Border(
                  right: BorderSide(color: Colors.grey.shade400),
                  bottom: BorderSide(color: Colors.grey.shade400),
                ),
              ),
              child: customContent ??
                  Row(
                    children: [
                      Expanded(
                        child: Text(
                          title,
                          style: TextStyle(fontWeight: FontWeight.bold, fontSize: 12),
                          overflow: TextOverflow.ellipsis,
                        ),
                      ),
                      if (columnKey == 'TeamName') ...[
                        GestureDetector(
                          onTap: () => _sortData(columnKey),
                          child: Icon(
                            _sortColumn == columnKey
                                ? (_sortAscending ? Icons.arrow_upward : Icons.arrow_downward)
                                : Icons.unfold_more,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                        ),
                        SizedBox(width: 4),
                      ],
                      if (columnKey != 'Checkbox')
                        GestureDetector(
                          onTap: () => _showFilterDialog(columnKey),
                          child: Icon(
                            Icons.filter_alt_outlined,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                        ),
                    ],
                  ),
            ),
          ),
          if (!isLast)
            GestureDetector(
              onPanUpdate: (details) {
                setState(() {
                  columnWidths[columnKey] =
                      (columnWidths[columnKey]! + details.delta.dx).clamp(60.0, 400.0);
                });
              },
              child: Container(
                width: 4,
                height: 40,
                color: Colors.grey.shade400,
                child: MouseRegion(
                  cursor: SystemMouseCursors.resizeColumn,
                  child: Container(),
                ),
              ),
            ),
        ],
      ),
    );
  }

  Widget _buildDataCell(dynamic data, String columnKey, {Widget? customContent}) {
    return Container(
      width: columnWidths[columnKey],
      height: 40, // Fixed height for consistent alignment
      padding: EdgeInsets.all(8),
      decoration: BoxDecoration(
        border: Border(
          right: BorderSide(color: Colors.grey.shade400),
          bottom: BorderSide(color: Colors.grey.shade400),
        ),
      ),
      child: Align(
        alignment: Alignment.centerLeft,
        child: customContent ??
            Text(
              data.toString(),
              style: TextStyle(fontSize: 12),
              overflow: TextOverflow.ellipsis,
            ),
      ),
    );
  }

  Widget _buildPaginationControls() {
    return Container(
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        border: Border(
          top: BorderSide(color: Colors.grey.shade300, width: 1),
        ),
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          // Page numbers
          Row(
            children: [
              for (int i = 1; i <= _totalPages && i <= 4; i++)
                GestureDetector(
                  onTap: () {
                    setState(() {
                      _currentPage = i;
                    });
                  },
                  child: Container(
                    margin: EdgeInsets.symmetric(horizontal: 4),
                    padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                    decoration: BoxDecoration(
                      color: _currentPage == i ? Colors.orange.shade700 : Colors.transparent,
                      borderRadius: BorderRadius.circular(4),
                    ),
                    child: Text(
                      i.toString(),
                      style: TextStyle(
                        color: _currentPage == i ? Colors.white : Colors.black,
                        fontWeight: _currentPage == i ? FontWeight.bold : FontWeight.normal,
                      ),
                    ),
                  ),
                ),
            ],
          ),
          // Page size selector
          Row(
            children: [
              Text('Page Size: ', style: TextStyle(fontSize: 14)),
              DropdownButton<int>(
                value: _pageSize,
                items: _pageSizeOptions.map((size) {
                  return DropdownMenuItem<int>(
                    value: size,
                    child: Text(size.toString()),
                  );
                }).toList(),
                onChanged: (value) {
                  setState(() {
                    _pageSize = value!;
                    _currentPage = 1; // Reset to first page
                  });
                },
              ),
            ],
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        color: Colors.grey.shade50,
        child: Column(
          children: [
            // Header with buttons and search
            Container(
              width: double.infinity, // Full width
              padding: EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.white,
                border: Border(
                  bottom: BorderSide(color: Colors.grey.shade300, width: 1),
                ),
              ),
              child: LayoutBuilder(
                builder: (context, constraints) {
                  final isSmallScreen = constraints.maxWidth < 600;
                  final buttonStyle = OutlinedButton.styleFrom(
                    padding: isSmallScreen
                        ? EdgeInsets.symmetric(horizontal: 6, vertical: 4)
                        : EdgeInsets.symmetric(horizontal: 8, vertical: 6),
                    textStyle: TextStyle(
                      fontSize: isSmallScreen ? 12 : 14,
                    ),
                    minimumSize: Size(0, isSmallScreen ? 30 : 36),
                    side: BorderSide(color: Colors.grey.shade300),
                  );

                  return SingleChildScrollView(
                    scrollDirection: Axis.horizontal,
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.start, // Left-aligned content
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        // New Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _navigateToNewTeamPage,
                            icon: Icon(Icons.add, color: Colors.orange.shade700, size: 20),
                            padding: EdgeInsets.all(4),
                            tooltip: 'New',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _navigateToNewTeamPage,
                            icon: Icon(Icons.add, color: Colors.orange.shade700, size: 20),
                            label: Text('New'),
                            style: buttonStyle.copyWith(
                              backgroundColor: MaterialStateProperty.all(Colors.white),
                              foregroundColor: MaterialStateProperty.all(Colors.black),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Delete Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _hasSelectedItems() ? _deleteSelected : null,
                            icon: Icon(Icons.delete,
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                                size: 20
                            ),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Delete',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _hasSelectedItems() ? _deleteSelected : null,
                            icon: Icon(Icons.delete,
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                                size: 20
                            ),
                            label: Text(
                              'Delete',
                              style: TextStyle(
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                              ),
                            ),
                            style: buttonStyle.copyWith(
                              foregroundColor: MaterialStateProperty.all(
                                _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                              ),
                              side: MaterialStateProperty.all(
                                BorderSide(color: Colors.grey.shade300),
                              ),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Search Field
                        Container(
                          width: isSmallScreen ? 180 : 300,
                          child: TextField(
                            controller: _searchController,
                            onChanged: (value) {
                              setState(() {
                                _currentPage = 1;
                              });
                            },
                            decoration: InputDecoration(
                              isDense: true,
                              hintText: 'Search...',
                              suffixIcon: Icon(Icons.search, color: Colors.orange.shade700),
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(4),
                              ),
                              contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                            ),
                          ),
                        ),

                        SizedBox(width: 12),

                        // Export Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _exportData,
                            icon: Icon(Icons.download, color: Colors.orange.shade700, size: 20),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Export',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _exportData,
                            icon: Icon(Icons.download, color: Colors.orange.shade700, size: 20),
                            label: Text('Export'),
                            style: buttonStyle.copyWith(
                              backgroundColor: MaterialStateProperty.all(Colors.white),
                              foregroundColor: MaterialStateProperty.all(Colors.black),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Refresh Button
                        IconButton(
                          onPressed: _refreshData,
                          icon: Icon(Icons.refresh, color: Colors.orange.shade700, size: 20),
                          padding: EdgeInsets.all(4),
                          tooltip: 'Refresh',
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),

            // Table area
            Expanded(
              child: Container(
                margin: EdgeInsets.all(16),
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.grey.shade300),
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(4),
                ),
                child: Column(
                  children: [
                    // Table with synchronized scrolling
                    Expanded(
                      child: _paginatedData.isEmpty
                          ? Center(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(
                              Icons.folder_open,
                              size: 64,
                              color: Colors.grey.shade400,
                            ),
                            SizedBox(height: 16),
                            Text(
                              'No teams found',
                              style: TextStyle(
                                fontSize: 18,
                                color: Colors.grey.shade600,
                              ),
                            ),
                            SizedBox(height: 8),
                            Text(
                              'Click "New" to add your first team',
                              style: TextStyle(
                                fontSize: 14,
                                color: Colors.grey.shade500,
                              ),
                            ),
                          ],
                        ),
                      )
                          : SingleChildScrollView(
                        controller: _horizontalScrollController,
                        scrollDirection: Axis.horizontal,
                        child: Column(
                          children: [
                            // Table header
                            Row(
                              children: [
                                _buildResizableColumn(
                                  title: '',
                                  columnKey: 'Checkbox',
                                  isLast: false,
                                  customContent: Center(
                                    child: Checkbox(
                                      value: _selectAll,
                                      onChanged: (value) => _toggleSelectAll(),
                                    ),
                                  ),
                                ),
                                _buildResizableColumn(
                                  title: 'Team Name',
                                  columnKey: 'TeamName',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Unit',
                                  columnKey: 'Unit',
                                  isLast: false,
                                ),
                              ],
                            ),

                            // Table body
                            Expanded(
                              child: SingleChildScrollView(
                                child: Column(
                                  children: _paginatedData.map((project) {
                                    return Row(
                                      children: [
                                        _buildDataCell(
                                          '',
                                          'Checkbox',
                                          customContent: Center(
                                            child: Checkbox(
                                              value: project['selected'],
                                              onChanged: (value) {
                                                setState(() {
                                                  project['selected'] = value;
                                                });
                                              },
                                            ),
                                          ),
                                        ),
                                        _buildDataCell(project['teamName'] ?? '', 'TeamName'),
                                        _buildDataCell(project['unit'] ?? '', 'Unit'),
                                      ],
                                    );
                                  }).toList(),
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                    // Pagination controls
                    if (_totalPages > 0) _buildPaginationControls(),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// New Team Page
class NewTeamPage extends StatefulWidget {
  @override
  _NewTeamPageState createState() => _NewTeamPageState();
}

class _NewTeamPageState extends State<NewTeamPage> {
  final _formKey = GlobalKey<FormState>();
  final Map<String, TextEditingController> _controllers = {};

  // Form field values
  String _selectedUnit = 'Deputy Superintendent of Police Office';

  List<Project> _projects = [];
  List<TeamMember> _teamMembers = [];
  int _selectedTabIndex = 0;

  @override
  void initState() {
    super.initState();
    // Initialize controllers for all form fields
    [
      'teamName',
    ].forEach((field) {
      _controllers[field] = TextEditingController();
    });
  }

  @override
  void dispose() {
    _controllers.values.forEach((controller) => controller.dispose());
    super.dispose();
  }

  void _saveTeam() {
    if (_formKey.currentState!.validate()) {
      // Prepare the data to return
      Map<String, dynamic> formData = {
        'teamName': _controllers['teamName']!.text,
        'unit': _selectedUnit,
        'keepOpen': false,
      };

      Navigator.pop(context, formData);
    }
  }

  void _saveAndNew() {
    if (_formKey.currentState!.validate()) {
      // Prepare the data to return
      Map<String, dynamic> formData = {
        'teamName': _controllers['teamName']!.text,
        'unit': _selectedUnit,
        'keepOpen': true,
      };

      Navigator.pop(context, formData);
    }
  }

  void _deleteTeam() {
    Navigator.pop(context, null);
  }

  Widget _buildDropdownField({
    required String label,
    required String value,
    required List<String> items,
    required Function(String?) onChanged,
    bool isRequired = false,
    bool hasAddButton = false,
  }) {
    return DropdownButtonFormField<String>(
      value: value.isEmpty ? null : value,
      decoration: InputDecoration(
        labelText: isRequired ? '$label*' : label,
        border: OutlineInputBorder(),
        contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
        suffixIcon: hasAddButton
            ? Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            IconButton(
              icon: Icon(Icons.add, size: 20, color: Colors.orange.shade700),
              onPressed: () {},
            ),
          ],
        )
            : null,
      ),
      items: items.map((item) => DropdownMenuItem(
        value: item,
        child: Text(item),
      )).toList(),
      onChanged: onChanged,
      validator: isRequired ? (value) {
        if (value == null || value.isEmpty) {
          return 'Please select a $label';
        }
        return null;
      } : null,
    );
  }

  Widget _buildProjectPlanningTab() {
    return Container(
      padding: EdgeInsets.all(16),
      child: Column(
        children: [
          // Action buttons
          Container(
            width: double.infinity,
            child: SingleChildScrollView(
              scrollDirection: Axis.horizontal,
              child: Row(
                children: [
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.add, size: 16),
                    label: Text('New'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.link, size: 16),
                    label: Text('Link'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.link_off, size: 16),
                    label: Text('Unlink'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.delete, size: 16, color: Colors.red),
                    label: Text('Delete'),
                    style: OutlinedButton.styleFrom(
                      foregroundColor: Colors.red,
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.check_circle, size: 16, color: Colors.green),
                    label: Text('Complete'),
                    style: OutlinedButton.styleFrom(
                      foregroundColor: Colors.green,
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  Container(
                    width: 180,
                    child: TextField(
                      decoration: InputDecoration(
                        isDense: true,
                        hintText: 'Search...',
                        prefixIcon: Icon(Icons.search, size: 16),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(4),
                          borderSide: BorderSide(color: Colors.grey.shade300),
                        ),
                        contentPadding: EdgeInsets.symmetric(vertical: 8, horizontal: 8),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
          SizedBox(height: 16),
          // Table
          Expanded(
            child: Container(
              decoration: BoxDecoration(
                border: Border.all(color: Colors.grey.shade300),
                borderRadius: BorderRadius.circular(4),
              ),
              child: Column(
                children: [
                  // Table header
                  Container(
                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 12),
                    decoration: BoxDecoration(
                      color: Colors.grey.shade100,
                      border: Border(bottom: BorderSide(color: Colors.grey.shade300)),
                    ),
                    child: SingleChildScrollView(
                      scrollDirection: Axis.horizontal,
                      child: Row(
                        children: [
                          Container(width: 40, child: Checkbox(value: false, onChanged: (_) {})),
                          Icon(Icons.add, size: 16, color: Colors.orange.shade700),
                          SizedBox(width: 8),
                          _buildCompactTableHeader('Project Name'),
                          _buildCompactTableHeader('Project Manager'),
                          _buildCompactTableHeader('Project Budget'),
                          _buildCompactTableHeader('Project Start Date'),
                          _buildCompactTableHeader('Project End Date'),
                          _buildCompactTableHeader('Project Category'),
                          _buildCompactTableHeader('Division'),
                          _buildCompactTableHeader('Unit'),
                          _buildCompactTableHeader('Project Status'),
                        ],
                      ),
                    ),
                  ),
                  // Table content
                  Expanded(
                    child: _projects.isEmpty
                        ? Center(child: Text('No data to display', style: TextStyle(color: Colors.grey)))
                        : SingleChildScrollView(
                      scrollDirection: Axis.horizontal,
                      child: Container(
                        child: ListView.builder(
                          itemCount: _projects.length,
                          itemBuilder: (context, index) {
                            return Container(
                              padding: EdgeInsets.symmetric(horizontal: 8, vertical: 12),
                              decoration: BoxDecoration(
                                border: Border(bottom: BorderSide(color: Colors.grey.shade200)),
                              ),
                              child: Row(
                                children: [
                                  Container(width: 40, child: Checkbox(value: false, onChanged: (_) {})),
                                  Icon(Icons.add, size: 16, color: Colors.orange.shade700),
                                  SizedBox(width: 8),
                                  _buildCompactTableCell(_projects[index].projectName),
                                  _buildCompactTableCell(_projects[index].projectManager),
                                  _buildCompactTableCell(_projects[index].projectBudget),
                                  _buildCompactTableCell(_projects[index].startDate),
                                  _buildCompactTableCell(_projects[index].endDate),
                                  _buildCompactTableCell(_projects[index].category),
                                  _buildCompactTableCell(_projects[index].division),
                                  _buildCompactTableCell(_projects[index].unit),
                                  _buildCompactTableCell(_projects[index].status),
                                ],
                              ),
                            );
                          },
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
          // Pagination
          Container(
            padding: EdgeInsets.symmetric(vertical: 16),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Container(
                  padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                  decoration: BoxDecoration(
                    color: Colors.orange.shade700,
                    borderRadius: BorderRadius.circular(4),
                  ),
                  child: Text('1', style: TextStyle(color: Colors.white, fontWeight: FontWeight.w600)),
                ),
                Row(
                  children: [
                    Text('Page Size: '),
                    DropdownButton<int>(
                      value: 20,
                      items: [10, 20, 50, 100].map((size) => DropdownMenuItem(
                        value: size,
                        child: Text(size.toString()),
                      )).toList(),
                      onChanged: (value) {},
                      underline: Container(),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildTeamMembersTab() {
    return Container(
      padding: EdgeInsets.all(16),
      child: Column(
        children: [
          // Action buttons
          Container(
            width: double.infinity,
            child: SingleChildScrollView(
              scrollDirection: Axis.horizontal,
              child: Row(
                children: [
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.add, size: 16),
                    label: Text('New'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.link, size: 16),
                    label: Text('Link'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.link_off, size: 16),
                    label: Text('Unlink'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.delete, size: 16, color: Colors.red),
                    label: Text('Delete'),
                    style: OutlinedButton.styleFrom(
                      foregroundColor: Colors.red,
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  Container(
                    width: 180,
                    child: TextField(
                      decoration: InputDecoration(
                        isDense: true,
                        hintText: 'Search...',
                        prefixIcon: Icon(Icons.search, size: 16),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(4),
                          borderSide: BorderSide(color: Colors.grey.shade300),
                        ),
                        contentPadding: EdgeInsets.symmetric(vertical: 8, horizontal: 8),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
          SizedBox(height: 16),
          // Team Members table
          Expanded(
            child: Container(
              decoration: BoxDecoration(
                border: Border.all(color: Colors.grey.shade300),
                borderRadius: BorderRadius.circular(4),
              ),
              child: Column(
                children: [
                  // Table header
                  Container(
                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 12),
                    decoration: BoxDecoration(
                      color: Colors.grey.shade100,
                      border: Border(bottom: BorderSide(color: Colors.grey.shade300)),
                    ),
                    child: SingleChildScrollView(
                      scrollDirection: Axis.horizontal,
                      child: Row(
                        children: [
                          Container(width: 40, child: Checkbox(value: false, onChanged: (_) {})),
                          SizedBox(width: 8),
                          _buildCompactTableHeader('User Name'),
                          _buildCompactTableHeader('Firstname'),
                          _buildCompactTableHeader('Lastname'),
                          _buildCompactTableHeader('Full Name'),
                          _buildCompactTableHeader('Email'),
                          _buildCompactTableHeader('Division'),
                          _buildCompactTableHeader('Unit'),
                        ],
                      ),
                    ),
                  ),
                  // Table content
                  Expanded(
                    child: _teamMembers.isEmpty
                        ? Center(child: Text('No data to display', style: TextStyle(color: Colors.grey)))
                        : SingleChildScrollView(
                      scrollDirection: Axis.horizontal,
                      child: Container(
                        child: ListView.builder(
                          itemCount: _teamMembers.length,
                          itemBuilder: (context, index) {
                            return Container(
                              padding: EdgeInsets.symmetric(horizontal: 8, vertical: 12),
                              decoration: BoxDecoration(
                                border: Border(bottom: BorderSide(color: Colors.grey.shade200)),
                              ),
                              child: Row(
                                children: [
                                  Container(width: 40, child: Checkbox(value: false, onChanged: (_) {})),
                                  SizedBox(width: 8),
                                  _buildCompactTableCell(_teamMembers[index].userName),
                                  _buildCompactTableCell(_teamMembers[index].firstName),
                                  _buildCompactTableCell(_teamMembers[index].lastName),
                                  _buildCompactTableCell(_teamMembers[index].fullName),
                                  _buildCompactTableCell(_teamMembers[index].email),
                                  _buildCompactTableCell(_teamMembers[index].division),
                                  _buildCompactTableCell(_teamMembers[index].unit),
                                ],
                              ),
                            );
                          },
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
          // Pagination
          Container(
            padding: EdgeInsets.symmetric(vertical: 16),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Container(
                  padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                  decoration: BoxDecoration(
                    color: Colors.orange.shade700,
                    borderRadius: BorderRadius.circular(4),
                  ),
                  child: Text('1', style: TextStyle(color: Colors.white, fontWeight: FontWeight.w600)),
                ),
                Row(
                  children: [
                    Text('Page Size: '),
                    DropdownButton<int>(
                      value: 20,
                      items: [10, 20, 50, 100].map((size) => DropdownMenuItem(
                        value: size,
                        child: Text(size.toString()),
                      )).toList(),
                      onChanged: (value) {},
                      underline: Container(),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildCompactTableHeader(String title) {
    return Container(
      width: 120,
      padding: EdgeInsets.symmetric(horizontal: 4),
      child: Row(
        children: [
          Expanded(
            child: Text(
              title,
              style: TextStyle(fontWeight: FontWeight.w600, fontSize: 10),
              overflow: TextOverflow.ellipsis,
            ),
          ),
          Icon(Icons.filter_list, size: 10, color: Colors.grey),
        ],
      ),
    );
  }

  Widget _buildCompactTableCell(String text) {
    return Container(
      width: 120,
      padding: EdgeInsets.symmetric(horizontal: 4),
      child: Text(
        text.isEmpty ? '-' : text,
        style: TextStyle(fontSize: 10),
        overflow: TextOverflow.ellipsis,
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Project Team'),
        backgroundColor: Colors.white,
        foregroundColor: Colors.black,
        elevation: 0,
        leading: IconButton(
          onPressed: () => Navigator.pop(context),
          icon: Icon(Icons.arrow_back),
        ),
        actions: [
          IconButton(
            onPressed: () => Navigator.pop(context),
            icon: Icon(Icons.arrow_back),
          ),
          IconButton(
            onPressed: () => Navigator.pop(context),
            icon: Icon(Icons.arrow_forward),
          ),
          IconButton(
            onPressed: () {},
            icon: Icon(Icons.refresh),
          ),
        ],
      ),
      body: Container(
        color: Colors.grey.shade50,
        child: Column(
          children: [
            // Action buttons - Made Responsive
            Container(
              padding: EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.white,
                border: Border(
                  bottom: BorderSide(color: Colors.grey.shade300, width: 1),
                ),
              ),
              child: LayoutBuilder(
                builder: (context, constraints) {
                  bool isSmallScreen = constraints.maxWidth < 600;

                  if (isSmallScreen) {
                    // Stack buttons vertically on small screens
                    return Column(
                      children: [
                        Row(
                          children: [
                            Expanded(
                              child: OutlinedButton.icon(
                                onPressed: _deleteTeam,
                                icon: Icon(Icons.delete, color: Colors.red.shade400, size: 18),
                                label: Text('Delete', style: TextStyle(fontSize: 12)),
                                style: OutlinedButton.styleFrom(
                                  foregroundColor: Colors.red.shade400,
                                  side: BorderSide(color: Colors.grey.shade300),
                                  padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                ),
                              ),
                            ),
                          ],
                        ),
                        SizedBox(height: 6),
                        Row(
                          children: [
                            Expanded(
                              child: OutlinedButton.icon(
                                onPressed: _saveAndNew,
                                icon: Icon(Icons.save, color: Colors.orange.shade700, size: 18),
                                label: Text('Save & New', style: TextStyle(fontSize: 12)),
                                style: OutlinedButton.styleFrom(
                                  foregroundColor: Colors.orange.shade700,
                                  side: BorderSide(color: Colors.orange.shade700),
                                  padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                ),
                              ),
                            ),
                            SizedBox(width: 6),
                            Expanded(
                              child: ElevatedButton.icon(
                                onPressed: _saveTeam,
                                icon: Icon(Icons.save, color: Colors.white, size: 18),
                                label: Text('Save', style: TextStyle(fontSize: 12)),
                                style: ElevatedButton.styleFrom(
                                  backgroundColor: Colors.orange.shade700,
                                  foregroundColor: Colors.white,
                                  padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                ),
                              ),
                            ),
                          ],
                        ),
                      ],
                    );
                  } else {
                    // Original horizontal layout for larger screens
                    return Row(
                      children: [
                        OutlinedButton.icon(
                          onPressed: _deleteTeam,
                          icon: Icon(Icons.delete, color: Colors.red, size: 20),
                          label: Text('Delete'),
                          style: OutlinedButton.styleFrom(
                            foregroundColor: Colors.red,
                            side: BorderSide(color: Colors.grey.shade300),
                          ),
                        ),
                        Spacer(),
                        OutlinedButton.icon(
                          onPressed: _saveAndNew,
                          icon: Icon(Icons.save, color: Colors.orange.shade700, size: 20),
                          label: Text('Save and New'),
                          style: OutlinedButton.styleFrom(
                            foregroundColor: Colors.orange.shade700,
                            side: BorderSide(color: Colors.orange.shade700),
                          ),
                        ),
                        SizedBox(width: 8),
                        ElevatedButton.icon(
                          onPressed: _saveTeam,
                          icon: Icon(Icons.save, color: Colors.white, size: 20),
                          label: Text('Save'),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.orange.shade700,
                            foregroundColor: Colors.white,
                          ),
                        ),
                      ],
                    );
                  }
                },
              ),
            ),

            // Form content
            Expanded(
              child: SingleChildScrollView(
                padding: EdgeInsets.all(12),
                child: Form(
                  key: _formKey,
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Project Team',
                        style: TextStyle(
                          fontSize: 24,
                          fontWeight: FontWeight.bold,
                          color: Colors.black87,
                        ),
                      ),
                      SizedBox(height: 24),

                      // Team Information Section
                      Container(
                        width: double.infinity,
                        padding: EdgeInsets.all(12),
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.circular(8),
                          border: Border.all(color: Colors.grey.shade300),
                        ),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            // Team Name and Unit - Made responsive
                            LayoutBuilder(
                              builder: (context, constraints) {
                                bool isSmallScreen = constraints.maxWidth < 600;

                                if (isSmallScreen) {
                                  return Column(
                                    children: [
                                      TextFormField(
                                        controller: _controllers['teamName'],
                                        decoration: InputDecoration(
                                          labelText: 'Team Name*',
                                          border: OutlineInputBorder(),
                                          contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 12),
                                        ),
                                        validator: (value) {
                                          if (value == null || value.isEmpty) {
                                            return 'Please enter team name';
                                          }
                                          return null;
                                        },
                                      ),
                                      SizedBox(height: 12),
                                      _buildDropdownField(
                                        label: 'Unit',
                                        value: _selectedUnit,
                                        items: [
                                          'Data and Quality',
                                          'Deputy Superintendent of Police Office',
                                          'Director Office'
                                        ],
                                        onChanged: (value) {
                                          setState(() {
                                            _selectedUnit = value ?? '';
                                          });
                                        },
                                        hasAddButton: true,
                                      ),
                                    ],
                                  );
                                } else {
                                  return Column(
                                    children: [
                                      Row(
                                        children: [
                                          Expanded(
                                            child: TextFormField(
                                              controller: _controllers['teamName'],
                                              decoration: InputDecoration(
                                                labelText: 'Team Name*',
                                                border: OutlineInputBorder(),
                                                contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
                                              ),
                                              validator: (value) {
                                                if (value == null || value.isEmpty) {
                                                  return 'Please enter team name';
                                                }
                                                return null;
                                              },
                                            ),
                                          ),
                                          SizedBox(width: 16),
                                          Expanded(child: Container()),
                                        ],
                                      ),
                                      SizedBox(height: 16),
                                      Row(
                                        children: [
                                          Expanded(
                                            child: _buildDropdownField(
                                              label: 'Unit',
                                              value: _selectedUnit,
                                              items: [
                                                'Data and Quality',
                                                'Deputy Superintendent of Police Office',
                                                'Director Office'
                                              ],
                                              onChanged: (value) {
                                                setState(() {
                                                  _selectedUnit = value ?? '';
                                                });
                                              },
                                              hasAddButton: true,
                                            ),
                                          ),
                                          SizedBox(width: 16),
                                          Expanded(child: Container()),
                                        ],
                                      ),
                                    ],
                                  );
                                }
                              },
                            ),
                          ],
                        ),
                      ),
                      SizedBox(height: 20),

                      // Tabs Section
                      Container(
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.circular(8),
                          border: Border.all(color: Colors.grey.shade300),
                        ),
                        child: Column(
                          children: [
                            // Tab headers
                            Container(
                              decoration: BoxDecoration(
                                border: Border(bottom: BorderSide(color: Colors.grey.shade300)),
                              ),
                              child: Row(
                                children: [
                                  GestureDetector(
                                    onTap: () => setState(() => _selectedTabIndex = 0),
                                    child: Container(
                                      padding: EdgeInsets.symmetric(horizontal: 20, vertical: 12),
                                      decoration: BoxDecoration(
                                        color: _selectedTabIndex == 0 ? Colors.orange.shade700 : Colors.transparent,
                                        borderRadius: BorderRadius.only(
                                          topLeft: Radius.circular(8),
                                        ),
                                      ),
                                      child: Row(
                                        children: [
                                          Icon(
                                            Icons.task_alt,
                                            size: 16,
                                            color: _selectedTabIndex == 0 ? Colors.white : Colors.orange.shade700,
                                          ),
                                          SizedBox(width: 8),
                                          Text(
                                            'Project Planning',
                                            style: TextStyle(
                                              color: _selectedTabIndex == 0 ? Colors.white : Colors.black87,
                                              fontWeight: FontWeight.w500,
                                            ),
                                          ),
                                        ],
                                      ),
                                    ),
                                  ),
                                  GestureDetector(
                                    onTap: () => setState(() => _selectedTabIndex = 1),
                                    child: Container(
                                      padding: EdgeInsets.symmetric(horizontal: 20, vertical: 12),
                                      decoration: BoxDecoration(
                                        color: _selectedTabIndex == 1 ? Colors.orange.shade700 : Colors.transparent,
                                      ),
                                      child: Row(
                                        children: [
                                          Icon(
                                            Icons.bug_report,
                                            size: 16,
                                            color: _selectedTabIndex == 1 ? Colors.white : Colors.orange.shade700,
                                          ),
                                          SizedBox(width: 8),
                                          Text(
                                            'Team Members',
                                            style: TextStyle(
                                              color: _selectedTabIndex == 1 ? Colors.white : Colors.black87,
                                              fontWeight: FontWeight.w500,
                                            ),
                                          ),
                                        ],
                                      ),
                                    ),
                                  ),
                                ],
                              ),
                            ),
                            // Tab content
                            Container(
                              height: 400,
                              child: _selectedTabIndex == 0 ? _buildProjectPlanningTab() : _buildTeamMembersTab(),
                            ),
                          ],
                        ),
                      ),
                      SizedBox(height: 32),
                    ],
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// Model classes
class Project {
  final String projectName;
  final String projectManager;
  final String projectBudget;
  final String startDate;
  final String endDate;
  final String category;
  final String division;
  final String unit;
  final String status;

  Project({
    required this.projectName,
    required this.projectManager,
    required this.projectBudget,
    required this.startDate,
    required this.endDate,
    required this.category,
    required this.division,
    required this.unit,
    required this.status,
  });
}

class TeamMember {
  final String userName;
  final String firstName;
  final String lastName;
  final String fullName;
  final String email;
  final String division;
  final String unit;

  TeamMember({
    required this.userName,
    required this.firstName,
    required this.lastName,
    required this.fullName,
    required this.email,
    required this.division,
    required this.unit,
  });
}

//Project Update Page
class ProjectUpdatePage extends StatefulWidget {
  @override
  _ProjectUpdatePageState createState() => _ProjectUpdatePageState();
}

class _ProjectUpdatePageState extends State<ProjectUpdatePage> {
  final ScrollController _horizontalScrollController = ScrollController();
  final TextEditingController _searchController = TextEditingController();

  // Column widths - can be adjusted
  Map<String, double> columnWidths = {
    'Checkbox': 60,
    'DateUpdated': 200,
    'KeyHighlightsActivitiesCompletedForThePeriod': 400,
    'KeyRisks': 300,
    'WorkPlannedNextSteps': 300,
    'KeyIssues': 300,
  };

  // Map column keys to data field names
  Map<String, String> columnToDataField = {
    'DateUpdated': 'dateUpdated',
    'KeyHighlightsActivitiesCompletedForThePeriod': 'keyHighlightsActivitiesCompletedForThePeriod',
    'KeyRisks': 'keyRisks',
    'WorkPlannedNextSteps': 'workPlannedNextSteps',
    'KeyIssues': 'keyIssues',
  };

  // Sorting state
  String _sortColumn = '';
  bool _sortAscending = true;

  // Pagination state
  int _currentPage = 1;
  int _pageSize = 20;
  final List<int> _pageSizeOptions = [10, 20, 50, 100];

  // Sample data structure
  List<Map<String, dynamic>> _updatesData = [
    {
      'selected': false,
      'dateUpdated': '2024-01-15',
      'keyHighlightsActivitiesCompletedForThePeriod': 'Completed user authentication module and database integration',
      'keyRisks': 'Potential delay in API integration due to third-party dependency',
      'workPlannedNextSteps': 'Implement user dashboard and notification system',
      'keyIssues': 'None at this time'
    },
    {
      'selected': false,
      'dateUpdated': '2024-01-10',
      'keyHighlightsActivitiesCompletedForThePeriod': 'Finished UI mockups and conducted user testing session',
      'keyRisks': 'Budget constraints may affect additional features',
      'workPlannedNextSteps': 'Begin development of core functionality',
      'keyIssues': 'Need approval for design changes'
    },
    {
      'selected': false,
      'dateUpdated': '2024-01-05',
      'keyHighlightsActivitiesCompletedForThePeriod': 'Project kickoff meeting and requirements gathering',
      'keyRisks': 'Unclear requirements from stakeholders',
      'workPlannedNextSteps': 'Create detailed project timeline and resource allocation',
      'keyIssues': 'Waiting for final approval on project scope'
    },
  ];

  bool _selectAll = false;

  @override
  void dispose() {
    _horizontalScrollController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  List<Map<String, dynamic>> get _filteredData {
    var filtered = _updatesData;

    // Apply search filter
    if (_searchController.text.isNotEmpty) {
      filtered = filtered.where((update) {
        return update.values.any((value) =>
            value.toString().toLowerCase().contains(_searchController.text.toLowerCase()));
      }).toList();
    }

    // Apply sorting
    if (_sortColumn.isNotEmpty) {
      String dataField = columnToDataField[_sortColumn] ?? _sortColumn;
      filtered.sort((a, b) {
        var aValue = a[dataField] ?? '';
        var bValue = b[dataField] ?? '';

        int comparison = aValue.toString().compareTo(bValue.toString());
        return _sortAscending ? comparison : -comparison;
      });
    }

    return filtered;
  }

  List<Map<String, dynamic>> get _paginatedData {
    var filtered = _filteredData;
    int startIndex = (_currentPage - 1) * _pageSize;
    int endIndex = startIndex + _pageSize;

    if (startIndex >= filtered.length) return [];
    if (endIndex > filtered.length) endIndex = filtered.length;

    return filtered.sublist(startIndex, endIndex);
  }

  int get _totalPages {
    return (_filteredData.length / _pageSize).ceil();
  }

  void _navigateToNewUpdatePage() async {
    final result = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => NewUpdatePage(),
      ),
    );

    if (result != null) {
      setState(() {
        _updatesData.add({
          'selected': false,
          'dateUpdated': result['dateUpdated'],
          'keyHighlightsActivitiesCompletedForThePeriod': result['keyHighlights'],
          'keyRisks': result['keyRisks'],
          'workPlannedNextSteps': result['workPlanned'],
          'keyIssues': result['keyIssues'],
        });
      });

      // If keepOpen flag is set, reopen the page
      if (result['keepOpen'] == true) {
        _navigateToNewUpdatePage();
      }
    }
  }

  void _refreshData() {
    setState(() {
      // Unselect all checkboxes
      for (var update in _updatesData) {
        update['selected'] = false;
      }
      _selectAll = false;
      // add actual data refresh logic here
    });
  }

  void _toggleSelectAll() {
    setState(() {
      _selectAll = !_selectAll;
      for (var update in _paginatedData) {
        update['selected'] = _selectAll;
      }
    });
  }

  void _deleteSelected() {
    setState(() {
      _updatesData.removeWhere((update) => update['selected'] == true);
      _selectAll = false;
      // Adjust current page if needed
      if (_currentPage > _totalPages && _totalPages > 0) {
        _currentPage = _totalPages;
      }
    });
  }

  void _exportData() {
    // Add export functionality here
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Export functionality would be implemented here')),
    );
  }

  void _showFilterDialog(String columnKey) {
    // Add filter dialog functionality here
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Filter ${columnKey}'),
        content: Text('Filter functionality would be implemented here'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Close'),
          ),
        ],
      ),
    );
  }

  void _sortData(String columnKey) {
    setState(() {
      if (_sortColumn == columnKey) {
        _sortAscending = !_sortAscending;
      } else {
        _sortColumn = columnKey;
        _sortAscending = true;
      }
    });
  }

  bool _hasSelectedItems() {
    return _updatesData.any((update) => update['selected'] == true);
  }

  Widget _buildResizableColumn({
    required String title,
    required String columnKey,
    required bool isLast,
    Widget? customContent,
  }) {
    return Container(
      width: columnWidths[columnKey],
      child: Row(
        children: [
          Expanded(
            child: Container(
              height: 40, // Fixed height for consistent checkbox alignment
              padding: EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.grey.shade200,
                border: Border(
                  right: BorderSide(color: Colors.grey.shade400),
                  bottom: BorderSide(color: Colors.grey.shade400),
                ),
              ),
              child: customContent ??
                  Row(
                    children: [
                      Expanded(
                        child: Text(
                          title,
                          style: TextStyle(fontWeight: FontWeight.bold, fontSize: 12),
                          overflow: TextOverflow.ellipsis,
                        ),
                      ),
                      if (columnKey == 'KeyHighlightsActivitiesCompletedForThePeriod') ...[
                        GestureDetector(
                          onTap: () => _sortData(columnKey),
                          child: Icon(
                            _sortColumn == columnKey
                                ? (_sortAscending ? Icons.arrow_upward : Icons.arrow_downward)
                                : Icons.unfold_more,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                        ),
                        SizedBox(width: 4),
                      ],
                      if (columnKey != 'Checkbox')
                        GestureDetector(
                          onTap: () => _showFilterDialog(columnKey),
                          child: Icon(
                            Icons.filter_alt_outlined,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                        ),
                    ],
                  ),
            ),
          ),
          if (!isLast)
            GestureDetector(
              onPanUpdate: (details) {
                setState(() {
                  columnWidths[columnKey] =
                      (columnWidths[columnKey]! + details.delta.dx).clamp(60.0, 400.0);
                });
              },
              child: Container(
                width: 4,
                height: 40,
                color: Colors.grey.shade400,
                child: MouseRegion(
                  cursor: SystemMouseCursors.resizeColumn,
                  child: Container(),
                ),
              ),
            ),
        ],
      ),
    );
  }

  Widget _buildDataCell(dynamic data, String columnKey, {Widget? customContent}) {
    return Container(
      width: columnWidths[columnKey],
      height: 40, // Fixed height for consistent alignment
      padding: EdgeInsets.all(8),
      decoration: BoxDecoration(
        border: Border(
          right: BorderSide(color: Colors.grey.shade400),
          bottom: BorderSide(color: Colors.grey.shade400),
        ),
      ),
      child: Align(
        alignment: Alignment.centerLeft,
        child: customContent ??
            Text(
              data.toString(),
              style: TextStyle(fontSize: 12),
              overflow: TextOverflow.ellipsis,
            ),
      ),
    );
  }

  Widget _buildPaginationControls() {
    return Container(
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        border: Border(
          top: BorderSide(color: Colors.grey.shade300, width: 1),
        ),
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          // Page numbers
          Row(
            children: [
              for (int i = 1; i <= _totalPages && i <= 4; i++)
                GestureDetector(
                  onTap: () {
                    setState(() {
                      _currentPage = i;
                    });
                  },
                  child: Container(
                    margin: EdgeInsets.symmetric(horizontal: 4),
                    padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                    decoration: BoxDecoration(
                      color: _currentPage == i ? Colors.orange.shade700 : Colors.transparent,
                      borderRadius: BorderRadius.circular(4),
                    ),
                    child: Text(
                      i.toString(),
                      style: TextStyle(
                        color: _currentPage == i ? Colors.white : Colors.black,
                        fontWeight: _currentPage == i ? FontWeight.bold : FontWeight.normal,
                      ),
                    ),
                  ),
                ),
            ],
          ),
          // Page size selector
          Row(
            children: [
              Text('Page Size: ', style: TextStyle(fontSize: 14)),
              DropdownButton<int>(
                value: _pageSize,
                items: _pageSizeOptions.map((size) {
                  return DropdownMenuItem<int>(
                    value: size,
                    child: Text(size.toString()),
                  );
                }).toList(),
                onChanged: (value) {
                  setState(() {
                    _pageSize = value!;
                    _currentPage = 1; // Reset to first page
                  });
                },
              ),
            ],
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        color: Colors.grey.shade50,
        child: Column(
          children: [
            // Header with buttons and search
            Container(
              width: double.infinity, // Full width
              padding: EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.white,
                border: Border(
                  bottom: BorderSide(color: Colors.grey.shade300, width: 1),
                ),
              ),
              child: LayoutBuilder(
                builder: (context, constraints) {
                  final isSmallScreen = constraints.maxWidth < 600;
                  final buttonStyle = OutlinedButton.styleFrom(
                    padding: isSmallScreen
                        ? EdgeInsets.symmetric(horizontal: 6, vertical: 4)
                        : EdgeInsets.symmetric(horizontal: 8, vertical: 6),
                    textStyle: TextStyle(
                      fontSize: isSmallScreen ? 12 : 14,
                    ),
                    minimumSize: Size(0, isSmallScreen ? 30 : 36),
                    side: BorderSide(color: Colors.grey.shade300),
                  );

                  return SingleChildScrollView(
                    scrollDirection: Axis.horizontal,
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.start, // Left-aligned content
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        // New Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _navigateToNewUpdatePage,
                            icon: Icon(Icons.add, color: Colors.orange.shade700, size: 20),
                            padding: EdgeInsets.all(4),
                            tooltip: 'New',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _navigateToNewUpdatePage,
                            icon: Icon(Icons.add, color: Colors.orange.shade700, size: 20),
                            label: Text('New'),
                            style: buttonStyle.copyWith(
                              backgroundColor: MaterialStateProperty.all(Colors.white),
                              foregroundColor: MaterialStateProperty.all(Colors.black),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Delete Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _hasSelectedItems() ? _deleteSelected : null,
                            icon: Icon(Icons.delete,
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                                size: 20
                            ),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Delete',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _hasSelectedItems() ? _deleteSelected : null,
                            icon: Icon(Icons.delete,
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                                size: 20
                            ),
                            label: Text(
                              'Delete',
                              style: TextStyle(
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                              ),
                            ),
                            style: buttonStyle.copyWith(
                              foregroundColor: MaterialStateProperty.all(
                                _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                              ),
                              side: MaterialStateProperty.all(
                                BorderSide(color: Colors.grey.shade300),
                              ),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Search Field
                        Container(
                          width: isSmallScreen ? 180 : 300,
                          child: TextField(
                            controller: _searchController,
                            onChanged: (value) {
                              setState(() {
                                _currentPage = 1;
                              });
                            },
                            decoration: InputDecoration(
                              isDense: true,
                              hintText: 'Search...',
                              suffixIcon: Icon(Icons.search, color: Colors.orange.shade700),
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(4),
                              ),
                              contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                            ),
                          ),
                        ),

                        SizedBox(width: 12),

                        // Export Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _exportData,
                            icon: Icon(Icons.download, color: Colors.orange.shade700, size: 20),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Export',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _exportData,
                            icon: Icon(Icons.download, color: Colors.orange.shade700, size: 20),
                            label: Text('Export'),
                            style: buttonStyle.copyWith(
                              backgroundColor: MaterialStateProperty.all(Colors.white),
                              foregroundColor: MaterialStateProperty.all(Colors.black),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Refresh Button
                        IconButton(
                          onPressed: _refreshData,
                          icon: Icon(Icons.refresh, color: Colors.orange.shade700, size: 20),
                          padding: EdgeInsets.all(4),
                          tooltip: 'Refresh',
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),

            // Table area
            Expanded(
              child: Container(
                margin: EdgeInsets.all(16),
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.grey.shade300),
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(4),
                ),
                child: Column(
                  children: [
                    // Table with synchronized scrolling
                    Expanded(
                      child: _paginatedData.isEmpty
                          ? Center(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(
                              Icons.folder_open,
                              size: 64,
                              color: Colors.grey.shade400,
                            ),
                            SizedBox(height: 16),
                            Text(
                              'No updates found',
                              style: TextStyle(
                                fontSize: 18,
                                color: Colors.grey.shade600,
                              ),
                            ),
                            SizedBox(height: 8),
                            Text(
                              'Click "New" to add your first update',
                              style: TextStyle(
                                fontSize: 14,
                                color: Colors.grey.shade500,
                              ),
                            ),
                          ],
                        ),
                      )
                          : SingleChildScrollView(
                        controller: _horizontalScrollController,
                        scrollDirection: Axis.horizontal,
                        child: Column(
                          children: [
                            // Table header
                            Row(
                              children: [
                                _buildResizableColumn(
                                  title: '',
                                  columnKey: 'Checkbox',
                                  isLast: false,
                                  customContent: Center(
                                    child: Checkbox(
                                      value: _selectAll,
                                      onChanged: (value) => _toggleSelectAll(),
                                    ),
                                  ),
                                ),
                                _buildResizableColumn(
                                  title: 'Date Updated',
                                  columnKey: 'DateUpdated',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Key Highlights/Activities Completed for the Period',
                                  columnKey: 'KeyHighlightsActivitiesCompletedForThePeriod',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Key Risks',
                                  columnKey: 'KeyRisks',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Work Planned: Next Steps',
                                  columnKey: 'WorkPlannedNextSteps',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Key Issues',
                                  columnKey: 'KeyIssues',
                                  isLast: true,
                                ),
                              ],
                            ),

                            // Table body
                            Expanded(
                              child: SingleChildScrollView(
                                child: Column(
                                  children: _paginatedData.map((update) {
                                    return Row(
                                      children: [
                                        _buildDataCell(
                                          '',
                                          'Checkbox',
                                          customContent: Center(
                                            child: Checkbox(
                                              value: update['selected'],
                                              onChanged: (value) {
                                                setState(() {
                                                  update['selected'] = value;
                                                });
                                              },
                                            ),
                                          ),
                                        ),
                                        _buildDataCell(update['dateUpdated'] ?? '', 'DateUpdated'),
                                        _buildDataCell(update['keyHighlightsActivitiesCompletedForThePeriod'] ?? '', 'KeyHighlightsActivitiesCompletedForThePeriod'),
                                        _buildDataCell(update['keyRisks'] ?? '', 'KeyRisks'),
                                        _buildDataCell(update['workPlannedNextSteps'] ?? '', 'WorkPlannedNextSteps'),
                                        _buildDataCell(update['keyIssues'] ?? '', 'KeyIssues'),
                                      ],
                                    );
                                  }).toList(),
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                    // Pagination controls
                    if (_totalPages > 0) _buildPaginationControls(),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// New Update Page
class NewUpdatePage extends StatefulWidget {
  @override
  _NewUpdatePageState createState() => _NewUpdatePageState();
}

class _NewUpdatePageState extends State<NewUpdatePage> {
  final _formKey = GlobalKey<FormState>();
  final Map<String, TextEditingController> _controllers = {};

  @override
  void initState() {
    super.initState();
    // Initialize controllers for all form fields
    [
      'dateUpdated',
      'keyHighlights',
      'workPlanned',
      'keyRisks',
      'keyIssues'
    ].forEach((field) {
      _controllers[field] = TextEditingController();
    });

    // Set default date to today
    _controllers['dateUpdated']?.text = _formatDate(DateTime.now());
  }

  @override
  void dispose() {
    _controllers.values.forEach((controller) => controller.dispose());
    super.dispose();
  }

  String _formatDate(DateTime date) {
    return '${date.month}/${date.day}/${date.year}';
  }

  void _saveUpdate() {
    if (_formKey.currentState!.validate()) {
      // Prepare the data to return
      Map<String, dynamic> formData = {
        'dateUpdated': _controllers['dateUpdated']!.text,
        'keyHighlights': _controllers['keyHighlights']!.text,
        'workPlanned': _controllers['workPlanned']!.text,
        'keyRisks': _controllers['keyRisks']!.text,
        'keyIssues': _controllers['keyIssues']!.text,
        'keepOpen': false,
      };

      Navigator.pop(context, formData);
    }
  }

  void _saveAndNew() {
    if (_formKey.currentState!.validate()) {
      // Prepare the data to return
      Map<String, dynamic> formData = {
        'dateUpdated': _controllers['dateUpdated']!.text,
        'keyHighlights': _controllers['keyHighlights']!.text,
        'workPlanned': _controllers['workPlanned']!.text,
        'keyRisks': _controllers['keyRisks']!.text,
        'keyIssues': _controllers['keyIssues']!.text,
        'keepOpen': true,
      };

      Navigator.pop(context, formData);
    }
  }

  void _deleteUpdate() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Delete Update'),
          content: Text('Are you sure you want to delete this update?'),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: Text('Cancel'),
            ),
            TextButton(
              onPressed: () {
                Navigator.pop(context);
                Navigator.pop(context);
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('Update deleted successfully!')),
                );
              },
              child: Text('Delete', style: TextStyle(color: Colors.red)),
            ),
          ],
        );
      },
    );
  }

  void _refreshData() {
    setState(() {
      // Refresh the data
    });
  }

  Widget _buildDateField({
    required String label,
    required String controllerKey,
    bool isRequired = false,
  }) {
    return TextFormField(
      controller: _controllers[controllerKey],
      decoration: InputDecoration(
        labelText: isRequired ? '$label*' : label,
        border: OutlineInputBorder(),
        contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
        suffixIcon: Icon(Icons.calendar_today, size: 20),
      ),
      readOnly: true,
      onTap: () async {
        DateTime? picked = await showDatePicker(
          context: context,
          initialDate: DateTime.now(),
          firstDate: DateTime(2000),
          lastDate: DateTime(2100),
        );
        if (picked != null) {
          _controllers[controllerKey]?.text = _formatDate(picked);
        }
      },
      validator: isRequired ? (value) {
        if (value == null || value.isEmpty) {
          return 'Please select a $label';
        }
        return null;
      } : null,
    );
  }

  Widget _buildTextAreaField({
    required String label,
    required String controllerKey,
    bool isRequired = false,
    int maxLines = 6,
  }) {
    return TextFormField(
      controller: _controllers[controllerKey],
      decoration: InputDecoration(
        labelText: isRequired ? '$label*' : label,
        border: OutlineInputBorder(),
        contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
        alignLabelWithHint: true,
      ),
      maxLines: maxLines,
      validator: isRequired ? (value) {
        if (value == null || value.isEmpty) {
          return 'Please enter $label';
        }
        return null;
      } : null,
    );
  }

  Widget _buildCompactTableHeader(String title) {
    return Container(
      width: 120,
      padding: EdgeInsets.symmetric(horizontal: 4),
      child: Row(
        children: [
          Expanded(
            child: Text(
              title,
              style: TextStyle(fontWeight: FontWeight.w600, fontSize: 10),
              overflow: TextOverflow.ellipsis,
            ),
          ),
          Icon(Icons.filter_list, size: 10, color: Colors.grey),
        ],
      ),
    );
  }

  Widget _buildTableCell(String text, {int flex = 1}) {
    return Expanded(
      flex: flex,
      child: Text(
        text.isEmpty ? '-' : text,
        style: TextStyle(fontSize: 12),
        overflow: TextOverflow.ellipsis,
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Project Update'),
        backgroundColor: Colors.white,
        foregroundColor: Colors.black,
        elevation: 0,
        actions: [
          IconButton(
            onPressed: () => Navigator.pop(context),
            icon: Icon(Icons.arrow_back),
          ),
          IconButton(
            onPressed: () => Navigator.pop(context),
            icon: Icon(Icons.arrow_forward),
          ),
          IconButton(
            onPressed: _refreshData,
            icon: Icon(Icons.refresh),
          ),
        ],
      ),
      body: Container(
        color: Colors.grey.shade50,
        child: Column(
          children: [
            // Action buttons - Made responsive with overflow handling
            Container(
              padding: EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.white,
                border: Border(
                  bottom: BorderSide(color: Colors.grey.shade300, width: 1),
                ),
              ),
              child: LayoutBuilder(
                builder: (context, constraints) {
                  bool isSmallScreen = constraints.maxWidth < 600;

                  if (isSmallScreen) {
                    return Column(
                      children: [
                        Row(
                          children: [
                            Expanded(
                              child: OutlinedButton.icon(
                                onPressed: _deleteUpdate,
                                icon: Icon(Icons.delete, color: Colors.red.shade400, size: 18),
                                label: Text('Delete', style: TextStyle(fontSize: 12)),
                                style: OutlinedButton.styleFrom(
                                  foregroundColor: Colors.red.shade400,
                                  side: BorderSide(color: Colors.grey.shade300),
                                  padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                ),
                              ),
                            ),
                          ],
                        ),
                        SizedBox(height: 6),
                        Row(
                          children: [
                            Expanded(
                              child: OutlinedButton.icon(
                                onPressed: _saveAndNew,
                                icon: Icon(Icons.save, color: Colors.orange.shade700, size: 18),
                                label: Text('Save & New', style: TextStyle(fontSize: 12)),
                                style: OutlinedButton.styleFrom(
                                  foregroundColor: Colors.orange.shade700,
                                  side: BorderSide(color: Colors.orange.shade700),
                                  padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                ),
                              ),
                            ),
                            SizedBox(width: 6),
                            Expanded(
                              child: ElevatedButton.icon(
                                onPressed: _saveUpdate,
                                icon: Icon(Icons.save, color: Colors.white, size: 18),
                                label: Text('Save', style: TextStyle(fontSize: 12)),
                                style: ElevatedButton.styleFrom(
                                  backgroundColor: Colors.orange.shade700,
                                  foregroundColor: Colors.white,
                                  padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                ),
                              ),
                            ),
                          ],
                        ),
                      ],
                    );
                  } else {
                    return Row(
                      children: [
                        OutlinedButton.icon(
                          onPressed: _deleteUpdate,
                          icon: Icon(Icons.delete, color: Colors.red.shade400, size: 20),
                          label: Text('Delete'),
                          style: OutlinedButton.styleFrom(
                            foregroundColor: Colors.red.shade400,
                            side: BorderSide(color: Colors.grey.shade300),
                          ),
                        ),
                        Spacer(),
                        OutlinedButton.icon(
                          onPressed: _saveAndNew,
                          icon: Icon(Icons.save, color: Colors.orange.shade700, size: 20),
                          label: Text('Save and New'),
                          style: OutlinedButton.styleFrom(
                            foregroundColor: Colors.orange.shade700,
                            side: BorderSide(color: Colors.orange.shade700),
                          ),
                        ),
                        SizedBox(width: 8),
                        ElevatedButton.icon(
                          onPressed: _saveUpdate,
                          icon: Icon(Icons.save, color: Colors.white, size: 20),
                          label: Text('Save'),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.orange.shade700,
                            foregroundColor: Colors.white,
                          ),
                        ),
                      ],
                    );
                  }
                },
              ),
            ),

            // Form content
            Expanded(
              child: SingleChildScrollView(
                padding: EdgeInsets.all(12),
                child: Form(
                  key: _formKey,
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Project Update',
                        style: TextStyle(
                          fontSize: 24,
                          fontWeight: FontWeight.bold,
                          color: Colors.black87,
                        ),
                      ),
                      SizedBox(height: 20),

                      // Date Updated - Made responsive
                      LayoutBuilder(
                        builder: (context, constraints) {
                          bool isSmallScreen = constraints.maxWidth < 600;
                          return isSmallScreen
                              ? Column(
                            children: [
                              _buildDateField(
                                label: 'Date Updated',
                                controllerKey: 'dateUpdated',
                                isRequired: true,
                              ),
                              SizedBox(height: 12),
                            ],
                          )
                              : Row(
                            children: [
                              Expanded(
                                child: _buildDateField(
                                  label: 'Date Updated',
                                  controllerKey: 'dateUpdated',
                                  isRequired: true,
                                ),
                              ),
                              SizedBox(width: 16),
                              Expanded(child: Container()), // Empty space for alignment
                            ],
                          );
                        },
                      ),
                      SizedBox(height: 20),

                      // Key Highlights / Activities Completed for the Period
                      _buildTextAreaField(
                        label: 'Key Highlights / Activities Completed for the Period',
                        controllerKey: 'keyHighlights',
                        isRequired: false,
                      ),
                      SizedBox(height: 20),

                      // Work Planned and Key Risks - Made responsive
                      LayoutBuilder(
                        builder: (context, constraints) {
                          bool isSmallScreen = constraints.maxWidth < 600;
                          return isSmallScreen
                              ? Column(
                            children: [
                              _buildTextAreaField(
                                label: 'Work Planned: Next Steps',
                                controllerKey: 'workPlanned',
                                isRequired: false,
                              ),
                              SizedBox(height: 12),
                              _buildTextAreaField(
                                label: 'Key Risks',
                                controllerKey: 'keyRisks',
                                isRequired: false,
                              ),
                            ],
                          )
                              : Row(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Expanded(
                                child: _buildTextAreaField(
                                  label: 'Work Planned: Next Steps',
                                  controllerKey: 'workPlanned',
                                  isRequired: false,
                                ),
                              ),
                              SizedBox(width: 16),
                              Expanded(
                                child: _buildTextAreaField(
                                  label: 'Key Risks',
                                  controllerKey: 'keyRisks',
                                  isRequired: false,
                                ),
                              ),
                            ],
                          );
                        },
                      ),
                      SizedBox(height: 20),

                      // Key Issues
                      _buildTextAreaField(
                        label: 'Key Issues',
                        controllerKey: 'keyIssues',
                        isRequired: false,
                      ),
                      SizedBox(height: 20),

                      // Project Tasks Section
                      Container(
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.circular(8),
                          border: Border.all(color: Colors.grey.shade300),
                        ),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            // Project Tasks header with controls
                            Container(
                              padding: EdgeInsets.all(12),
                              decoration: BoxDecoration(
                                color: Colors.grey.shade50,
                                borderRadius: BorderRadius.only(
                                  topLeft: Radius.circular(8),
                                  topRight: Radius.circular(8),
                                ),
                              ),
                              child: SingleChildScrollView(
                                scrollDirection: Axis.horizontal,
                                child: Row(
                                  children: [
                                    Icon(Icons.task, color: Colors.orange.shade700, size: 20),
                                    SizedBox(width: 8),
                                    Text(
                                      'Project Tasks',
                                      style: TextStyle(
                                        fontSize: 16,
                                        fontWeight: FontWeight.w600,
                                        color: Colors.black87,
                                      ),
                                    ),
                                    SizedBox(width: 8),
                                    OutlinedButton.icon(
                                      onPressed: () {},
                                      icon: Icon(Icons.add, size: 16),
                                      label: Text('New'),
                                      style: OutlinedButton.styleFrom(
                                        padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                                        minimumSize: Size(0, 36),
                                        side: BorderSide(color: Colors.grey.shade300),
                                      ),
                                    ),
                                    SizedBox(width: 8),
                                    OutlinedButton.icon(
                                      onPressed: () {},
                                      icon: Icon(Icons.link, size: 16),
                                      label: Text('Link'),
                                      style: OutlinedButton.styleFrom(
                                        padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                                        minimumSize: Size(0, 36),
                                        side: BorderSide(color: Colors.grey.shade300),
                                      ),
                                    ),
                                    SizedBox(width: 8),
                                    OutlinedButton.icon(
                                      onPressed: () {},
                                      icon: Icon(Icons.link_off, size: 16),
                                      label: Text('Unlink'),
                                      style: OutlinedButton.styleFrom(
                                        padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                                        minimumSize: Size(0, 36),
                                        side: BorderSide(color: Colors.grey.shade300),
                                      ),
                                    ),
                                    SizedBox(width: 8),
                                    OutlinedButton.icon(
                                      onPressed: () {},
                                      icon: Icon(Icons.delete, size: 16, color: Colors.red),
                                      label: Text('Delete'),
                                      style: OutlinedButton.styleFrom(
                                        foregroundColor: Colors.red,
                                        padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                                        minimumSize: Size(0, 36),
                                        side: BorderSide(color: Colors.grey.shade300),
                                      ),
                                    ),
                                    SizedBox(width: 8),
                                    OutlinedButton.icon(
                                      onPressed: () {},
                                      icon: Icon(Icons.check_circle, size: 16, color: Colors.green),
                                      label: Text('Complete'),
                                      style: OutlinedButton.styleFrom(
                                        foregroundColor: Colors.green,
                                        padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                                        minimumSize: Size(0, 36),
                                        side: BorderSide(color: Colors.grey.shade300),
                                      ),
                                    ),
                                    SizedBox(width: 8),
                                    Container(
                                      width: 180,
                                      child: TextField(
                                        decoration: InputDecoration(
                                          isDense: true,
                                          hintText: 'Search...',
                                          prefixIcon: Icon(Icons.search, size: 16),
                                          border: OutlineInputBorder(
                                            borderRadius: BorderRadius.circular(4),
                                            borderSide: BorderSide(color: Colors.grey.shade300),
                                          ),
                                          contentPadding: EdgeInsets.symmetric(vertical: 8, horizontal: 8),
                                        ),
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ),
                            // Table header
                            Container(
                              padding: EdgeInsets.symmetric(horizontal: 8, vertical: 12),
                              decoration: BoxDecoration(
                                border: Border(bottom: BorderSide(color: Colors.grey.shade300)),
                              ),
                              child: SingleChildScrollView(
                                scrollDirection: Axis.horizontal,
                                child: Row(
                                  children: [
                                    Container(width: 40, child: Checkbox(value: false, onChanged: (_) {})),
                                    SizedBox(width: 8),
                                    _buildCompactTableHeader('Task Subject'),
                                    _buildCompactTableHeader('Task Status'),
                                    _buildCompactTableHeader('Assigned To'),
                                    _buildCompactTableHeader('Task Start Date'),
                                    _buildCompactTableHeader('Task End Date'),
                                    _buildCompactTableHeader('Project Name'),
                                  ],
                                ),
                              ),
                            ),
                            // Table content
                            Container(
                              padding: EdgeInsets.all(16),
                              height: 200,
                              child: Center(
                                child: Text(
                                  'No data to display',
                                  style: TextStyle(
                                    color: Colors.grey.shade600,
                                    fontSize: 16,
                                  ),
                                ),
                              ),
                            ),
                            // Pagination
                            Container(
                              padding: EdgeInsets.symmetric(vertical: 16),
                              child: Row(
                                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                children: [
                                  Container(
                                    padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                                    decoration: BoxDecoration(
                                      color: Colors.orange.shade700,
                                      borderRadius: BorderRadius.circular(4),
                                    ),
                                    child: Text('1', style: TextStyle(color: Colors.white, fontWeight: FontWeight.w600)),
                                  ),
                                  Row(
                                    children: [
                                      Text('Page Size: '),
                                      DropdownButton<int>(
                                        value: 20,
                                        items: [10, 20, 50, 100].map((size) => DropdownMenuItem(
                                          value: size,
                                          child: Text(size.toString()),
                                        )).toList(),
                                        onChanged: (value) {},
                                        underline: Container(),
                                      ),
                                    ],
                                  ),
                                ],
                              ),
                            ),
                          ],
                        ),
                      ),
                      SizedBox(height: 32),
                    ],
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}


//Area Page
class AreaPage extends StatefulWidget {
  @override
  _AreaPageState createState() => _AreaPageState();
}

class _AreaPageState extends State<AreaPage> {
  final ScrollController _horizontalScrollController = ScrollController();
  final TextEditingController _searchController = TextEditingController();

  // Column widths - can be adjusted
  Map<String, double> columnWidths = {
    'Checkbox': 60,
    'AreaName': 750,
    'AreaCode': 750,
  };

  // Map column keys to data field names
  Map<String, String> columnToDataField = {
    'AreaName': 'areaName',
    'AreaCode': 'areaCode',
  };

  // Sorting state
  String _sortColumn = '';
  bool _sortAscending = true;

  // Pagination state
  int _currentPage = 1;
  int _pageSize = 20;
  final List<int> _pageSizeOptions = [10, 20, 50, 100];

  // Sample data structure
  List<Map<String, dynamic>> _areasData = [
    {
      'selected': false,
      'areaName': 'Area 1',
      'areaCode': 'A1',
    },
    {
      'selected': false,
      'areaName': 'Area 2',
      'areaCode': 'A2',
    },
  ];

  bool _selectAll = false;

  @override
  void dispose() {
    _horizontalScrollController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  List<Map<String, dynamic>> get _filteredData {
    var filtered = _areasData;

    // Apply search filter
    if (_searchController.text.isNotEmpty) {
      filtered = filtered.where((area) {
        return area.values.any((value) =>
            value.toString().toLowerCase().contains(_searchController.text.toLowerCase()));
      }).toList();
    }

    // Apply sorting
    if (_sortColumn.isNotEmpty) {
      String dataField = columnToDataField[_sortColumn] ?? _sortColumn;
      filtered.sort((a, b) {
        var aValue = a[dataField] ?? '';
        var bValue = b[dataField] ?? '';

        int comparison = aValue.toString().compareTo(bValue.toString());
        return _sortAscending ? comparison : -comparison;
      });
    }

    return filtered;
  }

  List<Map<String, dynamic>> get _paginatedData {
    var filtered = _filteredData;
    int startIndex = (_currentPage - 1) * _pageSize;
    int endIndex = startIndex + _pageSize;

    if (startIndex >= filtered.length) return [];
    if (endIndex > filtered.length) endIndex = filtered.length;

    return filtered.sublist(startIndex, endIndex);
  }

  int get _totalPages {
    return (_filteredData.length / _pageSize).ceil();
  }

  void _refreshData() {
    setState(() {
      // Unselect all checkboxes
      for (var area in _areasData) {
        area['selected'] = false;
      }
      _selectAll = false;
      // add actual data refresh logic here
    });
  }

  void _navigateToNewAreaPage() async {
    final result = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => NewAreaPage(),
      ),
    );

    if (result != null) {
      setState(() {
        _areasData.add({
          'selected': false,
          'areaName': result['areaName'],
          'areaCode': result['areaCode'],
        });
      });

      // If keepOpen flag is set, reopen the page
      if (result['keepOpen'] == true) {
        _navigateToNewAreaPage();
      }
    }
  }

  void _toggleSelectAll() {
    setState(() {
      _selectAll = !_selectAll;
      for (var area in _paginatedData) {
        area['selected'] = _selectAll;
      }
    });
  }

  void _deleteSelected() {
    setState(() {
      _areasData.removeWhere((area) => area['selected'] == true);
      _selectAll = false;
      // Adjust current page if needed
      if (_currentPage > _totalPages && _totalPages > 0) {
        _currentPage = _totalPages;
      }
    });

  }

  void _exportData() {
    // Add export functionality here
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Export functionality would be implemented here')),
    );
  }

  void _showFilterDialog(String columnKey) {
    // Add filter dialog functionality here
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Filter ${columnKey}'),
        content: Text('Filter functionality would be implemented here'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Close'),
          ),
        ],
      ),
    );
  }


  void _sortData(String columnKey) {
    setState(() {
      if (_sortColumn == columnKey) {
        _sortAscending = !_sortAscending;
      } else {
        _sortColumn = columnKey;
        _sortAscending = true;
      }
    });
  }

  bool _hasSelectedItems() {
    return _areasData.any((area) => area['selected'] == true);
  }

  Widget _buildResizableColumn({
    required String title,
    required String columnKey,
    required bool isLast,
    Widget? customContent,
  }) {
    return Container(
      width: columnWidths[columnKey],
      child: Row(
        children: [
          Expanded(
            child: Container(
              height: 40, // Fixed height for consistent checkbox alignment
              padding: EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.grey.shade200,
                border: Border(
                  right: BorderSide(color: Colors.grey.shade400),
                  bottom: BorderSide(color: Colors.grey.shade400),
                ),
              ),
              child: customContent ??
                  Row(
                    children: [
                      Expanded(
                        child: Text(
                          title,
                          style: TextStyle(fontWeight: FontWeight.bold, fontSize: 12),
                          overflow: TextOverflow.ellipsis,
                        ),
                      ),
                      if (columnKey == 'AreaName') ...[
                        GestureDetector(
                          onTap: () => _sortData(columnKey),
                          child: Icon(
                            _sortColumn == columnKey
                                ? (_sortAscending ? Icons.arrow_upward : Icons.arrow_downward)
                                : Icons.unfold_more,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                        ),
                        SizedBox(width: 4),
                      ],
                      if (columnKey != 'Checkbox')
                        GestureDetector(
                          onTap: () => _showFilterDialog(columnKey),
                          child: Icon(
                            Icons.filter_alt_outlined,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                        ),
                    ],
                  ),
            ),
          ),
          if (!isLast)
            GestureDetector(
              onPanUpdate: (details) {
                setState(() {
                  columnWidths[columnKey] =
                      (columnWidths[columnKey]! + details.delta.dx).clamp(60.0, 400.0);
                });
              },
              child: Container(
                width: 4,
                height: 40,
                color: Colors.grey.shade400,
                child: MouseRegion(
                  cursor: SystemMouseCursors.resizeColumn,
                  child: Container(),
                ),
              ),
            ),
        ],
      ),
    );
  }

  Widget _buildDataCell(dynamic data, String columnKey, {Widget? customContent}) {
    return Container(
      width: columnWidths[columnKey],
      height: 40, // Fixed height for consistent alignment
      padding: EdgeInsets.all(8),
      decoration: BoxDecoration(
        border: Border(
          right: BorderSide(color: Colors.grey.shade400),
          bottom: BorderSide(color: Colors.grey.shade400),
        ),
      ),
      child: Align(
        alignment: Alignment.centerLeft,
        child: customContent ??
            Text(
              data.toString(),
              style: TextStyle(fontSize: 12),
              overflow: TextOverflow.ellipsis,
            ),
      ),
    );
  }

  Widget _buildPaginationControls() {
    return Container(
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        border: Border(
          top: BorderSide(color: Colors.grey.shade300, width: 1),
        ),
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          // Page numbers
          Row(
            children: [
              for (int i = 1; i <= _totalPages && i <= 4; i++)
                GestureDetector(
                  onTap: () {
                    setState(() {
                      _currentPage = i;
                    });
                  },
                  child: Container(
                    margin: EdgeInsets.symmetric(horizontal: 4),
                    padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                    decoration: BoxDecoration(
                      color: _currentPage == i ? Colors.orange.shade700 : Colors.transparent,
                      borderRadius: BorderRadius.circular(4),
                    ),
                    child: Text(
                      i.toString(),
                      style: TextStyle(
                        color: _currentPage == i ? Colors.white : Colors.black,
                        fontWeight: _currentPage == i ? FontWeight.bold : FontWeight.normal,
                      ),
                    ),
                  ),
                ),
            ],
          ),
          // Page size selector
          Row(
            children: [
              Text('Page Size: ', style: TextStyle(fontSize: 14)),
              DropdownButton<int>(
                value: _pageSize,
                items: _pageSizeOptions.map((size) {
                  return DropdownMenuItem<int>(
                    value: size,
                    child: Text(size.toString()),
                  );
                }).toList(),
                onChanged: (value) {
                  setState(() {
                    _pageSize = value!;
                    _currentPage = 1; // Reset to first page
                  });
                },
              ),
            ],
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        color: Colors.grey.shade50,
        child: Column(
          children: [
            // Header with buttons and search
            Container(
              width: double.infinity, // Full width
              padding: EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.white,
                border: Border(
                  bottom: BorderSide(color: Colors.grey.shade300, width: 1),
                ),
              ),
              child: LayoutBuilder(
                builder: (context, constraints) {
                  final isSmallScreen = constraints.maxWidth < 600;
                  final buttonStyle = OutlinedButton.styleFrom(
                    padding: isSmallScreen
                        ? EdgeInsets.symmetric(horizontal: 6, vertical: 4)
                        : EdgeInsets.symmetric(horizontal: 8, vertical: 6),
                    textStyle: TextStyle(
                      fontSize: isSmallScreen ? 12 : 14,
                    ),
                    minimumSize: Size(0, isSmallScreen ? 30 : 36),
                    side: BorderSide(color: Colors.grey.shade300),
                  );

                  return SingleChildScrollView(
                    scrollDirection: Axis.horizontal,
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.start, // Left-aligned content
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        // New Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _navigateToNewAreaPage,
                            icon: Icon(Icons.add, color: Colors.orange.shade700, size: 20),
                            padding: EdgeInsets.all(4),
                            tooltip: 'New',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _navigateToNewAreaPage,
                            icon: Icon(Icons.add, color: Colors.orange.shade700, size: 20),
                            label: Text('New'),
                            style: buttonStyle.copyWith(
                              backgroundColor: MaterialStateProperty.all(Colors.white),
                              foregroundColor: MaterialStateProperty.all(Colors.black),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Delete Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _hasSelectedItems() ? _deleteSelected : null,
                            icon: Icon(Icons.delete,
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                                size: 20
                            ),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Delete',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _hasSelectedItems() ? _deleteSelected : null,
                            icon: Icon(Icons.delete,
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                                size: 20
                            ),
                            label: Text(
                              'Delete',
                              style: TextStyle(
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                              ),
                            ),
                            style: buttonStyle.copyWith(
                              foregroundColor: MaterialStateProperty.all(
                                _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                              ),
                              side: MaterialStateProperty.all(
                                BorderSide(color: Colors.grey.shade300),
                              ),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Search Field
                        Container(
                          width: isSmallScreen ? 180 : 300,
                          child: TextField(
                            controller: _searchController,
                            onChanged: (value) {
                              setState(() {
                                _currentPage = 1;
                              });
                            },
                            decoration: InputDecoration(
                              isDense: true,
                              hintText: 'Search...',
                              suffixIcon: Icon(Icons.search, color: Colors.orange.shade700),
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(4),
                              ),
                              contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                            ),
                          ),
                        ),

                        SizedBox(width: 12),

                        // Export Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _exportData,
                            icon: Icon(Icons.download, color: Colors.orange.shade700, size: 20),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Export',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _exportData,
                            icon: Icon(Icons.download, color: Colors.orange.shade700, size: 20),
                            label: Text('Export'),
                            style: buttonStyle.copyWith(
                              backgroundColor: MaterialStateProperty.all(Colors.white),
                              foregroundColor: MaterialStateProperty.all(Colors.black),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Refresh Button
                        IconButton(
                          onPressed: _refreshData,
                          icon: Icon(Icons.refresh, color: Colors.orange.shade700, size: 20),
                          padding: EdgeInsets.all(4),
                          tooltip: 'Refresh',
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),

            // Table area
            Expanded(
              child: Container(
                margin: EdgeInsets.all(16),
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.grey.shade300),
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(4),
                ),
                child: Column(
                  children: [
                    // Table with synchronized scrolling
                    Expanded(
                      child: _paginatedData.isEmpty
                          ? Center(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(
                              Icons.folder_open,
                              size: 64,
                              color: Colors.grey.shade400,
                            ),
                            SizedBox(height: 16),
                            Text(
                              'No areas found',
                              style: TextStyle(
                                fontSize: 18,
                                color: Colors.grey.shade600,
                              ),
                            ),
                            SizedBox(height: 8),
                            Text(
                              'Click "New" to add your first area',
                              style: TextStyle(
                                fontSize: 14,
                                color: Colors.grey.shade500,
                              ),
                            ),
                          ],
                        ),
                      )
                          : SingleChildScrollView(
                        controller: _horizontalScrollController,
                        scrollDirection: Axis.horizontal,
                        child: Column(
                          children: [
                            // Table header
                            Row(
                              children: [
                                _buildResizableColumn(
                                  title: '',
                                  columnKey: 'Checkbox',
                                  isLast: false,
                                  customContent: Center(
                                    child: Checkbox(
                                      value: _selectAll,
                                      onChanged: (value) => _toggleSelectAll(),
                                    ),
                                  ),
                                ),
                                _buildResizableColumn(
                                  title: 'Area Name',
                                  columnKey: 'AreaName',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Area Code',
                                  columnKey: 'AreaCode',
                                  isLast: true,
                                ),
                              ],
                            ),

                            // Table body
                            Expanded(
                              child: SingleChildScrollView(
                                child: Column(
                                  children: _paginatedData.map((area) {
                                    return Row(
                                      children: [
                                        _buildDataCell(
                                          '',
                                          'Checkbox',
                                          customContent: Center(
                                            child: Checkbox(
                                              value: area['selected'],
                                              onChanged: (value) {
                                                setState(() {
                                                  area['selected'] = value;
                                                });
                                              },
                                            ),
                                          ),
                                        ),
                                        _buildDataCell(area['areaName'] ?? '', 'AreaName'),
                                        _buildDataCell(area['areaCode'] ?? '', 'AreaCode'),
                                      ],
                                    );
                                  }).toList(),
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                    // Pagination controls
                    if (_totalPages > 0) _buildPaginationControls(),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// New Area Page
class NewAreaPage extends StatefulWidget {
  @override
  _NewAreaPageState createState() => _NewAreaPageState();
}

class _NewAreaPageState extends State<NewAreaPage> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController _areaNameController = TextEditingController();
  final TextEditingController _areaCodeController = TextEditingController();

  @override
  void dispose(){
    _areaNameController.dispose();
    _areaCodeController.dispose();
    super.dispose();
  }

  void _saveArea() {
    if (_formKey.currentState!.validate()) {
      Navigator.pop(context, {
        'areaName': _areaNameController.text,
        'areaCode': _areaCodeController.text,
      });
    }
  }

  void _saveAndNew() {
    if (_formKey.currentState!.validate()) {
      Navigator.pop(context, {
        'areaName': _areaNameController.text,
        'areaCode': _areaCodeController.text,
        'keepOpen': true,
      });
    }
  }

  void _deleteArea() {
    Navigator.pop(context);
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        Navigator.pop(context, null);
        return false;
      },
      child: Scaffold(
        appBar: AppBar(
          title: Text('Area'),
          backgroundColor: Colors.white,
          foregroundColor: Colors.black,
          elevation: 0,
          leading: IconButton(
            onPressed: () => Navigator.pop(context, null),
            icon: Icon(Icons.arrow_back, color: Colors.black),
          ),
          actions: [
            IconButton(
              onPressed: () => Navigator.pop(context, null),
              icon: Icon(Icons.arrow_back),
            ),
            IconButton(
              onPressed: () => Navigator.pop(context, null),
              icon: Icon(Icons.arrow_forward),
            ),
            IconButton(
              onPressed: () => _formKey.currentState?.reset(),
              icon: Icon(Icons.refresh),
            ),
          ],
        ),
        body: Container(
          color: Colors.grey.shade50,
          child: Column(
            children: [
              // Action buttons
              Container(
                padding: EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.white,
                  border: Border(
                    bottom: BorderSide(color: Colors.grey.shade300, width: 1),
                  ),
                ),
                child: LayoutBuilder(
                  builder: (context, constraints) {
                    bool isSmallScreen = constraints.maxWidth < 600;

                    if (isSmallScreen) {
                      // Stack buttons vertically on small screens
                      return Column(
                        children: [
                          Row(
                            children: [
                              Expanded(
                                child: OutlinedButton.icon(
                                  onPressed: _deleteArea,
                                  icon: Icon(Icons.delete, color: Colors.red.shade400, size: 18),
                                  label: Text('Delete', style: TextStyle(fontSize: 12)),
                                  style: OutlinedButton.styleFrom(
                                    foregroundColor: Colors.red.shade400,
                                    side: BorderSide(color: Colors.grey.shade300),
                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                  ),
                                ),
                              ),
                            ],
                          ),
                          SizedBox(height: 6),
                          Row(
                            children: [
                              Expanded(
                                child: OutlinedButton.icon(
                                  onPressed: _saveAndNew,
                                  icon: Icon(Icons.save, color: Colors.orange.shade700, size: 18),
                                  label: Text('Save & New', style: TextStyle(fontSize: 12)),
                                  style: OutlinedButton.styleFrom(
                                    foregroundColor: Colors.orange.shade700,
                                    side: BorderSide(color: Colors.orange.shade700),
                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                  ),
                                ),
                              ),
                              SizedBox(width: 6),
                              Expanded(
                                child: ElevatedButton.icon(
                                  onPressed: _saveArea,
                                  icon: Icon(Icons.save, color: Colors.white, size: 18),
                                  label: Text('Save', style: TextStyle(fontSize: 12)),
                                  style: ElevatedButton.styleFrom(
                                    backgroundColor: Colors.orange.shade700,
                                    foregroundColor: Colors.white,
                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ],
                      );
                    } else {
                      // Original horizontal layout for larger screens
                      return Row(
                        children: [
                          OutlinedButton.icon(
                            onPressed: _deleteArea,
                            icon: Icon(Icons.delete, color: Colors.red.shade400, size: 20),
                            label: Text('Delete'),
                            style: OutlinedButton.styleFrom(
                              foregroundColor: Colors.red.shade400,
                              side: BorderSide(color: Colors.grey.shade300),
                            ),
                          ),
                          Spacer(),
                          OutlinedButton.icon(
                            onPressed: _saveAndNew,
                            icon: Icon(Icons.save, color: Colors.orange.shade700, size: 20),
                            label: Text('Save and New'),
                            style: OutlinedButton.styleFrom(
                              foregroundColor: Colors.orange.shade700,
                              side: BorderSide(color: Colors.orange.shade700),
                            ),
                          ),
                          SizedBox(width: 8),
                          ElevatedButton.icon(
                            onPressed: _saveArea,
                            icon: Icon(Icons.save, color: Colors.white, size: 20),
                            label: Text('Save'),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.orange.shade700,
                              foregroundColor: Colors.white,
                            ),
                          ),
                        ],
                      );
                    }
                  },
                ),
              ),

              // Form content
              Expanded(
                child: SingleChildScrollView(
                  padding: EdgeInsets.all(16),
                  child: Form(
                    key: _formKey,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Area',
                          style: TextStyle(
                            fontSize: 24,
                            fontWeight: FontWeight.bold,
                            color: Colors.black87,
                          ),
                        ),
                        SizedBox(height: 24),

                        // Area Name
                        TextFormField(
                          controller: _areaNameController,
                          decoration: InputDecoration(
                            labelText: 'Area Name*',
                            border: OutlineInputBorder(),
                            contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
                          ),
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Please enter Area Name';
                            }
                            return null;
                          },
                        ),
                        SizedBox(height: 32),
                        TextFormField(
                          controller: _areaCodeController,
                          decoration: InputDecoration(
                            labelText: 'Area Code*',
                            border: OutlineInputBorder(),
                            contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
                          ),
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Please enter Area Code';
                            }
                            return null;
                          },
                        ),
                        SizedBox(height: 32),
                      ],
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

//Branch Page
class BranchPage extends StatefulWidget {
  @override
  _BranchPageState createState() => _BranchPageState();
}

class _BranchPageState extends State<BranchPage> {
  final ScrollController _horizontalScrollController = ScrollController();
  final TextEditingController _searchController = TextEditingController();

  // Column widths - can be adjusted
  Map<String, double> columnWidths = {
    'Checkbox': 60,
    'BranchName': 730,
    'BranchCode': 730,
  };

  // Map column keys to data field names
  Map<String, String> columnToDataField = {
    'BranchName': 'branchName',
    'BranchCode': 'branchCode',
  };

  // Sorting state
  String _sortColumn = '';
  bool _sortAscending = true;

  // Pagination state
  int _currentPage = 1;
  int _pageSize = 20;
  final List<int> _pageSizeOptions = [10, 20, 50, 100];

  // Sample data structure
  List<Map<String, dynamic>> _branchesData = [
    {
      'selected': false,
      'branchName': 'ADMINSTRATION BRANCH',
      'branchCode': 'ADB',
    },
    {
      'selected': false,
      'branchName': 'BORDER SECURITY BRANCH',
      'branchCode': 'BSB',
    },
    {
      'selected': false,
      'branchName': 'COMMISSIONERS OFFICE',
      'branchCode': 'CO',
    },
    {
      'selected': false,
      'branchName': 'HQ',
      'branchCode': 'HQ02',
    },
  ];

  bool _selectAll = false;

  @override
  void dispose() {
    _horizontalScrollController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  List<Map<String, dynamic>> get _filteredData {
    var filtered = _branchesData;

    // Apply search filter
    if (_searchController.text.isNotEmpty) {
      filtered = filtered.where((branch) {
        return branch.values.any((value) =>
            value.toString().toLowerCase().contains(_searchController.text.toLowerCase()));
      }).toList();
    }

    // Apply sorting
    if (_sortColumn.isNotEmpty) {
      String dataField = columnToDataField[_sortColumn] ?? _sortColumn;
      filtered.sort((a, b) {
        var aValue = a[dataField] ?? '';
        var bValue = b[dataField] ?? '';

        int comparison = aValue.toString().compareTo(bValue.toString());
        return _sortAscending ? comparison : -comparison;
      });
    }

    return filtered;
  }

  List<Map<String, dynamic>> get _paginatedData {
    var filtered = _filteredData;
    int startIndex = (_currentPage - 1) * _pageSize;
    int endIndex = startIndex + _pageSize;

    if (startIndex >= filtered.length) return [];
    if (endIndex > filtered.length) endIndex = filtered.length;

    return filtered.sublist(startIndex, endIndex);
  }

  int get _totalPages {
    return (_filteredData.length / _pageSize).ceil();
  }

  void _refreshData() {
    setState(() {
      // Unselect all checkboxes
      for (var branch in _branchesData) {
        branch['selected'] = false;
      }
      _selectAll = false;
      // add actual data refresh logic here
    });
  }

  void _navigateToNewBranchPage() async {
    final result = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => NewBranchPage(),
      ),
    );

    if (result != null) {
      setState(() {
        _branchesData.add({
          'selected': false,
          'branchName': result['branchName'],
          'branchCode': result['branchCode'],
        });
      });

      // If keepOpen flag is set, reopen the page
      if (result['keepOpen'] == true) {
        _navigateToNewBranchPage();
      }
    }
  }

  void _toggleSelectAll() {
    setState(() {
      _selectAll = !_selectAll;
      for (var branch in _paginatedData) {
        branch['selected'] = _selectAll;
      }
    });
  }

  void _deleteSelected() {
    setState(() {
      _branchesData.removeWhere((branch) => branch['selected'] == true);
      _selectAll = false;
      // Adjust current page if needed
      if (_currentPage > _totalPages && _totalPages > 0) {
        _currentPage = _totalPages;
      }
    });
  }

  void _exportData() {
    // Add export functionality here
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Export functionality would be implemented here')),
    );
  }

  void _showFilterDialog(String columnKey) {
    // Add filter dialog functionality here
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Filter ${columnKey}'),
        content: Text('Filter functionality would be implemented here'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Close'),
          ),
        ],
      ),
    );
  }

  void _sortData(String columnKey) {
    setState(() {
      if (_sortColumn == columnKey) {
        _sortAscending = !_sortAscending;
      } else {
        _sortColumn = columnKey;
        _sortAscending = true;
      }
    });
  }

  bool _hasSelectedItems() {
    return _branchesData.any((branch) => branch['selected'] == true);
  }

  Widget _buildResizableColumn({
    required String title,
    required String columnKey,
    required bool isLast,
    Widget? customContent,
  }) {
    return Container(
      width: columnWidths[columnKey],
      child: Row(
        children: [
          Expanded(
            child: Container(
              height: 40, // Fixed height for consistent checkbox alignment
              padding: EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.grey.shade200,
                border: Border(
                  right: BorderSide(color: Colors.grey.shade400),
                  bottom: BorderSide(color: Colors.grey.shade400),
                ),
              ),
              child: customContent ??
                  Row(
                    children: [
                      Expanded(
                        child: Text(
                          title,
                          style: TextStyle(fontWeight: FontWeight.bold, fontSize: 12),
                          overflow: TextOverflow.ellipsis,
                        ),
                      ),
                      if (columnKey == 'BranchName') ...[
                        GestureDetector(
                          onTap: () => _sortData(columnKey),
                          child: Icon(
                            _sortColumn == columnKey
                                ? (_sortAscending ? Icons.arrow_upward : Icons.arrow_downward)
                                : Icons.unfold_more,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                        ),
                        SizedBox(width: 4),
                      ],
                      if (columnKey != 'Checkbox')
                        GestureDetector(
                          onTap: () => _showFilterDialog(columnKey),
                          child: Icon(
                            Icons.filter_alt_outlined,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                        ),
                    ],
                  ),
            ),
          ),
          if (!isLast)
            GestureDetector(
              onPanUpdate: (details) {
                setState(() {
                  columnWidths[columnKey] =
                      (columnWidths[columnKey]! + details.delta.dx).clamp(60.0, 400.0);
                });
              },
              child: Container(
                width: 4,
                height: 40,
                color: Colors.grey.shade400,
                child: MouseRegion(
                  cursor: SystemMouseCursors.resizeColumn,
                  child: Container(),
                ),
              ),
            ),
        ],
      ),
    );
  }

  Widget _buildDataCell(dynamic data, String columnKey, {Widget? customContent}) {
    return Container(
      width: columnWidths[columnKey],
      height: 40, // Fixed height for consistent alignment
      padding: EdgeInsets.all(8),
      decoration: BoxDecoration(
        border: Border(
          right: BorderSide(color: Colors.grey.shade400),
          bottom: BorderSide(color: Colors.grey.shade400),
        ),
      ),
      child: Align(
        alignment: Alignment.centerLeft,
        child: customContent ??
            Text(
              data.toString(),
              style: TextStyle(fontSize: 12),
              overflow: TextOverflow.ellipsis,
            ),
      ),
    );
  }

  Widget _buildPaginationControls() {
    return Container(
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        border: Border(
          top: BorderSide(color: Colors.grey.shade300, width: 1),
        ),
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          // Page numbers
          Row(
            children: [
              for (int i = 1; i <= _totalPages && i <= 4; i++)
                GestureDetector(
                  onTap: () {
                    setState(() {
                      _currentPage = i;
                    });
                  },
                  child: Container(
                    margin: EdgeInsets.symmetric(horizontal: 4),
                    padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                    decoration: BoxDecoration(
                      color: _currentPage == i ? Colors.orange.shade700 : Colors.transparent,
                      borderRadius: BorderRadius.circular(4),
                    ),
                    child: Text(
                      i.toString(),
                      style: TextStyle(
                        color: _currentPage == i ? Colors.white : Colors.black,
                        fontWeight: _currentPage == i ? FontWeight.bold : FontWeight.normal,
                      ),
                    ),
                  ),
                ),
            ],
          ),
          // Page size selector
          Row(
            children: [
              Text('Page Size: ', style: TextStyle(fontSize: 14)),
              DropdownButton<int>(
                value: _pageSize,
                items: _pageSizeOptions.map((size) {
                  return DropdownMenuItem<int>(
                    value: size,
                    child: Text(size.toString()),
                  );
                }).toList(),
                onChanged: (value) {
                  setState(() {
                    _pageSize = value!;
                    _currentPage = 1; // Reset to first page
                  });
                },
              ),
            ],
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        color: Colors.grey.shade50,
        child: Column(
          children: [
            // Header with buttons and search
            Container(
              width: double.infinity, // Full width
              padding: EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.white,
                border: Border(
                  bottom: BorderSide(color: Colors.grey.shade300, width: 1),
                ),
              ),
              child: LayoutBuilder(
                builder: (context, constraints) {
                  final isSmallScreen = constraints.maxWidth < 600;
                  final buttonStyle = OutlinedButton.styleFrom(
                    padding: isSmallScreen
                        ? EdgeInsets.symmetric(horizontal: 6, vertical: 4)
                        : EdgeInsets.symmetric(horizontal: 8, vertical: 6),
                    textStyle: TextStyle(
                      fontSize: isSmallScreen ? 12 : 14,
                    ),
                    minimumSize: Size(0, isSmallScreen ? 30 : 36),
                    side: BorderSide(color: Colors.grey.shade300),
                  );

                  return SingleChildScrollView(
                    scrollDirection: Axis.horizontal,
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.start, // Left-aligned content
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        // New Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _navigateToNewBranchPage,
                            icon: Icon(Icons.add, color: Colors.orange.shade700, size: 20),
                            padding: EdgeInsets.all(4),
                            tooltip: 'New',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _navigateToNewBranchPage,
                            icon: Icon(Icons.add, color: Colors.orange.shade700, size: 20),
                            label: Text('New'),
                            style: buttonStyle.copyWith(
                              backgroundColor: MaterialStateProperty.all(Colors.white),
                              foregroundColor: MaterialStateProperty.all(Colors.black),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Delete Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _hasSelectedItems() ? _deleteSelected : null,
                            icon: Icon(Icons.delete,
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                                size: 20
                            ),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Delete',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _hasSelectedItems() ? _deleteSelected : null,
                            icon: Icon(Icons.delete,
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                                size: 20
                            ),
                            label: Text(
                              'Delete',
                              style: TextStyle(
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                              ),
                            ),
                            style: buttonStyle.copyWith(
                              foregroundColor: MaterialStateProperty.all(
                                _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                              ),
                              side: MaterialStateProperty.all(
                                BorderSide(color: Colors.grey.shade300),
                              ),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Search Field
                        Container(
                          width: isSmallScreen ? 180 : 300,
                          child: TextField(
                            controller: _searchController,
                            onChanged: (value) {
                              setState(() {
                                _currentPage = 1;
                              });
                            },
                            decoration: InputDecoration(
                              isDense: true,
                              hintText: 'Search...',
                              suffixIcon: Icon(Icons.search, color: Colors.orange.shade700),
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(4),
                              ),
                              contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                            ),
                          ),
                        ),

                        SizedBox(width: 12),

                        // Export Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _exportData,
                            icon: Icon(Icons.download, color: Colors.orange.shade700, size: 20),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Export',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _exportData,
                            icon: Icon(Icons.download, color: Colors.orange.shade700, size: 20),
                            label: Text('Export'),
                            style: buttonStyle.copyWith(
                              backgroundColor: MaterialStateProperty.all(Colors.white),
                              foregroundColor: MaterialStateProperty.all(Colors.black),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Refresh Button
                        IconButton(
                          onPressed: _refreshData,
                          icon: Icon(Icons.refresh, color: Colors.orange.shade700, size: 20),
                          padding: EdgeInsets.all(4),
                          tooltip: 'Refresh',
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),

            // Table area
            Expanded(
              child: Container(
                margin: EdgeInsets.all(16),
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.grey.shade300),
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(4),
                ),
                child: Column(
                  children: [
                    // Table with synchronized scrolling
                    Expanded(
                      child: _paginatedData.isEmpty
                          ? Center(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(
                              Icons.folder_open,
                              size: 64,
                              color: Colors.grey.shade400,
                            ),
                            SizedBox(height: 16),
                            Text(
                              'No branches found',
                              style: TextStyle(
                                fontSize: 18,
                                color: Colors.grey.shade600,
                              ),
                            ),
                            SizedBox(height: 8),
                            Text(
                              'Click "New" to add your first branch',
                              style: TextStyle(
                                fontSize: 14,
                                color: Colors.grey.shade500,
                              ),
                            ),
                          ],
                        ),
                      )
                          : SingleChildScrollView(
                        controller: _horizontalScrollController,
                        scrollDirection: Axis.horizontal,
                        child: Column(
                          children: [
                            // Table header
                            Row(
                              children: [
                                _buildResizableColumn(
                                  title: '',
                                  columnKey: 'Checkbox',
                                  isLast: false,
                                  customContent: Center(
                                    child: Checkbox(
                                      value: _selectAll,
                                      onChanged: (value) => _toggleSelectAll(),
                                    ),
                                  ),
                                ),
                                _buildResizableColumn(
                                  title: 'Branch Name',
                                  columnKey: 'BranchName',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Branch Code',
                                  columnKey: 'BranchCode',
                                  isLast: true,
                                ),
                              ],
                            ),

                            // Table body
                            Expanded(
                              child: SingleChildScrollView(
                                child: Column(
                                  children: _paginatedData.map((branch) {
                                    return Row(
                                      children: [
                                        _buildDataCell(
                                          '',
                                          'Checkbox',
                                          customContent: Center(
                                            child: Checkbox(
                                              value: branch['selected'],
                                              onChanged: (value) {
                                                setState(() {
                                                  branch['selected'] = value;
                                                });
                                              },
                                            ),
                                          ),
                                        ),
                                        _buildDataCell(branch['branchName'] ?? '', 'BranchName'),
                                        _buildDataCell(branch['branchCode'] ?? '', 'BranchCode'),
                                      ],
                                    );
                                  }).toList(),
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                    // Pagination controls
                    if (_totalPages > 0) _buildPaginationControls(),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// New Branch Page
class NewBranchPage extends StatefulWidget {
  @override
  _NewBranchPageState createState() => _NewBranchPageState();
}

class _NewBranchPageState extends State<NewBranchPage> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController _branchNameController = TextEditingController();
  final TextEditingController _branchCodeController = TextEditingController();

  @override
  void dispose(){
    _branchNameController.dispose();
    _branchCodeController.dispose();
    super.dispose();
  }

  void _saveBranch() {
    if (_formKey.currentState!.validate()) {
      Navigator.pop(context, {
        'branchName': _branchNameController.text,
        'branchCode': _branchCodeController.text,
      });
    }
  }

  void _saveAndNew() {
    if (_formKey.currentState!.validate()) {
      Navigator.pop(context, {
        'branchName': _branchNameController.text,
        'branchCode': _branchCodeController.text,
        'keepOpen': true,
      });
    }
  }

  void _deleteBranch() {
    Navigator.pop(context);
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        Navigator.pop(context, null);
        return false;
      },
      child: Scaffold(
        appBar: AppBar(
          title: Text('Branch'),
          backgroundColor: Colors.white,
          foregroundColor: Colors.black,
          elevation: 0,
          leading: IconButton(
            onPressed: () => Navigator.pop(context, null),
            icon: Icon(Icons.arrow_back, color: Colors.black),
          ),
          actions: [
            IconButton(
              onPressed: () => Navigator.pop(context, null),
              icon: Icon(Icons.arrow_back),
            ),
            IconButton(
              onPressed: () => Navigator.pop(context, null),
              icon: Icon(Icons.arrow_forward),
            ),
            IconButton(
              onPressed: () => _formKey.currentState?.reset(),
              icon: Icon(Icons.refresh),
            ),
          ],
        ),
        body: Container(
          color: Colors.grey.shade50,
          child: Column(
            children: [
              // Action buttons
              Container(
                padding: EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.white,
                  border: Border(
                    bottom: BorderSide(color: Colors.grey.shade300, width: 1),
                  ),
                ),
                child: LayoutBuilder(
                  builder: (context, constraints) {
                    bool isSmallScreen = constraints.maxWidth < 600;

                    if (isSmallScreen) {
                      // Stack buttons vertically on small screens
                      return Column(
                        children: [
                          Row(
                            children: [
                              Expanded(
                                child: OutlinedButton.icon(
                                  onPressed: _deleteBranch,
                                  icon: Icon(Icons.delete, color: Colors.red.shade400, size: 18),
                                  label: Text('Delete', style: TextStyle(fontSize: 12)),
                                  style: OutlinedButton.styleFrom(
                                    foregroundColor: Colors.red.shade400,
                                    side: BorderSide(color: Colors.grey.shade300),
                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                  ),
                                ),
                              ),
                            ],
                          ),
                          SizedBox(height: 6),
                          Row(
                            children: [
                              Expanded(
                                child: OutlinedButton.icon(
                                  onPressed: _saveAndNew,
                                  icon: Icon(Icons.save, color: Colors.orange.shade700, size: 18),
                                  label: Text('Save & New', style: TextStyle(fontSize: 12)),
                                  style: OutlinedButton.styleFrom(
                                    foregroundColor: Colors.orange.shade700,
                                    side: BorderSide(color: Colors.orange.shade700),
                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                  ),
                                ),
                              ),
                              SizedBox(width: 6),
                              Expanded(
                                child: ElevatedButton.icon(
                                  onPressed: _saveBranch,
                                  icon: Icon(Icons.save, color: Colors.white, size: 18),
                                  label: Text('Save', style: TextStyle(fontSize: 12)),
                                  style: ElevatedButton.styleFrom(
                                    backgroundColor: Colors.orange.shade700,
                                    foregroundColor: Colors.white,
                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ],
                      );
                    } else {
                      // Original horizontal layout for larger screens
                      return Row(
                        children: [
                          OutlinedButton.icon(
                            onPressed: _deleteBranch,
                            icon: Icon(Icons.delete, color: Colors.red.shade400, size: 20),
                            label: Text('Delete'),
                            style: OutlinedButton.styleFrom(
                              foregroundColor: Colors.red.shade400,
                              side: BorderSide(color: Colors.grey.shade300),
                            ),
                          ),
                          Spacer(),
                          OutlinedButton.icon(
                            onPressed: _saveAndNew,
                            icon: Icon(Icons.save, color: Colors.orange.shade700, size: 20),
                            label: Text('Save and New'),
                            style: OutlinedButton.styleFrom(
                              foregroundColor: Colors.orange.shade700,
                              side: BorderSide(color: Colors.orange.shade700),
                            ),
                          ),
                          SizedBox(width: 8),
                          ElevatedButton.icon(
                            onPressed: _saveBranch,
                            icon: Icon(Icons.save, color: Colors.white, size: 20),
                            label: Text('Save'),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.orange.shade700,
                              foregroundColor: Colors.white,
                            ),
                          ),
                        ],
                      );
                    }
                  },
                ),
              ),

              // Form content
              Expanded(
                child: SingleChildScrollView(
                  padding: EdgeInsets.all(16),
                  child: Form(
                    key: _formKey,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Branch',
                          style: TextStyle(
                            fontSize: 24,
                            fontWeight: FontWeight.bold,
                            color: Colors.black87,
                          ),
                        ),
                        SizedBox(height: 24),

                        // Branch Name
                        TextFormField(
                          controller: _branchNameController,
                          decoration: InputDecoration(
                            labelText: 'Branch Name*',
                            border: OutlineInputBorder(),
                            contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
                          ),
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Please enter Branch Name';
                            }
                            return null;
                          },
                        ),
                        SizedBox(height: 32),
                        TextFormField(
                          controller: _branchCodeController,
                          decoration: InputDecoration(
                            labelText: 'Branch Code*',
                            border: OutlineInputBorder(),
                            contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
                          ),
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Please enter Branch Code';
                            }
                            return null;
                          },
                        ),
                        SizedBox(height: 32),
                      ],
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}


// Division Page
class DivisionPage extends StatefulWidget {
  @override
  _DivisionPageState createState() => _DivisionPageState();
}

class _DivisionPageState extends State<DivisionPage> {
  final ScrollController _horizontalScrollController = ScrollController();
  final TextEditingController _searchController = TextEditingController();

  // Column widths - can be adjusted
  Map<String, double> columnWidths = {
    'Checkbox': 60,
    'DivisionName': 730,
    'DivisionCode': 730,
  };

  // Map column keys to data field names
  Map<String, String> columnToDataField = {
    'DivisionName': 'divisionName',
    'DivisionCode': 'divisionCode',
  };

  // Sorting state
  String _sortColumn = '';
  bool _sortAscending = true;

  // Pagination state
  int _currentPage = 1;
  int _pageSize = 20;
  final List<int> _pageSizeOptions = [10, 20, 50, 100];

  // Sample data structure
  List<Map<String, dynamic>> _divisionsData = [
    {
      'selected': false,
      'divisionName': 'Information and Communications Technology',
      'divisionCode': 'ICTD',
    },
    {
      'selected': false,
      'divisionName': 'NA',
      'divisionCode': 'NA',
    },
    {
      'selected': false,
      'divisionName': 'Technology Branch',
      'divisionCode': 'TB',
    },
    {
      'selected': false,
      'divisionName': 'Telecommunications',
      'divisionCode': 'TELECOM',
    },
  ];

  bool _selectAll = false;

  @override
  void dispose() {
    _horizontalScrollController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  List<Map<String, dynamic>> get _filteredData {
    var filtered = _divisionsData;

    // Apply search filter
    if (_searchController.text.isNotEmpty) {
      filtered = filtered.where((division) {
        return division.values.any((value) =>
            value.toString().toLowerCase().contains(_searchController.text.toLowerCase()));
      }).toList();
    }

    // Apply sorting
    if (_sortColumn.isNotEmpty) {
      String dataField = columnToDataField[_sortColumn] ?? _sortColumn;
      filtered.sort((a, b) {
        var aValue = a[dataField] ?? '';
        var bValue = b[dataField] ?? '';

        int comparison = aValue.toString().compareTo(bValue.toString());
        return _sortAscending ? comparison : -comparison;
      });
    }

    return filtered;
  }

  List<Map<String, dynamic>> get _paginatedData {
    var filtered = _filteredData;
    int startIndex = (_currentPage - 1) * _pageSize;
    int endIndex = startIndex + _pageSize;

    if (startIndex >= filtered.length) return [];
    if (endIndex > filtered.length) endIndex = filtered.length;

    return filtered.sublist(startIndex, endIndex);
  }

  int get _totalPages {
    return (_filteredData.length / _pageSize).ceil();
  }

  void _refreshData() {
    setState(() {
      // Unselect all checkboxes
      for (var division in _divisionsData) {
        division['selected'] = false;
      }
      _selectAll = false;
      // add actual data refresh logic here
    });
  }

  void _navigateToNewDivisionPage() async {
    final result = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => NewDivisionPage(),
      ),
    );

    if (result != null) {
      setState(() {
        _divisionsData.add({
          'selected': false,
          'divisionName': result['divisionName'],
          'divisionCode': result['divisionCode'],
        });
      });

      // If keepOpen flag is set, reopen the page
      if (result['keepOpen'] == true) {
        _navigateToNewDivisionPage();
      }
    }
  }

  void _toggleSelectAll() {
    setState(() {
      _selectAll = !_selectAll;
      for (var division in _paginatedData) {
        division['selected'] = _selectAll;
      }
    });
  }

  void _deleteSelected() {
    setState(() {
      _divisionsData.removeWhere((division) => division['selected'] == true);
      _selectAll = false;
      // Adjust current page if needed
      if (_currentPage > _totalPages && _totalPages > 0) {
        _currentPage = _totalPages;
      }
    });
  }

  void _exportData() {
    // Add export functionality here
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Export functionality would be implemented here')),
    );
  }

  void _showFilterDialog(String columnKey) {
    // Add filter dialog functionality here
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Filter ${columnKey}'),
        content: Text('Filter functionality would be implemented here'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Close'),
          ),
        ],
      ),
    );
  }

  void _sortData(String columnKey) {
    setState(() {
      if (_sortColumn == columnKey) {
        _sortAscending = !_sortAscending;
      } else {
        _sortColumn = columnKey;
        _sortAscending = true;
      }
    });
  }

  bool _hasSelectedItems() {
    return _divisionsData.any((division) => division['selected'] == true);
  }

  Widget _buildResizableColumn({
    required String title,
    required String columnKey,
    required bool isLast,
    Widget? customContent,
  }) {
    return Container(
      width: columnWidths[columnKey],
      child: Row(
        children: [
          Expanded(
            child: Container(
              height: 40, // Fixed height for consistent checkbox alignment
              padding: EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.grey.shade200,
                border: Border(
                  right: BorderSide(color: Colors.grey.shade400),
                  bottom: BorderSide(color: Colors.grey.shade400),
                ),
              ),
              child: customContent ??
                  Row(
                    children: [
                      Expanded(
                        child: Text(
                          title,
                          style: TextStyle(fontWeight: FontWeight.bold, fontSize: 12),
                          overflow: TextOverflow.ellipsis,
                        ),
                      ),
                      if (columnKey == 'DivisionName') ...[
                        GestureDetector(
                          onTap: () => _sortData(columnKey),
                          child: Icon(
                            _sortColumn == columnKey
                                ? (_sortAscending ? Icons.arrow_upward : Icons.arrow_downward)
                                : Icons.unfold_more,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                        ),
                        SizedBox(width: 4),
                      ],
                      if (columnKey != 'Checkbox')
                        GestureDetector(
                          onTap: () => _showFilterDialog(columnKey),
                          child: Icon(
                            Icons.filter_alt_outlined,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                        ),
                    ],
                  ),
            ),
          ),
          if (!isLast)
            GestureDetector(
              onPanUpdate: (details) {
                setState(() {
                  columnWidths[columnKey] =
                      (columnWidths[columnKey]! + details.delta.dx).clamp(60.0, 400.0);
                });
              },
              child: Container(
                width: 4,
                height: 40,
                color: Colors.grey.shade400,
                child: MouseRegion(
                  cursor: SystemMouseCursors.resizeColumn,
                  child: Container(),
                ),
              ),
            ),
        ],
      ),
    );
  }

  Widget _buildDataCell(dynamic data, String columnKey, {Widget? customContent}) {
    return Container(
      width: columnWidths[columnKey],
      height: 40, // Fixed height for consistent alignment
      padding: EdgeInsets.all(8),
      decoration: BoxDecoration(
        border: Border(
          right: BorderSide(color: Colors.grey.shade400),
          bottom: BorderSide(color: Colors.grey.shade400),
        ),
      ),
      child: Align(
        alignment: Alignment.centerLeft,
        child: customContent ??
            Text(
              data.toString(),
              style: TextStyle(fontSize: 12),
              overflow: TextOverflow.ellipsis,
            ),
      ),
    );
  }

  Widget _buildPaginationControls() {
    return Container(
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        border: Border(
          top: BorderSide(color: Colors.grey.shade300, width: 1),
        ),
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          // Page numbers
          Row(
            children: [
              for (int i = 1; i <= _totalPages && i <= 4; i++)
                GestureDetector(
                  onTap: () {
                    setState(() {
                      _currentPage = i;
                    });
                  },
                  child: Container(
                    margin: EdgeInsets.symmetric(horizontal: 4),
                    padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                    decoration: BoxDecoration(
                      color: _currentPage == i ? Colors.orange.shade700 : Colors.transparent,
                      borderRadius: BorderRadius.circular(4),
                    ),
                    child: Text(
                      i.toString(),
                      style: TextStyle(
                        color: _currentPage == i ? Colors.white : Colors.black,
                        fontWeight: _currentPage == i ? FontWeight.bold : FontWeight.normal,
                      ),
                    ),
                  ),
                ),
            ],
          ),
          // Page size selector
          Row(
            children: [
              Text('Page Size: ', style: TextStyle(fontSize: 14)),
              DropdownButton<int>(
                value: _pageSize,
                items: _pageSizeOptions.map((size) {
                  return DropdownMenuItem<int>(
                    value: size,
                    child: Text(size.toString()),
                  );
                }).toList(),
                onChanged: (value) {
                  setState(() {
                    _pageSize = value!;
                    _currentPage = 1; // Reset to first page
                  });
                },
              ),
            ],
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        color: Colors.grey.shade50,
        child: Column(
          children: [
            // Header with buttons and search
            Container(
              width: double.infinity, // Full width
              padding: EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.white,
                border: Border(
                  bottom: BorderSide(color: Colors.grey.shade300, width: 1),
                ),
              ),
              child: LayoutBuilder(
                builder: (context, constraints) {
                  final isSmallScreen = constraints.maxWidth < 600;
                  final buttonStyle = OutlinedButton.styleFrom(
                    padding: isSmallScreen
                        ? EdgeInsets.symmetric(horizontal: 6, vertical: 4)
                        : EdgeInsets.symmetric(horizontal: 8, vertical: 6),
                    textStyle: TextStyle(
                      fontSize: isSmallScreen ? 12 : 14,
                    ),
                    minimumSize: Size(0, isSmallScreen ? 30 : 36),
                    side: BorderSide(color: Colors.grey.shade300),
                  );

                  return SingleChildScrollView(
                    scrollDirection: Axis.horizontal,
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.start, // Left-aligned content
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        // New Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _navigateToNewDivisionPage,
                            icon: Icon(Icons.add, color: Colors.orange.shade700, size: 20),
                            padding: EdgeInsets.all(4),
                            tooltip: 'New',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _navigateToNewDivisionPage,
                            icon: Icon(Icons.add, color: Colors.orange.shade700, size: 20),
                            label: Text('New'),
                            style: buttonStyle.copyWith(
                              backgroundColor: MaterialStateProperty.all(Colors.white),
                              foregroundColor: MaterialStateProperty.all(Colors.black),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Delete Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _hasSelectedItems() ? _deleteSelected : null,
                            icon: Icon(Icons.delete,
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                                size: 20
                            ),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Delete',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _hasSelectedItems() ? _deleteSelected : null,
                            icon: Icon(Icons.delete,
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                                size: 20
                            ),
                            label: Text(
                              'Delete',
                              style: TextStyle(
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                              ),
                            ),
                            style: buttonStyle.copyWith(
                              foregroundColor: MaterialStateProperty.all(
                                _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                              ),
                              side: MaterialStateProperty.all(
                                BorderSide(color: Colors.grey.shade300),
                              ),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Search Field
                        Container(
                          width: isSmallScreen ? 180 : 300,
                          child: TextField(
                            controller: _searchController,
                            onChanged: (value) {
                              setState(() {
                                _currentPage = 1;
                              });
                            },
                            decoration: InputDecoration(
                              isDense: true,
                              hintText: 'Search...',
                              suffixIcon: Icon(Icons.search, color: Colors.orange.shade700),
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(4),
                              ),
                              contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                            ),
                          ),
                        ),

                        SizedBox(width: 12),

                        // Export Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _exportData,
                            icon: Icon(Icons.download, color: Colors.orange.shade700, size: 20),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Export',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _exportData,
                            icon: Icon(Icons.download, color: Colors.orange.shade700, size: 20),
                            label: Text('Export'),
                            style: buttonStyle.copyWith(
                              backgroundColor: MaterialStateProperty.all(Colors.white),
                              foregroundColor: MaterialStateProperty.all(Colors.black),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Refresh Button
                        IconButton(
                          onPressed: _refreshData,
                          icon: Icon(Icons.refresh, color: Colors.orange.shade700, size: 20),
                          padding: EdgeInsets.all(4),
                          tooltip: 'Refresh',
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),

            // Table area
            Expanded(
              child: Container(
                margin: EdgeInsets.all(16),
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.grey.shade300),
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(4),
                ),
                child: Column(
                  children: [
                    // Table with synchronized scrolling
                    Expanded(
                      child: _paginatedData.isEmpty
                          ? Center(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(
                              Icons.folder_open,
                              size: 64,
                              color: Colors.grey.shade400,
                            ),
                            SizedBox(height: 16),
                            Text(
                              'No divisions found',
                              style: TextStyle(
                                fontSize: 18,
                                color: Colors.grey.shade600,
                              ),
                            ),
                            SizedBox(height: 8),
                            Text(
                              'Click "New" to add your first division',
                              style: TextStyle(
                                fontSize: 14,
                                color: Colors.grey.shade500,
                              ),
                            ),
                          ],
                        ),
                      )
                          : SingleChildScrollView(
                        controller: _horizontalScrollController,
                        scrollDirection: Axis.horizontal,
                        child: Column(
                          children: [
                            // Table header
                            Row(
                              children: [
                                _buildResizableColumn(
                                  title: '',
                                  columnKey: 'Checkbox',
                                  isLast: false,
                                  customContent: Center(
                                    child: Checkbox(
                                      value: _selectAll,
                                      onChanged: (value) => _toggleSelectAll(),
                                    ),
                                  ),
                                ),
                                _buildResizableColumn(
                                  title: 'Division Name',
                                  columnKey: 'DivisionName',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Division Code',
                                  columnKey: 'DivisionCode',
                                  isLast: true,
                                ),
                              ],
                            ),

                            // Table body
                            Expanded(
                              child: SingleChildScrollView(
                                child: Column(
                                  children: _paginatedData.map((division) {
                                    return Row(
                                      children: [
                                        _buildDataCell(
                                          '',
                                          'Checkbox',
                                          customContent: Center(
                                            child: Checkbox(
                                              value: division['selected'],
                                              onChanged: (value) {
                                                setState(() {
                                                  division['selected'] = value;
                                                });
                                              },
                                            ),
                                          ),
                                        ),
                                        _buildDataCell(division['divisionName'] ?? '', 'DivisionName'),
                                        _buildDataCell(division['divisionCode'] ?? '', 'DivisionCode'),
                                      ],
                                    );
                                  }).toList(),
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                    // Pagination controls
                    if (_totalPages > 0) _buildPaginationControls(),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// NewDivisionPage
class NewDivisionPage extends StatefulWidget {
  @override
  _NewDivisionPageState createState() => _NewDivisionPageState();
}

class _NewDivisionPageState extends State<NewDivisionPage> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController _divisionNameController = TextEditingController();
  final TextEditingController _divisionCodeController = TextEditingController();
  int _selectedTabIndex = 0;

  @override
  void dispose() {
    _divisionNameController.dispose();
    _divisionCodeController.dispose();
    super.dispose();
  }

  void _saveDivision() {
    if (_formKey.currentState!.validate()) {
      Navigator.pop(context, {
        'divisionName': _divisionNameController.text,
        'divisionCode': _divisionCodeController.text,
      });
    }
  }

  void _saveAndNew() {
    if (_formKey.currentState!.validate()) {
      Navigator.pop(context, {
        'divisionName': _divisionNameController.text,
        'divisionCode': _divisionCodeController.text,
        'keepOpen': true,
      });
    }
  }

  void _deleteDivision() {
    Navigator.pop(context);
  }

  Widget _buildUnitsTab() {
    return Container(
      padding: EdgeInsets.all(16),
      child: Column(
        children: [
          // Action buttons
          Container(
            width: double.infinity,
            child: SingleChildScrollView(
              scrollDirection: Axis.horizontal,
              child: Row(
                children: [
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.add, size: 16),
                    label: Text('New'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.link, size: 16),
                    label: Text('Link'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.link_off, size: 16),
                    label: Text('Unlink'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.delete, size: 16, color: Colors.red),
                    label: Text('Delete'),
                    style: OutlinedButton.styleFrom(
                      foregroundColor: Colors.red,
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  Container(
                    width: 180,
                    child: TextField(
                      decoration: InputDecoration(
                        isDense: true,
                        hintText: 'Search...',
                        prefixIcon: Icon(Icons.search, size: 16),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(4),
                          borderSide: BorderSide(color: Colors.grey.shade300),
                        ),
                        contentPadding: EdgeInsets.symmetric(vertical: 8, horizontal: 8),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
          SizedBox(height: 16),
          // Table
          Expanded(
            child: Container(
              decoration: BoxDecoration(
                border: Border.all(color: Colors.grey.shade300),
                borderRadius: BorderRadius.circular(4),
              ),
              child: Column(
                children: [
                  // Table header
                  Container(
                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 12),
                    decoration: BoxDecoration(
                      color: Colors.grey.shade100,
                      border: Border(bottom: BorderSide(color: Colors.grey.shade300)),
                    ),
                    child: SingleChildScrollView(
                      scrollDirection: Axis.horizontal,
                      child: Row(
                        children: [
                          SizedBox(
                            width: 40,
                            child: Row(
                              children: [
                                Checkbox(value: false, onChanged: (_) {}),
                              ],
                            ),
                          ),
                          SizedBox(width: 8),
                          _buildCompactTableHeader('Unit Name'),
                        ],
                      ),
                    ),
                  ),
                  // Table content
                  Expanded(
                    child: Center(
                      child: Text('No data to display', style: TextStyle(color: Colors.grey)),
                    ),
                  ),
                ],
              ),
            ),
          ),
          // Pagination
          Container(
            padding: EdgeInsets.symmetric(vertical: 16),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Container(
                  padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                  decoration: BoxDecoration(
                    color: Colors.orange.shade700,
                    borderRadius: BorderRadius.circular(4),
                  ),
                  child: Text('1', style: TextStyle(color: Colors.white, fontWeight: FontWeight.w600)),
                ),
                Row(
                  children: [
                    Text('Page Size: '),
                    DropdownButton<int>(
                      value: 20,
                      items: [10, 20, 50, 100].map((size) => DropdownMenuItem(
                        value: size,
                        child: Text(size.toString()),
                      )).toList(),
                      onChanged: (value) {},
                      underline: Container(),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildProjectPlanningsTab() {
    return Container(
      padding: EdgeInsets.all(16),
      child: Column(
        children: [
          // Action buttons
          Container(
            width: double.infinity,
            child: SingleChildScrollView(
              scrollDirection: Axis.horizontal,
              child: Row(
                children: [
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.add, size: 16),
                    label: Text('New'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.link, size: 16),
                    label: Text('Link'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.link_off, size: 16),
                    label: Text('Unlink'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.delete, size: 16, color: Colors.red),
                    label: Text('Delete'),
                    style: OutlinedButton.styleFrom(
                      foregroundColor: Colors.red,
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  Container(
                    width: 180,
                    child: TextField(
                      decoration: InputDecoration(
                        isDense: true,
                        hintText: 'Search...',
                        prefixIcon: Icon(Icons.search, size: 16),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(4),
                          borderSide: BorderSide(color: Colors.grey.shade300),
                        ),
                        contentPadding: EdgeInsets.symmetric(vertical: 8, horizontal: 8),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
          SizedBox(height: 16),
          // Table
          Expanded(
            child: Container(
              decoration: BoxDecoration(
                border: Border.all(color: Colors.grey.shade300),
                borderRadius: BorderRadius.circular(4),
              ),
              child: Column(
                children: [
                  // Table header
                  Container(
                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 12),
                    decoration: BoxDecoration(
                      color: Colors.grey.shade100,
                      border: Border(bottom: BorderSide(color: Colors.grey.shade300)),
                    ),
                    child: SingleChildScrollView(
                      scrollDirection: Axis.horizontal,
                      child: Row(
                        children: [
                          SizedBox(
                            width: 40,
                            child: Row(
                              children: [
                                Checkbox(value: false, onChanged: (_) {}),
                              ],
                            ),
                          ),
                          SizedBox(width: 8),
                          _buildCompactTableHeader('Project Name'),
                          _buildCompactTableHeader('Project Manager'),
                          _buildCompactTableHeader('Project Budget'),
                          _buildCompactTableHeader('Project Start Date'),
                          _buildCompactTableHeader('Project End Date'),
                          _buildCompactTableHeader('Team'),
                          _buildCompactTableHeader('Project Category'),
                          _buildCompactTableHeader('Unit'),
                          _buildCompactTableHeader('Project Status'),
                        ],
                      ),
                    ),
                  ),
                  // Table content
                  Expanded(
                    child: Center(
                      child: Text('No data to display', style: TextStyle(color: Colors.grey)),
                    ),
                  ),
                ],
              ),
            ),
          ),
          // Pagination
          Container(
            padding: EdgeInsets.symmetric(vertical: 16),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Container(
                  padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                  decoration: BoxDecoration(
                    color: Colors.orange.shade700,
                    borderRadius: BorderRadius.circular(4),
                  ),
                  child: Text('1', style: TextStyle(color: Colors.white, fontWeight: FontWeight.w600)),
                ),
                Row(
                  children: [
                    Text('Page Size: '),
                    DropdownButton<int>(
                      value: 20,
                      items: [10, 20, 50, 100].map((size) => DropdownMenuItem(
                        value: size,
                        child: Text(size.toString()),
                      )).toList(),
                      onChanged: (value) {},
                      underline: Container(),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildApplicationUsersTab() {
    return Container(
      padding: EdgeInsets.all(16),
      child: Column(
        children: [
          // Action buttons
          Container(
            width: double.infinity,
            child: SingleChildScrollView(
              scrollDirection: Axis.horizontal,
              child: Row(
                children: [
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.add, size: 16),
                    label: Text('New'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.link, size: 16),
                    label: Text('Link'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.link_off, size: 16),
                    label: Text('Unlink'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.delete, size: 16, color: Colors.red),
                    label: Text('Delete'),
                    style: OutlinedButton.styleFrom(
                      foregroundColor: Colors.red,
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  Container(
                    width: 180,
                    child: TextField(
                      decoration: InputDecoration(
                        isDense: true,
                        hintText: 'Search...',
                        prefixIcon: Icon(Icons.search, size: 16),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(4),
                          borderSide: BorderSide(color: Colors.grey.shade300),
                        ),
                        contentPadding: EdgeInsets.symmetric(vertical: 8, horizontal: 8),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
          SizedBox(height: 16),
          // Table
          Expanded(
            child: Container(
              decoration: BoxDecoration(
                border: Border.all(color: Colors.grey.shade300),
                borderRadius: BorderRadius.circular(4),
              ),
              child: Column(
                children: [
                  // Table header
                  Container(
                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 12),
                    decoration: BoxDecoration(
                      color: Colors.grey.shade100,
                      border: Border(bottom: BorderSide(color: Colors.grey.shade300)),
                    ),
                    child: SingleChildScrollView(
                      scrollDirection: Axis.horizontal,
                      child: Row(
                        children: [
                          SizedBox(
                            width: 40,
                            child: Row(
                              children: [
                                Checkbox(value: false, onChanged: (_) {}),
                              ],
                            ),
                          ),
                          SizedBox(width: 8),
                          _buildCompactTableHeader('User Name'),
                          _buildCompactTableHeader('First Name'),
                          _buildCompactTableHeader('Last Name'),
                          _buildCompactTableHeader('Full Name'),
                          _buildCompactTableHeader('Email'),
                          _buildCompactTableHeader('Unit'),
                        ],
                      ),
                    ),
                  ),
                  // Table content
                  Expanded(
                    child: Center(
                      child: Text('No data to display', style: TextStyle(color: Colors.grey)),
                    ),
                  ),
                ],
              ),
            ),
          ),
          // Pagination
          Container(
            padding: EdgeInsets.symmetric(vertical: 16),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Container(
                  padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                  decoration: BoxDecoration(
                    color: Colors.orange.shade700,
                    borderRadius: BorderRadius.circular(4),
                  ),
                  child: Text('1', style: TextStyle(color: Colors.white, fontWeight: FontWeight.w600)),
                ),
                Row(
                  children: [
                    Text('Page Size: '),
                    DropdownButton<int>(
                      value: 20,
                      items: [10, 20, 50, 100].map((size) => DropdownMenuItem(
                        value: size,
                        child: Text(size.toString()),
                      )).toList(),
                      onChanged: (value) {},
                      underline: Container(),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildCompactTableHeader(String title) {
    return Container(
      width: 120,
      padding: EdgeInsets.symmetric(horizontal: 4),
      child: Row(
        children: [
          Expanded(
            child: Text(
              title,
              style: TextStyle(fontWeight: FontWeight.w600, fontSize: 10),
              overflow: TextOverflow.ellipsis,
            ),
          ),
          Icon(Icons.filter_list, size: 10, color: Colors.grey),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        Navigator.pop(context, null);
        return false;
      },
      child: Scaffold(
        appBar: AppBar(
          title: Text('Division'),
          backgroundColor: Colors.white,
          foregroundColor: Colors.black,
          elevation: 0,
          leading: IconButton(
            onPressed: () => Navigator.pop(context, null),
            icon: Icon(Icons.arrow_back, color: Colors.black),
          ),
          actions: [
            IconButton(
              onPressed: () => Navigator.pop(context, null),
              icon: Icon(Icons.arrow_back),
            ),
            IconButton(
              onPressed: () => Navigator.pop(context, null),
              icon: Icon(Icons.arrow_forward),
            ),
            IconButton(
              onPressed: () => _formKey.currentState?.reset(),
              icon: Icon(Icons.refresh),
            ),
          ],
        ),
        body: Container(
          color: Colors.grey.shade50,
          child: Column(
            children: [
              // Action buttons
              Container(
                padding: EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.white,
                  border: Border(
                    bottom: BorderSide(color: Colors.grey.shade300, width: 1),
                  ),
                ),
                child: LayoutBuilder(
                  builder: (context, constraints) {
                    bool isSmallScreen = constraints.maxWidth < 600;

                    if (isSmallScreen) {
                      // Stack buttons vertically on small screens
                      return Column(
                        children: [
                          Row(
                            children: [
                              Expanded(
                                child: OutlinedButton.icon(
                                  onPressed: _deleteDivision,
                                  icon: Icon(Icons.delete, color: Colors.red.shade400, size: 18),
                                  label: Text('Delete', style: TextStyle(fontSize: 12)),
                                  style: OutlinedButton.styleFrom(
                                    foregroundColor: Colors.red.shade400,
                                    side: BorderSide(color: Colors.grey.shade300),
                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                  ),
                                ),
                              ),
                            ],
                          ),
                          SizedBox(height: 6),
                          Row(
                            children: [
                              Expanded(
                                child: OutlinedButton.icon(
                                  onPressed: _saveAndNew,
                                  icon: Icon(Icons.save, color: Colors.orange.shade700, size: 18),
                                  label: Text('Save & New', style: TextStyle(fontSize: 12)),
                                  style: OutlinedButton.styleFrom(
                                    foregroundColor: Colors.orange.shade700,
                                    side: BorderSide(color: Colors.orange.shade700),
                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                  ),
                                ),
                              ),
                              SizedBox(width: 6),
                              Expanded(
                                child: ElevatedButton.icon(
                                  onPressed: _saveDivision,
                                  icon: Icon(Icons.save, color: Colors.white, size: 18),
                                  label: Text('Save', style: TextStyle(fontSize: 12)),
                                  style: ElevatedButton.styleFrom(
                                    backgroundColor: Colors.orange.shade700,
                                    foregroundColor: Colors.white,
                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ],
                      );
                    } else {
                      // Original horizontal layout for larger screens
                      return Row(
                        children: [
                          OutlinedButton.icon(
                            onPressed: _deleteDivision,
                            icon: Icon(Icons.delete, color: Colors.red.shade400, size: 20),
                            label: Text('Delete'),
                            style: OutlinedButton.styleFrom(
                              foregroundColor: Colors.red.shade400,
                              side: BorderSide(color: Colors.grey.shade300),
                            ),
                          ),
                          Spacer(),
                          OutlinedButton.icon(
                            onPressed: _saveAndNew,
                            icon: Icon(Icons.save, color: Colors.orange.shade700, size: 20),
                            label: Text('Save and New'),
                            style: OutlinedButton.styleFrom(
                              foregroundColor: Colors.orange.shade700,
                              side: BorderSide(color: Colors.orange.shade700),
                            ),
                          ),
                          SizedBox(width: 8),
                          ElevatedButton.icon(
                            onPressed: _saveDivision,
                            icon: Icon(Icons.save, color: Colors.white, size: 20),
                            label: Text('Save'),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.orange.shade700,
                              foregroundColor: Colors.white,
                            ),
                          ),
                        ],
                      );
                    }
                  },
                ),
              ),

              // Form content
              Expanded(
                child: SingleChildScrollView(
                  padding: EdgeInsets.all(16),
                  child: Form(
                    key: _formKey,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Division',
                          style: TextStyle(
                            fontSize: 24,
                            fontWeight: FontWeight.bold,
                            color: Colors.black87,
                          ),
                        ),
                        SizedBox(height: 24),

                        // Division Name
                        TextFormField(
                          controller: _divisionNameController,
                          decoration: InputDecoration(
                            labelText: 'Division Name*',
                            border: OutlineInputBorder(),
                            contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
                          ),
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Please enter Division Name';
                            }
                            return null;
                          },
                        ),
                        SizedBox(height: 32),
                        TextFormField(
                          controller: _divisionCodeController,
                          decoration: InputDecoration(
                            labelText: 'Division Code*',
                            border: OutlineInputBorder(),
                            contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
                          ),
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Please enter Division Code';
                            }
                            return null;
                          },
                        ),
                        SizedBox(height: 32),

                        // Tabs Section
                        Container(
                          decoration: BoxDecoration(
                            color: Colors.white,
                            borderRadius: BorderRadius.circular(8),
                            border: Border.all(color: Colors.grey.shade300),
                          ),
                          child: Column(
                            children: [
                              // Tab headers
                              Container(
                                decoration: BoxDecoration(
                                  border: Border(bottom: BorderSide(color: Colors.grey.shade300)),
                                ),
                                child: Row(
                                  children: [
                                    GestureDetector(
                                      onTap: () => setState(() => _selectedTabIndex = 0),
                                      child: Container(
                                        padding: EdgeInsets.symmetric(horizontal: 20, vertical: 12),
                                        decoration: BoxDecoration(
                                          color: _selectedTabIndex == 0 ? Colors.orange.shade700 : Colors.transparent,
                                          borderRadius: BorderRadius.only(
                                            topLeft: Radius.circular(8),
                                          ),
                                        ),
                                        child: Row(
                                          children: [
                                            Icon(
                                              Icons.group,
                                              size: 16,
                                              color: _selectedTabIndex == 0 ? Colors.white : Colors.orange.shade700,
                                            ),
                                            SizedBox(width: 8),
                                            Text(
                                              'Units',
                                              style: TextStyle(
                                                color: _selectedTabIndex == 0 ? Colors.white : Colors.black87,
                                                fontWeight: FontWeight.w500,
                                              ),
                                            ),
                                          ],
                                        ),
                                      ),
                                    ),
                                    GestureDetector(
                                      onTap: () => setState(() => _selectedTabIndex = 1),
                                      child: Container(
                                        padding: EdgeInsets.symmetric(horizontal: 20, vertical: 12),
                                        decoration: BoxDecoration(
                                          color: _selectedTabIndex == 1 ? Colors.orange.shade700 : Colors.transparent,
                                        ),
                                        child: Row(
                                          children: [
                                            Icon(
                                              Icons.task_alt,
                                              size: 16,
                                              color: _selectedTabIndex == 1 ? Colors.white : Colors.orange.shade700,
                                            ),
                                            SizedBox(width: 8),
                                            Text(
                                              'Plannings',
                                              style: TextStyle(
                                                color: _selectedTabIndex == 1 ? Colors.white : Colors.black87,
                                                fontWeight: FontWeight.w500,
                                              ),
                                            ),
                                          ],
                                        ),
                                      ),
                                    ),
                                    GestureDetector(
                                      onTap: () => setState(() => _selectedTabIndex = 2),
                                      child: Container(
                                        padding: EdgeInsets.symmetric(horizontal: 20, vertical: 12),
                                        decoration: BoxDecoration(
                                          color: _selectedTabIndex == 2 ? Colors.orange.shade700 : Colors.transparent,
                                          borderRadius: BorderRadius.only(
                                            topRight: Radius.circular(8),
                                          ),
                                        ),
                                        child: Row(
                                          children: [
                                            Icon(
                                              Icons.person,
                                              size: 16,
                                              color: _selectedTabIndex == 2 ? Colors.white : Colors.orange.shade700,
                                            ),
                                            SizedBox(width: 8),
                                            Text(
                                              'Users',
                                              style: TextStyle(
                                                color: _selectedTabIndex == 2 ? Colors.white : Colors.black87,
                                                fontWeight: FontWeight.w500,
                                              ),
                                            ),
                                          ],
                                        ),
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                              // Tab content
                              Container(
                                height: 400,
                                child: _selectedTabIndex == 0
                                    ? _buildUnitsTab()
                                    : _selectedTabIndex == 1
                                    ? _buildProjectPlanningsTab()
                                    : _buildApplicationUsersTab(),
                              ),
                            ],
                          ),
                        ),
                        SizedBox(height: 32),
                      ],
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}


//Portfolio Page
class PortfolioPage extends StatefulWidget {
  @override
  _PortfolioPageState createState() => _PortfolioPageState();
}

class _PortfolioPageState extends State<PortfolioPage> {
  final ScrollController _horizontalScrollController = ScrollController();
  final TextEditingController _searchController = TextEditingController();

  // Column widths - can be adjusted
  Map<String, double> columnWidths = {
    'Checkbox': 60,
    'PortfolioName': 730,
    'PortfolioCode': 730,
  };

  // Map column keys to data field names
  Map<String, String> columnToDataField = {
    'PortfolioName': 'portfolioName',
    'PortfolioCode': 'portfolioCode',
  };

  // Sorting state
  String _sortColumn = '';
  bool _sortAscending = true;

  // Pagination state
  int _currentPage = 1;
  int _pageSize = 20;
  final List<int> _pageSizeOptions = [10, 20, 50, 100];

  // Sample data structure
  List<Map<String, dynamic>> _portfoliosData = [
    {
      'selected': false,
      'portfolioName': 'No Portfolio',
      'portfolioCode': 'NP',
    },
    {
      'selected': false,
      'portfolioName': 'Strat Ops',
      'portfolioCode': 'STOPS',
    },
  ];

  bool _selectAll = false;

  @override
  void dispose() {
    _horizontalScrollController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  List<Map<String, dynamic>> get _filteredData {
    var filtered = _portfoliosData;

    // Apply search filter
    if (_searchController.text.isNotEmpty) {
      filtered = filtered.where((portfolio) {
        return portfolio.values.any((value) =>
            value.toString().toLowerCase().contains(_searchController.text.toLowerCase()));
      }).toList();
    }

    // Apply sorting
    if (_sortColumn.isNotEmpty) {
      String dataField = columnToDataField[_sortColumn] ?? _sortColumn;
      filtered.sort((a, b) {
        var aValue = a[dataField] ?? '';
        var bValue = b[dataField] ?? '';

        int comparison = aValue.toString().compareTo(bValue.toString());
        return _sortAscending ? comparison : -comparison;
      });
    }

    return filtered;
  }

  List<Map<String, dynamic>> get _paginatedData {
    var filtered = _filteredData;
    int startIndex = (_currentPage - 1) * _pageSize;
    int endIndex = startIndex + _pageSize;

    if (startIndex >= filtered.length) return [];
    if (endIndex > filtered.length) endIndex = filtered.length;

    return filtered.sublist(startIndex, endIndex);
  }

  int get _totalPages {
    return (_filteredData.length / _pageSize).ceil();
  }

  void _refreshData() {
    setState(() {
      // Unselect all checkboxes
      for (var portfolio in _portfoliosData) {
        portfolio['selected'] = false;
      }
      _selectAll = false;
      // add actual data refresh logic here
    });
  }

  void _navigateToNewPortfolioPage() async {
    final result = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => NewPortfolioPage(),
      ),
    );

    if (result != null) {
      setState(() {
        _portfoliosData.add({
          'selected': false,
          'portfolioName': result['portfolioName'],
          'portfolioCode': result['portfolioCode'],
        });
      });

      // If keepOpen flag is set, reopen the page
      if (result['keepOpen'] == true) {
        _navigateToNewPortfolioPage();
      }
    }
  }

  void _toggleSelectAll() {
    setState(() {
      _selectAll = !_selectAll;
      for (var portfolio in _paginatedData) {
        portfolio['selected'] = _selectAll;
      }
    });
  }

  void _deleteSelected() {
    setState(() {
      _portfoliosData.removeWhere((portfolio) => portfolio['selected'] == true);
      _selectAll = false;
      // Adjust current page if needed
      if (_currentPage > _totalPages && _totalPages > 0) {
        _currentPage = _totalPages;
      }
    });
  }

  void _exportData() {
    // Add export functionality here
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Export functionality would be implemented here')),
    );
  }

  void _showFilterDialog(String columnKey) {
    // Add filter dialog functionality here
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Filter ${columnKey}'),
        content: Text('Filter functionality would be implemented here'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Close'),
          ),
        ],
      ),
    );
  }

  void _sortData(String columnKey) {
    setState(() {
      if (_sortColumn == columnKey) {
        _sortAscending = !_sortAscending;
      } else {
        _sortColumn = columnKey;
        _sortAscending = true;
      }
    });
  }

  bool _hasSelectedItems() {
    return _portfoliosData.any((portfolio) => portfolio['selected'] == true);
  }

  Widget _buildResizableColumn({
    required String title,
    required String columnKey,
    required bool isLast,
    Widget? customContent,
  }) {
    return Container(
      width: columnWidths[columnKey],
      child: Row(
        children: [
          Expanded(
            child: Container(
              height: 40, // Fixed height for consistent checkbox alignment
              padding: EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.grey.shade200,
                border: Border(
                  right: BorderSide(color: Colors.grey.shade400),
                  bottom: BorderSide(color: Colors.grey.shade400),
                ),
              ),
              child: customContent ??
                  Row(
                    children: [
                      Expanded(
                        child: Text(
                          title,
                          style: TextStyle(fontWeight: FontWeight.bold, fontSize: 12),
                          overflow: TextOverflow.ellipsis,
                        ),
                      ),
                      if (columnKey == 'PortfolioName') ...[
                        GestureDetector(
                          onTap: () => _sortData(columnKey),
                          child: Icon(
                            _sortColumn == columnKey
                                ? (_sortAscending ? Icons.arrow_upward : Icons.arrow_downward)
                                : Icons.unfold_more,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                        ),
                        SizedBox(width: 4),
                      ],
                      if (columnKey != 'Checkbox')
                        GestureDetector(
                          onTap: () => _showFilterDialog(columnKey),
                          child: Icon(
                            Icons.filter_alt_outlined,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                        ),
                    ],
                  ),
            ),
          ),
          if (!isLast)
            GestureDetector(
              onPanUpdate: (details) {
                setState(() {
                  columnWidths[columnKey] =
                      (columnWidths[columnKey]! + details.delta.dx).clamp(60.0, 400.0);
                });
              },
              child: Container(
                width: 4,
                height: 40,
                color: Colors.grey.shade400,
                child: MouseRegion(
                  cursor: SystemMouseCursors.resizeColumn,
                  child: Container(),
                ),
              ),
            ),
        ],
      ),
    );
  }

  Widget _buildDataCell(dynamic data, String columnKey, {Widget? customContent}) {
    return Container(
      width: columnWidths[columnKey],
      height: 40, // Fixed height for consistent alignment
      padding: EdgeInsets.all(8),
      decoration: BoxDecoration(
        border: Border(
          right: BorderSide(color: Colors.grey.shade400),
          bottom: BorderSide(color: Colors.grey.shade400),
        ),
      ),
      child: Align(
        alignment: Alignment.centerLeft,
        child: customContent ??
            Text(
              data.toString(),
              style: TextStyle(fontSize: 12),
              overflow: TextOverflow.ellipsis,
            ),
      ),
    );
  }

  Widget _buildPaginationControls() {
    return Container(
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        border: Border(
          top: BorderSide(color: Colors.grey.shade300, width: 1),
        ),
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          // Page numbers
          Row(
            children: [
              for (int i = 1; i <= _totalPages && i <= 4; i++)
                GestureDetector(
                  onTap: () {
                    setState(() {
                      _currentPage = i;
                    });
                  },
                  child: Container(
                    margin: EdgeInsets.symmetric(horizontal: 4),
                    padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                    decoration: BoxDecoration(
                      color: _currentPage == i ? Colors.orange.shade700 : Colors.transparent,
                      borderRadius: BorderRadius.circular(4),
                    ),
                    child: Text(
                      i.toString(),
                      style: TextStyle(
                        color: _currentPage == i ? Colors.white : Colors.black,
                        fontWeight: _currentPage == i ? FontWeight.bold : FontWeight.normal,
                      ),
                    ),
                  ),
                ),
            ],
          ),
          // Page size selector
          Row(
            children: [
              Text('Page Size: ', style: TextStyle(fontSize: 14)),
              DropdownButton<int>(
                value: _pageSize,
                items: _pageSizeOptions.map((size) {
                  return DropdownMenuItem<int>(
                    value: size,
                    child: Text(size.toString()),
                  );
                }).toList(),
                onChanged: (value) {
                  setState(() {
                    _pageSize = value!;
                    _currentPage = 1; // Reset to first page
                  });
                },
              ),
            ],
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        color: Colors.grey.shade50,
        child: Column(
          children: [
            // Header with buttons and search
            Container(
              width: double.infinity, // Full width
              padding: EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.white,
                border: Border(
                  bottom: BorderSide(color: Colors.grey.shade300, width: 1),
                ),
              ),
              child: LayoutBuilder(
                builder: (context, constraints) {
                  final isSmallScreen = constraints.maxWidth < 600;
                  final buttonStyle = OutlinedButton.styleFrom(
                    padding: isSmallScreen
                        ? EdgeInsets.symmetric(horizontal: 6, vertical: 4)
                        : EdgeInsets.symmetric(horizontal: 8, vertical: 6),
                    textStyle: TextStyle(
                      fontSize: isSmallScreen ? 12 : 14,
                    ),
                    minimumSize: Size(0, isSmallScreen ? 30 : 36),
                    side: BorderSide(color: Colors.grey.shade300),
                  );

                  return SingleChildScrollView(
                    scrollDirection: Axis.horizontal,
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.start, // Left-aligned content
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        // New Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _navigateToNewPortfolioPage,
                            icon: Icon(Icons.add, color: Colors.orange.shade700, size: 20),
                            padding: EdgeInsets.all(4),
                            tooltip: 'New',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _navigateToNewPortfolioPage,
                            icon: Icon(Icons.add, color: Colors.orange.shade700, size: 20),
                            label: Text('New'),
                            style: buttonStyle.copyWith(
                              backgroundColor: MaterialStateProperty.all(Colors.white),
                              foregroundColor: MaterialStateProperty.all(Colors.black),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Delete Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _hasSelectedItems() ? _deleteSelected : null,
                            icon: Icon(Icons.delete,
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                                size: 20
                            ),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Delete',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _hasSelectedItems() ? _deleteSelected : null,
                            icon: Icon(Icons.delete,
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                                size: 20
                            ),
                            label: Text(
                              'Delete',
                              style: TextStyle(
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                              ),
                            ),
                            style: buttonStyle.copyWith(
                              foregroundColor: MaterialStateProperty.all(
                                _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                              ),
                              side: MaterialStateProperty.all(
                                BorderSide(color: Colors.grey.shade300),
                              ),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Search Field
                        Container(
                          width: isSmallScreen ? 180 : 300,
                          child: TextField(
                            controller: _searchController,
                            onChanged: (value) {
                              setState(() {
                                _currentPage = 1;
                              });
                            },
                            decoration: InputDecoration(
                              isDense: true,
                              hintText: 'Search...',
                              suffixIcon: Icon(Icons.search, color: Colors.orange.shade700),
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(4),
                              ),
                              contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                            ),
                          ),
                        ),

                        SizedBox(width: 12),

                        // Export Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _exportData,
                            icon: Icon(Icons.download, color: Colors.orange.shade700, size: 20),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Export',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _exportData,
                            icon: Icon(Icons.download, color: Colors.orange.shade700, size: 20),
                            label: Text('Export'),
                            style: buttonStyle.copyWith(
                              backgroundColor: MaterialStateProperty.all(Colors.white),
                              foregroundColor: MaterialStateProperty.all(Colors.black),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Refresh Button
                        IconButton(
                          onPressed: _refreshData,
                          icon: Icon(Icons.refresh, color: Colors.orange.shade700, size: 20),
                          padding: EdgeInsets.all(4),
                          tooltip: 'Refresh',
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),

            // Table area
            Expanded(
              child: Container(
                margin: EdgeInsets.all(16),
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.grey.shade300),
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(4),
                ),
                child: Column(
                  children: [
                    // Table with synchronized scrolling
                    Expanded(
                      child: _paginatedData.isEmpty
                          ? Center(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(
                              Icons.folder_open,
                              size: 64,
                              color: Colors.grey.shade400,
                            ),
                            SizedBox(height: 16),
                            Text(
                              'No portfolios found',
                              style: TextStyle(
                                fontSize: 18,
                                color: Colors.grey.shade600,
                              ),
                            ),
                            SizedBox(height: 8),
                            Text(
                              'Click "New" to add your first portfolio',
                              style: TextStyle(
                                fontSize: 14,
                                color: Colors.grey.shade500,
                              ),
                            ),
                          ],
                        ),
                      )
                          : SingleChildScrollView(
                        controller: _horizontalScrollController,
                        scrollDirection: Axis.horizontal,
                        child: Column(
                          children: [
                            // Table header
                            Row(
                              children: [
                                _buildResizableColumn(
                                  title: '',
                                  columnKey: 'Checkbox',
                                  isLast: false,
                                  customContent: Center(
                                    child: Checkbox(
                                      value: _selectAll,
                                      onChanged: (value) => _toggleSelectAll(),
                                    ),
                                  ),
                                ),
                                _buildResizableColumn(
                                  title: 'Portfolio Name',
                                  columnKey: 'PortfolioName',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Portfolio Code',
                                  columnKey: 'PortfolioCode',
                                  isLast: true,
                                ),
                              ],
                            ),

                            // Table body
                            Expanded(
                              child: SingleChildScrollView(
                                child: Column(
                                  children: _paginatedData.map((portfolio) {
                                    return Row(
                                      children: [
                                        _buildDataCell(
                                          '',
                                          'Checkbox',
                                          customContent: Center(
                                            child: Checkbox(
                                              value: portfolio['selected'],
                                              onChanged: (value) {
                                                setState(() {
                                                  portfolio['selected'] = value;
                                                });
                                              },
                                            ),
                                          ),
                                        ),
                                        _buildDataCell(portfolio['portfolioName'] ?? '', 'PortfolioName'),
                                        _buildDataCell(portfolio['portfolioCode'] ?? '', 'PortfolioCode'),
                                      ],
                                    );
                                  }).toList(),
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                    // Pagination controls
                    if (_totalPages > 0) _buildPaginationControls(),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// New Portfolio Page
class NewPortfolioPage extends StatefulWidget {
  @override
  _NewPortfolioPageState createState() => _NewPortfolioPageState();
}

class _NewPortfolioPageState extends State<NewPortfolioPage> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController _portfolioNameController = TextEditingController();
  final TextEditingController _portfolioCodeController = TextEditingController();

  @override
  void dispose(){
    _portfolioNameController.dispose();
    _portfolioCodeController.dispose();
    super.dispose();
  }

  void _savePortfolio() {
    if (_formKey.currentState!.validate()) {
      Navigator.pop(context, {
        'portfolioName': _portfolioNameController.text,
        'portfolioCode': _portfolioCodeController.text,
      });
    }
  }

  void _saveAndNew() {
    if (_formKey.currentState!.validate()) {
      Navigator.pop(context, {
        'portfolioName': _portfolioNameController.text,
        'portfolioCode': _portfolioCodeController.text,
        'keepOpen': true,
      });
    }
  }

  void _deletePortfolio() {
    Navigator.pop(context);
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        Navigator.pop(context, null);
        return false;
      },
      child: Scaffold(
        appBar: AppBar(
          title: Text('Portfolio'),
          backgroundColor: Colors.white,
          foregroundColor: Colors.black,
          elevation: 0,
          leading: IconButton(
            onPressed: () => Navigator.pop(context, null),
            icon: Icon(Icons.arrow_back, color: Colors.black),
          ),
          actions: [
            IconButton(
              onPressed: () => Navigator.pop(context, null),
              icon: Icon(Icons.arrow_back),
            ),
            IconButton(
              onPressed: () => Navigator.pop(context, null),
              icon: Icon(Icons.arrow_forward),
            ),
            IconButton(
              onPressed: () => _formKey.currentState?.reset(),
              icon: Icon(Icons.refresh),
            ),
          ],
        ),
        body: Container(
          color: Colors.grey.shade50,
          child: Column(
            children: [
              // Action buttons
              Container(
                padding: EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.white,
                  border: Border(
                    bottom: BorderSide(color: Colors.grey.shade300, width: 1),
                  ),
                ),
                child: LayoutBuilder(
                  builder: (context, constraints) {
                    bool isSmallScreen = constraints.maxWidth < 600;

                    if (isSmallScreen) {
                      // Stack buttons vertically on small screens
                      return Column(
                        children: [
                          Row(
                            children: [
                              Expanded(
                                child: OutlinedButton.icon(
                                  onPressed: _deletePortfolio,
                                  icon: Icon(Icons.delete, color: Colors.red.shade400, size: 18),
                                  label: Text('Delete', style: TextStyle(fontSize: 12)),
                                  style: OutlinedButton.styleFrom(
                                    foregroundColor: Colors.red.shade400,
                                    side: BorderSide(color: Colors.grey.shade300),
                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                  ),
                                ),
                              ),
                            ],
                          ),
                          SizedBox(height: 6),
                          Row(
                            children: [
                              Expanded(
                                child: OutlinedButton.icon(
                                  onPressed: _saveAndNew,
                                  icon: Icon(Icons.save, color: Colors.orange.shade700, size: 18),
                                  label: Text('Save & New', style: TextStyle(fontSize: 12)),
                                  style: OutlinedButton.styleFrom(
                                    foregroundColor: Colors.orange.shade700,
                                    side: BorderSide(color: Colors.orange.shade700),
                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                  ),
                                ),
                              ),
                              SizedBox(width: 6),
                              Expanded(
                                child: ElevatedButton.icon(
                                  onPressed: _savePortfolio,
                                  icon: Icon(Icons.save, color: Colors.white, size: 18),
                                  label: Text('Save', style: TextStyle(fontSize: 12)),
                                  style: ElevatedButton.styleFrom(
                                    backgroundColor: Colors.orange.shade700,
                                    foregroundColor: Colors.white,
                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ],
                      );
                    } else {
                      // Original horizontal layout for larger screens
                      return Row(
                        children: [
                          OutlinedButton.icon(
                            onPressed: _deletePortfolio,
                            icon: Icon(Icons.delete, color: Colors.red.shade400, size: 20),
                            label: Text('Delete'),
                            style: OutlinedButton.styleFrom(
                              foregroundColor: Colors.red.shade400,
                              side: BorderSide(color: Colors.grey.shade300),
                            ),
                          ),
                          Spacer(),
                          OutlinedButton.icon(
                            onPressed: _saveAndNew,
                            icon: Icon(Icons.save, color: Colors.orange.shade700, size: 20),
                            label: Text('Save and New'),
                            style: OutlinedButton.styleFrom(
                              foregroundColor: Colors.orange.shade700,
                              side: BorderSide(color: Colors.orange.shade700),
                            ),
                          ),
                          SizedBox(width: 8),
                          ElevatedButton.icon(
                            onPressed: _savePortfolio,
                            icon: Icon(Icons.save, color: Colors.white, size: 20),
                            label: Text('Save'),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.orange.shade700,
                              foregroundColor: Colors.white,
                            ),
                          ),
                        ],
                      );
                    }
                  },
                ),
              ),

              // Form content
              Expanded(
                child: SingleChildScrollView(
                  padding: EdgeInsets.all(16),
                  child: Form(
                    key: _formKey,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Portfolio',
                          style: TextStyle(
                            fontSize: 24,
                            fontWeight: FontWeight.bold,
                            color: Colors.black87,
                          ),
                        ),
                        SizedBox(height: 24),

                        // Portfolio Name
                        TextFormField(
                          controller: _portfolioNameController,
                          decoration: InputDecoration(
                            labelText: 'Portfolio Name*',
                            border: OutlineInputBorder(),
                            contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
                          ),
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Please enter Portfolio Name';
                            }
                            return null;
                          },
                        ),
                        SizedBox(height: 32),
                        TextFormField(
                          controller: _portfolioCodeController,
                          decoration: InputDecoration(
                            labelText: 'Portfolio Code*',
                            border: OutlineInputBorder(),
                            contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
                          ),
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Please enter Portfolio Code';
                            }
                            return null;
                          },
                        ),
                        SizedBox(height: 32),
                      ],
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Project Type Page
class ProjectTypePage extends StatefulWidget {
  @override
  _ProjectTypePageState createState() => _ProjectTypePageState();
}

class _ProjectTypePageState extends State<ProjectTypePage> {
  final ScrollController _horizontalScrollController = ScrollController();
  final TextEditingController _searchController = TextEditingController();

  // Column widths - can be adjusted
  Map<String, double> columnWidths = {
    'Checkbox': 60,
    'TypeName': 730,
    'TypeCode': 730,
  };

  // Map column keys to data field names
  Map<String, String> columnToDataField = {
    'TypeName': 'typeName',
    'TypeCode': 'typeCode',
  };

  // Sorting state
  String _sortColumn = '';
  bool _sortAscending = true;

  // Pagination state
  int _currentPage = 1;
  int _pageSize = 20;
  final List<int> _pageSizeOptions = [10, 20, 50, 100];

  // Sample data structure
  List<Map<String, dynamic>> _typesData = [
    {
      'selected': false,
      'typeName': 'Station Wide',
      'typeCode': 'SW',
    },
    {
      'selected': false,
      'typeName': 'Area Wide',
      'typeCode': 'AW',
    },
    {
      'selected': false,
      'typeName': 'JCF Wide',
      'typeCode': 'GBL',
    },
  ];

  bool _selectAll = false;

  @override
  void dispose() {
    _horizontalScrollController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  List<Map<String, dynamic>> get _filteredData {
    var filtered = _typesData;

    // Apply search filter
    if (_searchController.text.isNotEmpty) {
      filtered = filtered.where((type) {
        return type.values.any((value) =>
            value.toString().toLowerCase().contains(_searchController.text.toLowerCase()));
      }).toList();
    }

    // Apply sorting
    if (_sortColumn.isNotEmpty) {
      String dataField = columnToDataField[_sortColumn] ?? _sortColumn;
      filtered.sort((a, b) {
        var aValue = a[dataField] ?? '';
        var bValue = b[dataField] ?? '';

        int comparison = aValue.toString().compareTo(bValue.toString());
        return _sortAscending ? comparison : -comparison;
      });
    }

    return filtered;
  }

  List<Map<String, dynamic>> get _paginatedData {
    var filtered = _filteredData;
    int startIndex = (_currentPage - 1) * _pageSize;
    int endIndex = startIndex + _pageSize;

    if (startIndex >= filtered.length) return [];
    if (endIndex > filtered.length) endIndex = filtered.length;

    return filtered.sublist(startIndex, endIndex);
  }

  int get _totalPages {
    return (_filteredData.length / _pageSize).ceil();
  }

  void _refreshData() {
    setState(() {
      // Unselect all checkboxes
      for (var type in _typesData) {
        type['selected'] = false;
      }
      _selectAll = false;
      // add actual data refresh logic here
    });
  }

  void _navigateToNewTypePage() async {
    final result = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => NewTypePage(),
      ),
    );

    if (result != null) {
      setState(() {
        _typesData.add({
          'selected': false,
          'typeName': result['typeName'],
          'typeCode': result['typeCode'],
        });
      });

      // If keepOpen flag is set, reopen the page
      if (result['keepOpen'] == true) {
        _navigateToNewTypePage();
      }
    }
  }

  void _toggleSelectAll() {
    setState(() {
      _selectAll = !_selectAll;
      for (var type in _paginatedData) {
        type['selected'] = _selectAll;
      }
    });
  }

  void _deleteSelected() {
    setState(() {
      _typesData.removeWhere((type) => type['selected'] == true);
      _selectAll = false;
      // Adjust current page if needed
      if (_currentPage > _totalPages && _totalPages > 0) {
        _currentPage = _totalPages;
      }
    });
  }

  void _exportData() {
    // Add export functionality here
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Export functionality would be implemented here')),
    );
  }

  void _showFilterDialog(String columnKey) {
    // Add filter dialog functionality here
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Filter ${columnKey}'),
        content: Text('Filter functionality would be implemented here'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Close'),
          ),
        ],
      ),
    );
  }

  void _sortData(String columnKey) {
    setState(() {
      if (_sortColumn == columnKey) {
        _sortAscending = !_sortAscending;
      } else {
        _sortColumn = columnKey;
        _sortAscending = true;
      }
    });
  }

  bool _hasSelectedItems() {
    return _typesData.any((type) => type['selected'] == true);
  }

  Widget _buildResizableColumn({
    required String title,
    required String columnKey,
    required bool isLast,
    Widget? customContent,
  }) {
    return Container(
      width: columnWidths[columnKey],
      child: Row(
        children: [
          Expanded(
            child: Container(
              height: 40, // Fixed height for consistent checkbox alignment
              padding: EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.grey.shade200,
                border: Border(
                  right: BorderSide(color: Colors.grey.shade400),
                  bottom: BorderSide(color: Colors.grey.shade400),
                ),
              ),
              child: customContent ??
                  Row(
                    children: [
                      Expanded(
                        child: Text(
                          title,
                          style: TextStyle(fontWeight: FontWeight.bold, fontSize: 12),
                          overflow: TextOverflow.ellipsis,
                        ),
                      ),
                      if (columnKey == 'TypeName') ...[
                        GestureDetector(
                          onTap: () => _sortData(columnKey),
                          child: Icon(
                            _sortColumn == columnKey
                                ? (_sortAscending ? Icons.arrow_upward : Icons.arrow_downward)
                                : Icons.unfold_more,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                        ),
                        SizedBox(width: 4),
                      ],
                      if (columnKey != 'Checkbox')
                        GestureDetector(
                          onTap: () => _showFilterDialog(columnKey),
                          child: Icon(
                            Icons.filter_alt_outlined,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                        ),
                    ],
                  ),
            ),
          ),
          if (!isLast)
            GestureDetector(
              onPanUpdate: (details) {
                setState(() {
                  columnWidths[columnKey] =
                      (columnWidths[columnKey]! + details.delta.dx).clamp(60.0, 400.0);
                });
              },
              child: Container(
                width: 4,
                height: 40,
                color: Colors.grey.shade400,
                child: MouseRegion(
                  cursor: SystemMouseCursors.resizeColumn,
                  child: Container(),
                ),
              ),
            ),
        ],
      ),
    );
  }

  Widget _buildDataCell(dynamic data, String columnKey, {Widget? customContent}) {
    return Container(
      width: columnWidths[columnKey],
      height: 40, // Fixed height for consistent alignment
      padding: EdgeInsets.all(8),
      decoration: BoxDecoration(
        border: Border(
          right: BorderSide(color: Colors.grey.shade400),
          bottom: BorderSide(color: Colors.grey.shade400),
        ),
      ),
      child: Align(
        alignment: Alignment.centerLeft,
        child: customContent ??
            Text(
              data.toString(),
              style: TextStyle(fontSize: 12),
              overflow: TextOverflow.ellipsis,
            ),
      ),
    );
  }

  Widget _buildPaginationControls() {
    return Container(
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        border: Border(
          top: BorderSide(color: Colors.grey.shade300, width: 1),
        ),
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          // Page numbers
          Row(
            children: [
              for (int i = 1; i <= _totalPages && i <= 4; i++)
                GestureDetector(
                  onTap: () {
                    setState(() {
                      _currentPage = i;
                    });
                  },
                  child: Container(
                    margin: EdgeInsets.symmetric(horizontal: 4),
                    padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                    decoration: BoxDecoration(
                      color: _currentPage == i ? Colors.orange.shade700 : Colors.transparent,
                      borderRadius: BorderRadius.circular(4),
                    ),
                    child: Text(
                      i.toString(),
                      style: TextStyle(
                        color: _currentPage == i ? Colors.white : Colors.black,
                        fontWeight: _currentPage == i ? FontWeight.bold : FontWeight.normal,
                      ),
                    ),
                  ),
                ),
            ],
          ),
          // Page size selector
          Row(
            children: [
              Text('Page Size: ', style: TextStyle(fontSize: 14)),
              DropdownButton<int>(
                value: _pageSize,
                items: _pageSizeOptions.map((size) {
                  return DropdownMenuItem<int>(
                    value: size,
                    child: Text(size.toString()),
                  );
                }).toList(),
                onChanged: (value) {
                  setState(() {
                    _pageSize = value!;
                    _currentPage = 1; // Reset to first page
                  });
                },
              ),
            ],
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        color: Colors.grey.shade50,
        child: Column(
          children: [
            // Header with buttons and search
            Container(
              width: double.infinity, // Full width
              padding: EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.white,
                border: Border(
                  bottom: BorderSide(color: Colors.grey.shade300, width: 1),
                ),
              ),
              child: LayoutBuilder(
                builder: (context, constraints) {
                  final isSmallScreen = constraints.maxWidth < 600;
                  final buttonStyle = OutlinedButton.styleFrom(
                    padding: isSmallScreen
                        ? EdgeInsets.symmetric(horizontal: 6, vertical: 4)
                        : EdgeInsets.symmetric(horizontal: 8, vertical: 6),
                    textStyle: TextStyle(
                      fontSize: isSmallScreen ? 12 : 14,
                    ),
                    minimumSize: Size(0, isSmallScreen ? 30 : 36),
                    side: BorderSide(color: Colors.grey.shade300),
                  );

                  return SingleChildScrollView(
                    scrollDirection: Axis.horizontal,
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.start, // Left-aligned content
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        // New Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _navigateToNewTypePage,
                            icon: Icon(Icons.add, color: Colors.orange.shade700, size: 20),
                            padding: EdgeInsets.all(4),
                            tooltip: 'New',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _navigateToNewTypePage,
                            icon: Icon(Icons.add, color: Colors.orange.shade700, size: 20),
                            label: Text('New'),
                            style: buttonStyle.copyWith(
                              backgroundColor: MaterialStateProperty.all(Colors.white),
                              foregroundColor: MaterialStateProperty.all(Colors.black),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Delete Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _hasSelectedItems() ? _deleteSelected : null,
                            icon: Icon(Icons.delete,
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                                size: 20
                            ),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Delete',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _hasSelectedItems() ? _deleteSelected : null,
                            icon: Icon(Icons.delete,
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                                size: 20
                            ),
                            label: Text(
                              'Delete',
                              style: TextStyle(
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                              ),
                            ),
                            style: buttonStyle.copyWith(
                              foregroundColor: MaterialStateProperty.all(
                                _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                              ),
                              side: MaterialStateProperty.all(
                                BorderSide(color: Colors.grey.shade300),
                              ),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Search Field
                        Container(
                          width: isSmallScreen ? 180 : 300,
                          child: TextField(
                            controller: _searchController,
                            onChanged: (value) {
                              setState(() {
                                _currentPage = 1;
                              });
                            },
                            decoration: InputDecoration(
                              isDense: true,
                              hintText: 'Search...',
                              suffixIcon: Icon(Icons.search, color: Colors.orange.shade700),
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(4),
                              ),
                              contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                            ),
                          ),
                        ),

                        SizedBox(width: 12),

                        // Export Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _exportData,
                            icon: Icon(Icons.download, color: Colors.orange.shade700, size: 20),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Export',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _exportData,
                            icon: Icon(Icons.download, color: Colors.orange.shade700, size: 20),
                            label: Text('Export'),
                            style: buttonStyle.copyWith(
                              backgroundColor: MaterialStateProperty.all(Colors.white),
                              foregroundColor: MaterialStateProperty.all(Colors.black),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Refresh Button
                        IconButton(
                          onPressed: _refreshData,
                          icon: Icon(Icons.refresh, color: Colors.orange.shade700, size: 20),
                          padding: EdgeInsets.all(4),
                          tooltip: 'Refresh',
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),

            // Table area
            Expanded(
              child: Container(
                margin: EdgeInsets.all(16),
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.grey.shade300),
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(4),
                ),
                child: Column(
                  children: [
                    // Table with synchronized scrolling
                    Expanded(
                      child: _paginatedData.isEmpty
                          ? Center(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(
                              Icons.folder_open,
                              size: 64,
                              color: Colors.grey.shade400,
                            ),
                            SizedBox(height: 16),
                            Text(
                              'No types found',
                              style: TextStyle(
                                fontSize: 18,
                                color: Colors.grey.shade600,
                              ),
                            ),
                            SizedBox(height: 8),
                            Text(
                              'Click "New" to add your first type',
                              style: TextStyle(
                                fontSize: 14,
                                color: Colors.grey.shade500,
                              ),
                            ),
                          ],
                        ),
                      )
                          : SingleChildScrollView(
                        controller: _horizontalScrollController,
                        scrollDirection: Axis.horizontal,
                        child: Column(
                          children: [
                            // Table header
                            Row(
                              children: [
                                _buildResizableColumn(
                                  title: '',
                                  columnKey: 'Checkbox',
                                  isLast: false,
                                  customContent: Center(
                                    child: Checkbox(
                                      value: _selectAll,
                                      onChanged: (value) => _toggleSelectAll(),
                                    ),
                                  ),
                                ),
                                _buildResizableColumn(
                                  title: 'Type Name',
                                  columnKey: 'TypeName',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Type Code',
                                  columnKey: 'TypeCode',
                                  isLast: true,
                                ),
                              ],
                            ),

                            // Table body
                            Expanded(
                              child: SingleChildScrollView(
                                child: Column(
                                  children: _paginatedData.map((type) {
                                    return Row(
                                      children: [
                                        _buildDataCell(
                                          '',
                                          'Checkbox',
                                          customContent: Center(
                                            child: Checkbox(
                                              value: type['selected'],
                                              onChanged: (value) {
                                                setState(() {
                                                  type['selected'] = value;
                                                });
                                              },
                                            ),
                                          ),
                                        ),
                                        _buildDataCell(type['typeName'] ?? '', 'TypeName'),
                                        _buildDataCell(type['typeCode'] ?? '', 'TypeCode'),
                                      ],
                                    );
                                  }).toList(),
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                    // Pagination controls
                    if (_totalPages > 0) _buildPaginationControls(),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// New Type Page
class NewTypePage extends StatefulWidget {
  @override
  _NewTypePageState createState() => _NewTypePageState();
}

class _NewTypePageState extends State<NewTypePage> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController _typeNameController = TextEditingController();
  final TextEditingController _typeCodeController = TextEditingController();

  // For the project planning table
  List<ProjectPlanning> _projectPlannings = [];
  int _selectedTabIndex = 0;

  @override
  void initState() {
    super.initState();
    // Initialize with some sample project plannings
    _projectPlannings = [
    ];
  }

  @override
  void dispose() {
    _typeNameController.dispose();
    _typeCodeController.dispose();
    super.dispose();
  }

  void _saveType() {
    if (_formKey.currentState!.validate()) {
      Navigator.pop(context, {
        'typeName': _typeNameController.text,
        'typeCode': _typeCodeController.text,
      });
    }
  }

  void _saveAndNew() {
    if (_formKey.currentState!.validate()) {
      Navigator.pop(context, {
        'typeName': _typeNameController.text,
        'typeCode': _typeCodeController.text,
        'keepOpen': true,
      });
    }
  }

  void _deleteType() {
    Navigator.pop(context);
  }

  void _addNewProject() {
    setState(() {
      _projectPlannings.add(ProjectPlanning(
        projectName: '',
        projectManager: '',
        projectBudget: '',
        projectStartDate: DateTime.now(),
        projectEndDate: DateTime.now(),
        team: '',
        projectCategory: '',
        division: '',
        unit: '',
        projectStatus: '',
      ));
    });
  }

  void _deleteProject(int index) {
    setState(() {
      _projectPlannings.removeAt(index);
    });
  }

  Widget _buildProjectPlanningsTab() {
    return Container(
      padding: EdgeInsets.all(16),
      child: Column(
        children: [

          // Action buttons
          Container(
            width: double.infinity,
            child: SingleChildScrollView(
              scrollDirection: Axis.horizontal,
              child: Row(
                children: [
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.add, size: 16),
                    label: Text('New'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.link, size: 16),
                    label: Text('Link'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.link_off, size: 16),
                    label: Text('Unlink'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.delete, size: 16, color: Colors.red),
                    label: Text('Delete'),
                    style: OutlinedButton.styleFrom(
                      foregroundColor: Colors.red,
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.check_circle, size: 16, color: Colors.green),
                    label: Text('Complete'),
                    style: OutlinedButton.styleFrom(
                      foregroundColor: Colors.green,
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  Container(
                    width: 180,
                    child: TextField(
                      decoration: InputDecoration(
                        isDense: true,
                        hintText: 'Search...',
                        prefixIcon: Icon(Icons.search, size: 16),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(4),
                          borderSide: BorderSide(color: Colors.grey.shade300),
                        ),
                        contentPadding: EdgeInsets.symmetric(vertical: 8, horizontal: 8),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
          SizedBox(height: 16),
          // Table
          Expanded(
            child: Container(
              decoration: BoxDecoration(
                border: Border.all(color: Colors.grey.shade300),
                borderRadius: BorderRadius.circular(4),
              ),
              child: Column(
                children: [
                  // Table header
                  Container(
                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 12),
                    decoration: BoxDecoration(
                      color: Colors.grey.shade100,
                      border: Border(bottom: BorderSide(color: Colors.grey.shade300)),
                    ),
                    child: SingleChildScrollView(
                      scrollDirection: Axis.horizontal,
                      child: Row(
                        children: [
                          Container(width: 40, child: Checkbox(value: false, onChanged: (_) {})),
                          SizedBox(width: 8),
                          _buildCompactTableHeader('Project Name'),
                          _buildCompactTableHeader('Project Manager'),
                          _buildCompactTableHeader('Project Budget'),
                          _buildCompactTableHeader('Project Start Date'),
                          _buildCompactTableHeader('Project End Date'),
                          _buildCompactTableHeader('Team'),
                          _buildCompactTableHeader('Project Category'),
                          _buildCompactTableHeader('Division'),
                          _buildCompactTableHeader('Unit'),
                          _buildCompactTableHeader('Project Status'),
                        ],
                      ),
                    ),
                  ),
                  // Table content
                  Expanded(
                    child: _projectPlannings.isEmpty
                        ? Center(child: Text('No data to display', style: TextStyle(color: Colors.grey)))
                        : ListView.builder(
                      itemCount: _projectPlannings.length,
                      itemBuilder: (context, index) {
                        return Container(
                          padding: EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                          decoration: BoxDecoration(
                            border: Border(bottom: BorderSide(color: Colors.grey.shade200)),
                          ),
                          child: Row(
                            children: [
                              Container(width: 40, child: Checkbox(value: false, onChanged: (_) {})),
                              Icon(Icons.add, size: 16, color: Colors.orange.shade700),
                              SizedBox(width: 16),
                              _buildTableCell(_projectPlannings[index].projectName, flex: 2),
                              _buildTableCell(_projectPlannings[index].projectManager),
                              _buildTableCell(_projectPlannings[index].projectBudget),
                              _buildTableCell('${_projectPlannings[index].projectStartDate.month}/${_projectPlannings[index].projectStartDate.day}/${_projectPlannings[index].projectStartDate.year}'),
                              _buildTableCell('${_projectPlannings[index].projectEndDate.month}/${_projectPlannings[index].projectEndDate.day}/${_projectPlannings[index].projectEndDate.year}'),
                              _buildTableCell(_projectPlannings[index].team),
                              _buildTableCell(_projectPlannings[index].projectCategory),
                              _buildTableCell(_projectPlannings[index].division),
                              _buildTableCell(_projectPlannings[index].unit),
                              _buildTableCell(_projectPlannings[index].projectStatus),
                            ],
                          ),
                        );
                      },
                    ),
                  ),
                ],
              ),
            ),
          ),
          // Pagination
          Container(
            padding: EdgeInsets.symmetric(vertical: 16),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Container(
                  padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                  decoration: BoxDecoration(
                    color: Colors.orange.shade700,
                    borderRadius: BorderRadius.circular(4),
                  ),
                  child: Text('1', style: TextStyle(color: Colors.white, fontWeight: FontWeight.w600)),
                ),
                Row(
                  children: [
                    Text('Page Size: '),
                    DropdownButton<int>(
                      value: 20,
                      items: [10, 20, 50, 100].map((size) => DropdownMenuItem(
                        value: size,
                        child: Text(size.toString()),
                      )).toList(),
                      onChanged: (value) {},
                      underline: Container(),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildCompactTableHeader(String title) {
    return Container(
      width: 120,
      padding: EdgeInsets.symmetric(horizontal: 4),
      child: Row(
        children: [
          Expanded(
            child: Text(
              title,
              style: TextStyle(fontWeight: FontWeight.w600, fontSize: 10),
              overflow: TextOverflow.ellipsis,
            ),
          ),
          Icon(Icons.filter_list, size: 10, color: Colors.grey),
        ],
      ),
    );
  }

  Widget _buildTableCell(String text, {int flex = 1}) {
    return Expanded(
      flex: flex,
      child: Text(
        text.isEmpty ? '-' : text,
        style: TextStyle(fontSize: 12),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        Navigator.pop(context, null);
        return false;
      },
      child: Scaffold(
        appBar: AppBar(
          title: Text('Project Type'),
          backgroundColor: Colors.white,
          foregroundColor: Colors.black,
          elevation: 0,
          leading: IconButton(
            onPressed: () => Navigator.pop(context, null),
            icon: Icon(Icons.arrow_back, color: Colors.black),
          ),
          actions: [
            IconButton(
              onPressed: () => Navigator.pop(context, null),
              icon: Icon(Icons.arrow_back),
            ),
            IconButton(
              onPressed: () => Navigator.pop(context, null),
              icon: Icon(Icons.arrow_forward),
            ),
            IconButton(
              onPressed: () => _formKey.currentState?.reset(),
              icon: Icon(Icons.refresh),
            ),
          ],
        ),
        body: Container(
          color: Colors.grey.shade50,
          child: Column(
            children: [
              // Action buttons
              Container(
                padding: EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.white,
                  border: Border(
                    bottom: BorderSide(color: Colors.grey.shade300, width: 1),
                  ),
                ),
                child: LayoutBuilder(
                  builder: (context, constraints) {
                    bool isSmallScreen = constraints.maxWidth < 600;

                    if (isSmallScreen) {
                      // Stack buttons vertically on small screens
                      return Column(
                        children: [
                          Row(
                            children: [
                              Expanded(
                                child: OutlinedButton.icon(
                                  onPressed: _deleteType,
                                  icon: Icon(Icons.delete, color: Colors.red.shade400, size: 18),
                                  label: Text('Delete', style: TextStyle(fontSize: 12)),
                                  style: OutlinedButton.styleFrom(
                                    foregroundColor: Colors.red.shade400,
                                    side: BorderSide(color: Colors.grey.shade300),
                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                  ),
                                ),
                              ),
                            ],
                          ),
                          SizedBox(height: 6),
                          Row(
                            children: [
                              Expanded(
                                child: OutlinedButton.icon(
                                  onPressed: _saveAndNew,
                                  icon: Icon(Icons.save, color: Colors.orange.shade700, size: 18),
                                  label: Text('Save & New', style: TextStyle(fontSize: 12)),
                                  style: OutlinedButton.styleFrom(
                                    foregroundColor: Colors.orange.shade700,
                                    side: BorderSide(color: Colors.orange.shade700),
                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                  ),
                                ),
                              ),
                              SizedBox(width: 6),
                              Expanded(
                                child: ElevatedButton.icon(
                                  onPressed: _saveType,
                                  icon: Icon(Icons.save, color: Colors.white, size: 18),
                                  label: Text('Save', style: TextStyle(fontSize: 12)),
                                  style: ElevatedButton.styleFrom(
                                    backgroundColor: Colors.orange.shade700,
                                    foregroundColor: Colors.white,
                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ],
                      );
                    } else {
                      // Original horizontal layout for larger screens
                      return Row(
                        children: [
                          OutlinedButton.icon(
                            onPressed: _deleteType,
                            icon: Icon(Icons.delete, color: Colors.red.shade400, size: 20),
                            label: Text('Delete'),
                            style: OutlinedButton.styleFrom(
                              foregroundColor: Colors.red.shade400,
                              side: BorderSide(color: Colors.grey.shade300),
                            ),
                          ),
                          Spacer(),
                          OutlinedButton.icon(
                            onPressed: _saveAndNew,
                            icon: Icon(Icons.save, color: Colors.orange.shade700, size: 20),
                            label: Text('Save and New'),
                            style: OutlinedButton.styleFrom(
                              foregroundColor: Colors.orange.shade700,
                              side: BorderSide(color: Colors.orange.shade700),
                            ),
                          ),
                          SizedBox(width: 8),
                          ElevatedButton.icon(
                            onPressed: _saveType,
                            icon: Icon(Icons.save, color: Colors.white, size: 20),
                            label: Text('Save'),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.orange.shade700,
                              foregroundColor: Colors.white,
                            ),
                          ),
                        ],
                      );
                    }
                  },
                ),
              ),

              // Form content
              Expanded(
                child: SingleChildScrollView(
                  padding: EdgeInsets.all(16),
                  child: Form(
                    key: _formKey,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Project Type',
                          style: TextStyle(
                            fontSize: 24,
                            fontWeight: FontWeight.bold,
                            color: Colors.black87,
                          ),
                        ),
                        SizedBox(height: 24),

                        // Project Type Name
                        TextFormField(
                          controller: _typeNameController,
                          decoration: InputDecoration(
                            labelText: 'Type Name*',
                            border: OutlineInputBorder(),
                            contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
                          ),
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Please enter Type Name';
                            }
                            return null;
                          },
                        ),
                        SizedBox(height: 32),
                        TextFormField(
                          controller: _typeCodeController,
                          decoration: InputDecoration(
                            labelText: 'Type Code*',
                            border: OutlineInputBorder(),
                            contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
                          ),
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Please enter Type Code';
                            }
                            return null;
                          },
                        ),
                        SizedBox(height: 32),

                        // Project Planning Table Section
                        Container(
                          decoration: BoxDecoration(
                            color: Colors.white,
                            borderRadius: BorderRadius.circular(8),
                            border: Border.all(color: Colors.grey.shade300),
                          ),
                          child: Column(
                            children: [
                              // Tab headers
                              Container(
                                decoration: BoxDecoration(
                                  border: Border(bottom: BorderSide(color: Colors.grey.shade300)),
                                ),
                                child: Row(
                                  children: [
                                    GestureDetector(
                                      onTap: () => setState(() => _selectedTabIndex = 0),
                                      child: Container(
                                        padding: EdgeInsets.symmetric(horizontal: 20, vertical: 12),
                                        decoration: BoxDecoration(
                                          color: _selectedTabIndex == 0 ? Colors.orange.shade700 : Colors.transparent,
                                          borderRadius: BorderRadius.only(
                                            topLeft: Radius.circular(8),
                                          ),
                                        ),
                                        child: Row(
                                          children: [
                                            Icon(
                                              Icons.task_alt,
                                              size: 16,
                                              color: _selectedTabIndex == 0 ? Colors.white : Colors.orange.shade700,
                                            ),
                                            SizedBox(width: 8),
                                            Text(
                                              'Project Plannings',
                                              style: TextStyle(
                                                color: _selectedTabIndex == 0 ? Colors.white : Colors.black87,
                                                fontWeight: FontWeight.w500,
                                              ),
                                            ),
                                          ],
                                        ),
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                              // Tab content
                              Container(
                                height: 400,
                                child: _buildProjectPlanningsTab(),
                              ),
                            ],
                          ),
                        ),
                        SizedBox(height: 32),
                      ],
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}


// Responsible Department Page
class ResponsibleDepartmentPage extends StatefulWidget {
  @override
  _ResponsibleDepartmentPageState createState() => _ResponsibleDepartmentPageState();
}

class _ResponsibleDepartmentPageState extends State<ResponsibleDepartmentPage> {
  final ScrollController _horizontalScrollController = ScrollController();
  final TextEditingController _searchController = TextEditingController();

  // Column widths - can be adjusted
  Map<String, double> columnWidths = {
    'Checkbox': 60,
    'DepartmentName': 730,
    'DepartmentCode': 730,
  };

  // Map column keys to data field names
  Map<String, String> columnToDataField = {
    'DepartmentName': 'departmentName',
    'DepartmentCode': 'departmentCode',
  };

  // Sorting state
  String _sortColumn = '';
  bool _sortAscending = true;

  // Pagination state
  int _currentPage = 1;
  int _pageSize = 20;
  final List<int> _pageSizeOptions = [10, 20, 50, 100];

  // Sample data structure
  List<Map<String, dynamic>> _departmentsData = [

  ];

  bool _selectAll = false;

  @override
  void dispose() {
    _horizontalScrollController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  List<Map<String, dynamic>> get _filteredData {
    var filtered = _departmentsData;

    // Apply search filter
    if (_searchController.text.isNotEmpty) {
      filtered = filtered.where((department) {
        return department.values.any((value) =>
            value.toString().toLowerCase().contains(_searchController.text.toLowerCase()));
      }).toList();
    }

    // Apply sorting
    if (_sortColumn.isNotEmpty) {
      String dataField = columnToDataField[_sortColumn] ?? _sortColumn;
      filtered.sort((a, b) {
        var aValue = a[dataField] ?? '';
        var bValue = b[dataField] ?? '';

        int comparison = aValue.toString().compareTo(bValue.toString());
        return _sortAscending ? comparison : -comparison;
      });
    }

    return filtered;
  }

  List<Map<String, dynamic>> get _paginatedData {
    var filtered = _filteredData;
    int startIndex = (_currentPage - 1) * _pageSize;
    int endIndex = startIndex + _pageSize;

    if (startIndex >= filtered.length) return [];
    if (endIndex > filtered.length) endIndex = filtered.length;

    return filtered.sublist(startIndex, endIndex);
  }

  int get _totalPages {
    return (_filteredData.length / _pageSize).ceil();
  }

  void _refreshData() {
    setState(() {
      // Unselect all checkboxes
      for (var department in _departmentsData) {
        department['selected'] = false;
      }
      _selectAll = false;
      // add actual data refresh logic here
    });
  }

  void _navigateToNewDepartmentPage() async {
    final result = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => NewDepartmentPage(),
      ),
    );

    if (result != null) {
      setState(() {
        _departmentsData.add({
          'selected': false,
          'departmentName': result['departmentName'],
          'departmentCode': result['departmentCode'],
        });
      });

      // If keepOpen flag is set, reopen the page
      if (result['keepOpen'] == true) {
        _navigateToNewDepartmentPage();
      }
    }
  }

  void _toggleSelectAll() {
    setState(() {
      _selectAll = !_selectAll;
      for (var department in _paginatedData) {
        department['selected'] = _selectAll;
      }
    });
  }

  void _deleteSelected() {
    setState(() {
      _departmentsData.removeWhere((department) => department['selected'] == true);
      _selectAll = false;
      // Adjust current page if needed
      if (_currentPage > _totalPages && _totalPages > 0) {
        _currentPage = _totalPages;
      }
    });
  }

  void _exportData() {
    // Add export functionality here
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Export functionality would be implemented here')),
    );
  }

  void _showFilterDialog(String columnKey) {
    // Add filter dialog functionality here
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Filter ${columnKey}'),
        content: Text('Filter functionality would be implemented here'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Close'),
          ),
        ],
      ),
    );
  }

  void _sortData(String columnKey) {
    setState(() {
      if (_sortColumn == columnKey) {
        _sortAscending = !_sortAscending;
      } else {
        _sortColumn = columnKey;
        _sortAscending = true;
      }
    });
  }

  bool _hasSelectedItems() {
    return _departmentsData.any((department) => department['selected'] == true);
  }

  Widget _buildResizableColumn({
    required String title,
    required String columnKey,
    required bool isLast,
    Widget? customContent,
  }) {
    return Container(
      width: columnWidths[columnKey],
      child: Row(
        children: [
          Expanded(
            child: Container(
              height: 40, // Fixed height for consistent checkbox alignment
              padding: EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.grey.shade200,
                border: Border(
                  right: BorderSide(color: Colors.grey.shade400),
                  bottom: BorderSide(color: Colors.grey.shade400),
                ),
              ),
              child: customContent ??
                  Row(
                    children: [
                      Expanded(
                        child: Text(
                          title,
                          style: TextStyle(fontWeight: FontWeight.bold, fontSize: 12),
                          overflow: TextOverflow.ellipsis,
                        ),
                      ),
                      if (columnKey == 'DepartmentName') ...[
                        GestureDetector(
                          onTap: () => _sortData(columnKey),
                          child: Icon(
                            _sortColumn == columnKey
                                ? (_sortAscending ? Icons.arrow_upward : Icons.arrow_downward)
                                : Icons.unfold_more,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                        ),
                        SizedBox(width: 4),
                      ],
                      if (columnKey != 'Checkbox')
                        GestureDetector(
                          onTap: () => _showFilterDialog(columnKey),
                          child: Icon(
                            Icons.filter_alt_outlined,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                        ),
                    ],
                  ),
            ),
          ),
          if (!isLast)
            GestureDetector(
              onPanUpdate: (details) {
                setState(() {
                  columnWidths[columnKey] =
                      (columnWidths[columnKey]! + details.delta.dx).clamp(60.0, 400.0);
                });
              },
              child: Container(
                width: 4,
                height: 40,
                color: Colors.grey.shade400,
                child: MouseRegion(
                  cursor: SystemMouseCursors.resizeColumn,
                  child: Container(),
                ),
              ),
            ),
        ],
      ),
    );
  }

  Widget _buildDataCell(dynamic data, String columnKey, {Widget? customContent}) {
    return Container(
      width: columnWidths[columnKey],
      height: 40, // Fixed height for consistent alignment
      padding: EdgeInsets.all(8),
      decoration: BoxDecoration(
        border: Border(
          right: BorderSide(color: Colors.grey.shade400),
          bottom: BorderSide(color: Colors.grey.shade400),
        ),
      ),
      child: Align(
        alignment: Alignment.centerLeft,
        child: customContent ??
            Text(
              data.toString(),
              style: TextStyle(fontSize: 12),
              overflow: TextOverflow.ellipsis,
            ),
      ),
    );
  }

  Widget _buildPaginationControls() {
    return Container(
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        border: Border(
          top: BorderSide(color: Colors.grey.shade300, width: 1),
        ),
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          // Page numbers
          Row(
            children: [
              for (int i = 1; i <= _totalPages && i <= 4; i++)
                GestureDetector(
                  onTap: () {
                    setState(() {
                      _currentPage = i;
                    });
                  },
                  child: Container(
                    margin: EdgeInsets.symmetric(horizontal: 4),
                    padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                    decoration: BoxDecoration(
                      color: _currentPage == i ? Colors.orange.shade700 : Colors.transparent,
                      borderRadius: BorderRadius.circular(4),
                    ),
                    child: Text(
                      i.toString(),
                      style: TextStyle(
                        color: _currentPage == i ? Colors.white : Colors.black,
                        fontWeight: _currentPage == i ? FontWeight.bold : FontWeight.normal,
                      ),
                    ),
                  ),
                ),
            ],
          ),
          // Page size selector
          Row(
            children: [
              Text('Page Size: ', style: TextStyle(fontSize: 14)),
              DropdownButton<int>(
                value: _pageSize,
                items: _pageSizeOptions.map((size) {
                  return DropdownMenuItem<int>(
                    value: size,
                    child: Text(size.toString()),
                  );
                }).toList(),
                onChanged: (value) {
                  setState(() {
                    _pageSize = value!;
                    _currentPage = 1; // Reset to first page
                  });
                },
              ),
            ],
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        color: Colors.grey.shade50,
        child: Column(
          children: [
            // Header with buttons and search
            Container(
              width: double.infinity, // Full width
              padding: EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.white,
                border: Border(
                  bottom: BorderSide(color: Colors.grey.shade300, width: 1),
                ),
              ),
              child: LayoutBuilder(
                builder: (context, constraints) {
                  final isSmallScreen = constraints.maxWidth < 600;
                  final buttonStyle = OutlinedButton.styleFrom(
                    padding: isSmallScreen
                        ? EdgeInsets.symmetric(horizontal: 6, vertical: 4)
                        : EdgeInsets.symmetric(horizontal: 8, vertical: 6),
                    textStyle: TextStyle(
                      fontSize: isSmallScreen ? 12 : 14,
                    ),
                    minimumSize: Size(0, isSmallScreen ? 30 : 36),
                    side: BorderSide(color: Colors.grey.shade300),
                  );

                  return SingleChildScrollView(
                    scrollDirection: Axis.horizontal,
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.start, // Left-aligned content
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        // New Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _navigateToNewDepartmentPage,
                            icon: Icon(Icons.add, color: Colors.orange.shade700, size: 20),
                            padding: EdgeInsets.all(4),
                            tooltip: 'New',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _navigateToNewDepartmentPage,
                            icon: Icon(Icons.add, color: Colors.orange.shade700, size: 20),
                            label: Text('New'),
                            style: buttonStyle.copyWith(
                              backgroundColor: MaterialStateProperty.all(Colors.white),
                              foregroundColor: MaterialStateProperty.all(Colors.black),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Delete Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _hasSelectedItems() ? _deleteSelected : null,
                            icon: Icon(Icons.delete,
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                                size: 20
                            ),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Delete',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _hasSelectedItems() ? _deleteSelected : null,
                            icon: Icon(Icons.delete,
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                                size: 20
                            ),
                            label: Text(
                              'Delete',
                              style: TextStyle(
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                              ),
                            ),
                            style: buttonStyle.copyWith(
                              foregroundColor: MaterialStateProperty.all(
                                _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                              ),
                              side: MaterialStateProperty.all(
                                BorderSide(color: Colors.grey.shade300),
                              ),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Search Field
                        Container(
                          width: isSmallScreen ? 180 : 300,
                          child: TextField(
                            controller: _searchController,
                            onChanged: (value) {
                              setState(() {
                                _currentPage = 1;
                              });
                            },
                            decoration: InputDecoration(
                              isDense: true,
                              hintText: 'Search...',
                              suffixIcon: Icon(Icons.search, color: Colors.orange.shade700),
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(4),
                              ),
                              contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                            ),
                          ),
                        ),

                        SizedBox(width: 12),

                        // Export Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _exportData,
                            icon: Icon(Icons.download, color: Colors.orange.shade700, size: 20),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Export',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _exportData,
                            icon: Icon(Icons.download, color: Colors.orange.shade700, size: 20),
                            label: Text('Export'),
                            style: buttonStyle.copyWith(
                              backgroundColor: MaterialStateProperty.all(Colors.white),
                              foregroundColor: MaterialStateProperty.all(Colors.black),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Refresh Button
                        IconButton(
                          onPressed: _refreshData,
                          icon: Icon(Icons.refresh, color: Colors.orange.shade700, size: 20),
                          padding: EdgeInsets.all(4),
                          tooltip: 'Refresh',
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),

            // Table area
            Expanded(
              child: Container(
                margin: EdgeInsets.all(16),
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.grey.shade300),
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(4),
                ),
                child: Column(
                  children: [
                    // Table with synchronized scrolling
                    Expanded(
                      child: _paginatedData.isEmpty
                          ? Center(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(
                              Icons.folder_open,
                              size: 64,
                              color: Colors.grey.shade400,
                            ),
                            SizedBox(height: 16),
                            Text(
                              'No departments found',
                              style: TextStyle(
                                fontSize: 18,
                                color: Colors.grey.shade600,
                              ),
                            ),
                            SizedBox(height: 8),
                            Text(
                              'Click "New" to add your first department',
                              style: TextStyle(
                                fontSize: 14,
                                color: Colors.grey.shade500,
                              ),
                            ),
                          ],
                        ),
                      )
                          : SingleChildScrollView(
                        controller: _horizontalScrollController,
                        scrollDirection: Axis.horizontal,
                        child: Column(
                          children: [
                            // Table header
                            Row(
                              children: [
                                _buildResizableColumn(
                                  title: '',
                                  columnKey: 'Checkbox',
                                  isLast: false,
                                  customContent: Center(
                                    child: Checkbox(
                                      value: _selectAll,
                                      onChanged: (value) => _toggleSelectAll(),
                                    ),
                                  ),
                                ),
                                _buildResizableColumn(
                                  title: 'Department Name',
                                  columnKey: 'DepartmentName',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Department Code',
                                  columnKey: 'DepartmentCode',
                                  isLast: true,
                                ),
                              ],
                            ),

                            // Table body
                            Expanded(
                              child: SingleChildScrollView(
                                child: Column(
                                  children: _paginatedData.map((department) {
                                    return Row(
                                      children: [
                                        _buildDataCell(
                                          '',
                                          'Checkbox',
                                          customContent: Center(
                                            child: Checkbox(
                                              value: department['selected'],
                                              onChanged: (value) {
                                                setState(() {
                                                  department['selected'] = value;
                                                });
                                              },
                                            ),
                                          ),
                                        ),
                                        _buildDataCell(department['departmentName'] ?? '', 'DepartmentName'),
                                        _buildDataCell(department['departmentCode'] ?? '', 'DepartmentCode'),
                                      ],
                                    );
                                  }).toList(),
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                    // Pagination controls
                    if (_totalPages > 0) _buildPaginationControls(),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}


// New Department Page
class NewDepartmentPage extends StatefulWidget {
  @override
  _NewDepartmentPageState createState() => _NewDepartmentPageState();
}

class _NewDepartmentPageState extends State<NewDepartmentPage> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController _departmentNameController = TextEditingController();
  final TextEditingController _departmentCodeController = TextEditingController();

  @override
  void dispose(){
    _departmentNameController.dispose();
    _departmentCodeController.dispose();
    super.dispose();
  }

  void _saveDepartment() {
    if (_formKey.currentState!.validate()) {
      Navigator.pop(context, {
        'departmentName': _departmentNameController.text,
        'departmentCode': _departmentCodeController.text,
      });
    }
  }

  void _saveAndNew() {
    if (_formKey.currentState!.validate()) {
      Navigator.pop(context, {
        'departmentName': _departmentNameController.text,
        'departmentCode': _departmentCodeController.text,
        'keepOpen': true,
      });
    }
  }

  void _deleteDepartment() {
    Navigator.pop(context);
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        Navigator.pop(context, null);
        return false;
      },
      child: Scaffold(
        appBar: AppBar(
          title: Text('Department'),
          backgroundColor: Colors.white,
          foregroundColor: Colors.black,
          elevation: 0,
          leading: IconButton(
            onPressed: () => Navigator.pop(context, null),
            icon: Icon(Icons.arrow_back, color: Colors.black),
          ),
          actions: [
            IconButton(
              onPressed: () => Navigator.pop(context, null),
              icon: Icon(Icons.arrow_back),
            ),
            IconButton(
              onPressed: () => Navigator.pop(context, null),
              icon: Icon(Icons.arrow_forward),
            ),
            IconButton(
              onPressed: () => _formKey.currentState?.reset(),
              icon: Icon(Icons.refresh),
            ),
          ],
        ),
        body: Container(
          color: Colors.grey.shade50,
          child: Column(
            children: [
              // Action buttons
              Container(
                padding: EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.white,
                  border: Border(
                    bottom: BorderSide(color: Colors.grey.shade300, width: 1),
                  ),
                ),
                child: LayoutBuilder(
                  builder: (context, constraints) {
                    bool isSmallScreen = constraints.maxWidth < 600;

                    if (isSmallScreen) {
                      // Stack buttons vertically on small screens
                      return Column(
                        children: [
                          Row(
                            children: [
                              Expanded(
                                child: OutlinedButton.icon(
                                  onPressed: _deleteDepartment,
                                  icon: Icon(Icons.delete, color: Colors.red.shade400, size: 18),
                                  label: Text('Delete', style: TextStyle(fontSize: 12)),
                                  style: OutlinedButton.styleFrom(
                                    foregroundColor: Colors.red.shade400,
                                    side: BorderSide(color: Colors.grey.shade300),
                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                  ),
                                ),
                              ),
                            ],
                          ),
                          SizedBox(height: 6),
                          Row(
                            children: [
                              Expanded(
                                child: OutlinedButton.icon(
                                  onPressed: _saveAndNew,
                                  icon: Icon(Icons.save, color: Colors.orange.shade700, size: 18),
                                  label: Text('Save & New', style: TextStyle(fontSize: 12)),
                                  style: OutlinedButton.styleFrom(
                                    foregroundColor: Colors.orange.shade700,
                                    side: BorderSide(color: Colors.orange.shade700),
                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                  ),
                                ),
                              ),
                              SizedBox(width: 6),
                              Expanded(
                                child: ElevatedButton.icon(
                                  onPressed: _saveDepartment,
                                  icon: Icon(Icons.save, color: Colors.white, size: 18),
                                  label: Text('Save', style: TextStyle(fontSize: 12)),
                                  style: ElevatedButton.styleFrom(
                                    backgroundColor: Colors.orange.shade700,
                                    foregroundColor: Colors.white,
                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ],
                      );
                    } else {
                      // Original horizontal layout for larger screens
                      return Row(
                        children: [
                          OutlinedButton.icon(
                            onPressed: _deleteDepartment,
                            icon: Icon(Icons.delete, color: Colors.red.shade400, size: 20),
                            label: Text('Delete'),
                            style: OutlinedButton.styleFrom(
                              foregroundColor: Colors.red.shade400,
                              side: BorderSide(color: Colors.grey.shade300),
                            ),
                          ),
                          Spacer(),
                          OutlinedButton.icon(
                            onPressed: _saveAndNew,
                            icon: Icon(Icons.save, color: Colors.orange.shade700, size: 20),
                            label: Text('Save and New'),
                            style: OutlinedButton.styleFrom(
                              foregroundColor: Colors.orange.shade700,
                              side: BorderSide(color: Colors.orange.shade700),
                            ),
                          ),
                          SizedBox(width: 8),
                          ElevatedButton.icon(
                            onPressed: _saveDepartment,
                            icon: Icon(Icons.save, color: Colors.white, size: 20),
                            label: Text('Save'),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.orange.shade700,
                              foregroundColor: Colors.white,
                            ),
                          ),
                        ],
                      );
                    }
                  },
                ),
              ),

              // Form content
              Expanded(
                child: SingleChildScrollView(
                  padding: EdgeInsets.all(16),
                  child: Form(
                    key: _formKey,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Department',
                          style: TextStyle(
                            fontSize: 24,
                            fontWeight: FontWeight.bold,
                            color: Colors.black87,
                          ),
                        ),
                        SizedBox(height: 24),

                        // Department Name
                        TextFormField(
                          controller: _departmentNameController,
                          decoration: InputDecoration(
                            labelText: 'Department Name*',
                            border: OutlineInputBorder(),
                            contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
                          ),
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Please enter Department Name';
                            }
                            return null;
                          },
                        ),
                        SizedBox(height: 32),
                        TextFormField(
                          controller: _departmentCodeController,
                          decoration: InputDecoration(
                            labelText: 'Department Code*',
                            border: OutlineInputBorder(),
                            contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
                          ),
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Please enter Department Code';
                            }
                            return null;
                          },
                        ),
                        SizedBox(height: 32),
                      ],
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

//Responsible Entity Page
class ResponsibleEntityPage extends StatefulWidget {
  @override
  _ResponsibleEntityPageState createState() => _ResponsibleEntityPageState();
}

class _ResponsibleEntityPageState extends State<ResponsibleEntityPage> {
  final ScrollController _horizontalScrollController = ScrollController();
  final TextEditingController _searchController = TextEditingController();

  // Column widths - can be adjusted
  Map<String, double> columnWidths = {
    'Checkbox': 60,
    'ResponsibleEntityName': 730,
    'ResponsibleEntityCode': 730,
  };

  // Map column keys to data field names
  Map<String, String> columnToDataField = {
    'ResponsibleEntityName': 'responsibleEntityName',
    'ResponsibleEntityCode': 'responsibleEntityCode',
  };

  // Sorting state
  String _sortColumn = '';
  bool _sortAscending = true;

  // Pagination state
  int _currentPage = 1;
  int _pageSize = 20;
  final List<int> _pageSizeOptions = [10, 20, 50, 100];

  // Sample data structure
  List<Map<String, dynamic>> _responsibleEntityData = [
    {
      'selected': false,
      'responsibleEntityName': 'Information and Communications Technology',
      'responsibleEntityCode': 'ICTD',
    },
    {
      'selected': false,
      'responsibleEntityName': 'Technology Branch',
      'responsibleEntityCode': 'TB',
    },
  ];

  bool _selectAll = false;

  @override
  void dispose() {
    _horizontalScrollController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  List<Map<String, dynamic>> get _filteredData {
    var filtered = _responsibleEntityData;

    // Apply search filter
    if (_searchController.text.isNotEmpty) {
      filtered = filtered.where((entity) {
        return entity.values.any((value) =>
            value.toString().toLowerCase().contains(_searchController.text.toLowerCase()));
      }).toList();
    }

    // Apply sorting
    if (_sortColumn.isNotEmpty) {
      String dataField = columnToDataField[_sortColumn] ?? _sortColumn;
      filtered.sort((a, b) {
        var aValue = a[dataField] ?? '';
        var bValue = b[dataField] ?? '';

        int comparison = aValue.toString().compareTo(bValue.toString());
        return _sortAscending ? comparison : -comparison;
      });
    }

    return filtered;
  }

  List<Map<String, dynamic>> get _paginatedData {
    var filtered = _filteredData;
    int startIndex = (_currentPage - 1) * _pageSize;
    int endIndex = startIndex + _pageSize;

    if (startIndex >= filtered.length) return [];
    if (endIndex > filtered.length) endIndex = filtered.length;

    return filtered.sublist(startIndex, endIndex);
  }

  int get _totalPages {
    return (_filteredData.length / _pageSize).ceil();
  }

  void _refreshData() {
    setState(() {
      // Unselect all checkboxes
      for (var entity in _responsibleEntityData) {
        entity['selected'] = false;
      }
      _selectAll = false;
      // add actual data refresh logic here
    });
  }

  void _navigateToNewEntityPage() async {
    final result = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => NewEntityPage(),
      ),
    );

    if (result != null) {
      setState(() {
        _responsibleEntityData.add({
          'selected': false,
          'entityName': result['entityName'],
          'entityCode': result['entityCode'],
        });
      });

      // If keepOpen flag is set, reopen the page
      if (result['keepOpen'] == true) {
        _navigateToNewEntityPage();
      }
    }
  }

  void _toggleSelectAll() {
    setState(() {
      _selectAll = !_selectAll;
      for (var entity in _paginatedData) {
        entity['selected'] = _selectAll;
      }
    });
  }

  void _deleteSelected() {
    setState(() {
      _responsibleEntityData.removeWhere((entity) => entity['selected'] == true);
      _selectAll = false;
      // Adjust current page if needed
      if (_currentPage > _totalPages && _totalPages > 0) {
        _currentPage = _totalPages;
      }
    });
  }

  void _exportData() {
    // Add export functionality here
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Export functionality would be implemented here')),
    );
  }

  void _showFilterDialog(String columnKey) {
    // Add filter dialog functionality here
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Filter ${columnKey}'),
        content: Text('Filter functionality would be implemented here'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Close'),
          ),
        ],
      ),
    );
  }

  void _sortData(String columnKey) {
    setState(() {
      if (_sortColumn == columnKey) {
        _sortAscending = !_sortAscending;
      } else {
        _sortColumn = columnKey;
        _sortAscending = true;
      }
    });
  }

  bool _hasSelectedItems() {
    return _responsibleEntityData.any((entity) => entity['selected'] == true);
  }

  Widget _buildResizableColumn({
    required String title,
    required String columnKey,
    required bool isLast,
    Widget? customContent,
  }) {
    return Container(
      width: columnWidths[columnKey],
      child: Row(
        children: [
          Expanded(
            child: Container(
              height: 40, // Fixed height for consistent checkbox alignment
              padding: EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.grey.shade200,
                border: Border(
                  right: BorderSide(color: Colors.grey.shade400),
                  bottom: BorderSide(color: Colors.grey.shade400),
                ),
              ),
              child: customContent ??
                  Row(
                    children: [
                      Expanded(
                        child: Text(
                          title,
                          style: TextStyle(fontWeight: FontWeight.bold, fontSize: 12),
                          overflow: TextOverflow.ellipsis,
                        ),
                      ),
                      if (columnKey == 'ResponsibleEntityName') ...[
                        GestureDetector(
                          onTap: () => _sortData(columnKey),
                          child: Icon(
                            _sortColumn == columnKey
                                ? (_sortAscending ? Icons.arrow_upward : Icons.arrow_downward)
                                : Icons.unfold_more,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                        ),
                        SizedBox(width: 4),
                      ],
                      if (columnKey != 'Checkbox')
                        GestureDetector(
                          onTap: () => _showFilterDialog(columnKey),
                          child: Icon(
                            Icons.filter_alt_outlined,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                        ),
                    ],
                  ),
            ),
          ),
          if (!isLast)
            GestureDetector(
              onPanUpdate: (details) {
                setState(() {
                  columnWidths[columnKey] =
                      (columnWidths[columnKey]! + details.delta.dx).clamp(60.0, 400.0);
                });
              },
              child: Container(
                width: 4,
                height: 40,
                color: Colors.grey.shade400,
                child: MouseRegion(
                  cursor: SystemMouseCursors.resizeColumn,
                  child: Container(),
                ),
              ),
            ),
        ],
      ),
    );
  }

  Widget _buildDataCell(dynamic data, String columnKey, {Widget? customContent}) {
    return Container(
      width: columnWidths[columnKey],
      height: 40, // Fixed height for consistent alignment
      padding: EdgeInsets.all(8),
      decoration: BoxDecoration(
        border: Border(
          right: BorderSide(color: Colors.grey.shade400),
          bottom: BorderSide(color: Colors.grey.shade400),
        ),
      ),
      child: Align(
        alignment: Alignment.centerLeft,
        child: customContent ??
            Text(
              data.toString(),
              style: TextStyle(fontSize: 12),
              overflow: TextOverflow.ellipsis,
            ),
      ),
    );
  }

  Widget _buildPaginationControls() {
    return Container(
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        border: Border(
          top: BorderSide(color: Colors.grey.shade300, width: 1),
        ),
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          // Page numbers
          Row(
            children: [
              for (int i = 1; i <= _totalPages && i <= 4; i++)
                GestureDetector(
                  onTap: () {
                    setState(() {
                      _currentPage = i;
                    });
                  },
                  child: Container(
                    margin: EdgeInsets.symmetric(horizontal: 4),
                    padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                    decoration: BoxDecoration(
                      color: _currentPage == i ? Colors.orange.shade700 : Colors.transparent,
                      borderRadius: BorderRadius.circular(4),
                    ),
                    child: Text(
                      i.toString(),
                      style: TextStyle(
                        color: _currentPage == i ? Colors.white : Colors.black,
                        fontWeight: _currentPage == i ? FontWeight.bold : FontWeight.normal,
                      ),
                    ),
                  ),
                ),
            ],
          ),
          // Page size selector
          Row(
            children: [
              Text('Page Size: ', style: TextStyle(fontSize: 14)),
              DropdownButton<int>(
                value: _pageSize,
                items: _pageSizeOptions.map((size) {
                  return DropdownMenuItem<int>(
                    value: size,
                    child: Text(size.toString()),
                  );
                }).toList(),
                onChanged: (value) {
                  setState(() {
                    _pageSize = value!;
                    _currentPage = 1; // Reset to first page
                  });
                },
              ),
            ],
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        color: Colors.grey.shade50,
        child: Column(
          children: [
            // Header with buttons and search
            Container(
              width: double.infinity, // Full width
              padding: EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.white,
                border: Border(
                  bottom: BorderSide(color: Colors.grey.shade300, width: 1),
                ),
              ),
              child: LayoutBuilder(
                builder: (context, constraints) {
                  final isSmallScreen = constraints.maxWidth < 600;
                  final buttonStyle = OutlinedButton.styleFrom(
                    padding: isSmallScreen
                        ? EdgeInsets.symmetric(horizontal: 6, vertical: 4)
                        : EdgeInsets.symmetric(horizontal: 8, vertical: 6),
                    textStyle: TextStyle(
                      fontSize: isSmallScreen ? 12 : 14,
                    ),
                    minimumSize: Size(0, isSmallScreen ? 30 : 36),
                    side: BorderSide(color: Colors.grey.shade300),
                  );

                  return SingleChildScrollView(
                    scrollDirection: Axis.horizontal,
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.start, // Left-aligned content
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        // New Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _navigateToNewEntityPage,
                            icon: Icon(Icons.add, color: Colors.orange.shade700, size: 20),
                            padding: EdgeInsets.all(4),
                            tooltip: 'New',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _navigateToNewEntityPage,
                            icon: Icon(Icons.add, color: Colors.orange.shade700, size: 20),
                            label: Text('New'),
                            style: buttonStyle.copyWith(
                              backgroundColor: MaterialStateProperty.all(Colors.white),
                              foregroundColor: MaterialStateProperty.all(Colors.black),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Delete Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _hasSelectedItems() ? _deleteSelected : null,
                            icon: Icon(Icons.delete,
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                                size: 20
                            ),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Delete',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _hasSelectedItems() ? _deleteSelected : null,
                            icon: Icon(Icons.delete,
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                                size: 20
                            ),
                            label: Text(
                              'Delete',
                              style: TextStyle(
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                              ),
                            ),
                            style: buttonStyle.copyWith(
                              foregroundColor: MaterialStateProperty.all(
                                _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                              ),
                              side: MaterialStateProperty.all(
                                BorderSide(color: Colors.grey.shade300),
                              ),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Search Field
                        Container(
                          width: isSmallScreen ? 180 : 300,
                          child: TextField(
                            controller: _searchController,
                            onChanged: (value) {
                              setState(() {
                                _currentPage = 1;
                              });
                            },
                            decoration: InputDecoration(
                              isDense: true,
                              hintText: 'Search...',
                              suffixIcon: Icon(Icons.search, color: Colors.orange.shade700),
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(4),
                              ),
                              contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                            ),
                          ),
                        ),

                        SizedBox(width: 12),

                        // Export Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _exportData,
                            icon: Icon(Icons.download, color: Colors.orange.shade700, size: 20),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Export',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _exportData,
                            icon: Icon(Icons.download, color: Colors.orange.shade700, size: 20),
                            label: Text('Export'),
                            style: buttonStyle.copyWith(
                              backgroundColor: MaterialStateProperty.all(Colors.white),
                              foregroundColor: MaterialStateProperty.all(Colors.black),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Refresh Button
                        IconButton(
                          onPressed: _refreshData,
                          icon: Icon(Icons.refresh, color: Colors.orange.shade700, size: 20),
                          padding: EdgeInsets.all(4),
                          tooltip: 'Refresh',
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),

            // Table area
            Expanded(
              child: Container(
                margin: EdgeInsets.all(16),
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.grey.shade300),
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(4),
                ),
                child: Column(
                  children: [
                    // Table with synchronized scrolling
                    Expanded(
                      child: _paginatedData.isEmpty
                          ? Center(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(
                              Icons.folder_open,
                              size: 64,
                              color: Colors.grey.shade400,
                            ),
                            SizedBox(height: 16),
                            Text(
                              'No entities found',
                              style: TextStyle(
                                fontSize: 18,
                                color: Colors.grey.shade600,
                              ),
                            ),
                            SizedBox(height: 8),
                            Text(
                              'Click "New" to add your first entity',
                              style: TextStyle(
                                fontSize: 14,
                                color: Colors.grey.shade500,
                              ),
                            ),
                          ],
                        ),
                      )
                          : SingleChildScrollView(
                        controller: _horizontalScrollController,
                        scrollDirection: Axis.horizontal,
                        child: Column(
                          children: [
                            // Table header
                            Row(
                              children: [
                                _buildResizableColumn(
                                  title: '',
                                  columnKey: 'Checkbox',
                                  isLast: false,
                                  customContent: Center(
                                    child: Checkbox(
                                      value: _selectAll,
                                      onChanged: (value) => _toggleSelectAll(),
                                    ),
                                  ),
                                ),
                                _buildResizableColumn(
                                  title: 'Responsible Entity Name',
                                  columnKey: 'ResponsibleEntityName',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Responsible Entity Code',
                                  columnKey: 'ResponsibleEntityCode',
                                  isLast: true,
                                ),
                              ],
                            ),

                            // Table body
                            Expanded(
                              child: SingleChildScrollView(
                                child: Column(
                                  children: _paginatedData.map((entity) {
                                    return Row(
                                      children: [
                                        _buildDataCell(
                                          '',
                                          'Checkbox',
                                          customContent: Center(
                                            child: Checkbox(
                                              value: entity['selected'],
                                              onChanged: (value) {
                                                setState(() {
                                                  entity['selected'] = value;
                                                });
                                              },
                                            ),
                                          ),
                                        ),
                                        _buildDataCell(entity['responsibleEntityName'] ?? '', 'ResponsibleEntityName'),
                                        _buildDataCell(entity['responsibleEntityCode'] ?? '', 'ResponsibleEntityCode'),
                                      ],
                                    );
                                  }).toList(),
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                    // Pagination controls
                    if (_totalPages > 0) _buildPaginationControls(),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// New Entity Page
class NewEntityPage extends StatefulWidget {
  @override
  _NewEntityPageState createState() => _NewEntityPageState();
}

class _NewEntityPageState extends State<NewEntityPage> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController _entityNameController = TextEditingController();
  final TextEditingController _entityCodeController = TextEditingController();

  @override
  void dispose(){
    _entityNameController.dispose();
    _entityCodeController.dispose();
    super.dispose();
  }

  void _saveEntity() {
    if (_formKey.currentState!.validate()) {
      Navigator.pop(context, {
        'entityName': _entityNameController.text,
        'entityCode': _entityCodeController.text,
      });
    }
  }

  void _saveAndNew() {
    if (_formKey.currentState!.validate()) {
      Navigator.pop(context, {
        'entityName': _entityNameController.text,
        'entityCode': _entityCodeController.text,
        'keepOpen': true,
      });
    }
  }

  void _deleteEntity() {
    Navigator.pop(context);
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        Navigator.pop(context, null);
        return false;
      },
      child: Scaffold(
        appBar: AppBar(
          title: Text('Responsible Entity'),
          backgroundColor: Colors.white,
          foregroundColor: Colors.black,
          elevation: 0,
          leading: IconButton(
            onPressed: () => Navigator.pop(context, null),
            icon: Icon(Icons.arrow_back, color: Colors.black),
          ),
          actions: [
            IconButton(
              onPressed: () => Navigator.pop(context, null),
              icon: Icon(Icons.arrow_back),
            ),
            IconButton(
              onPressed: () => Navigator.pop(context, null),
              icon: Icon(Icons.arrow_forward),
            ),
            IconButton(
              onPressed: () => _formKey.currentState?.reset(),
              icon: Icon(Icons.refresh),
            ),
          ],
        ),
        body: Container(
          color: Colors.grey.shade50,
          child: Column(
            children: [
              // Action buttons
              Container(
                padding: EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.white,
                  border: Border(
                    bottom: BorderSide(color: Colors.grey.shade300, width: 1),
                  ),
                ),
                child: LayoutBuilder(
                  builder: (context, constraints) {
                    bool isSmallScreen = constraints.maxWidth < 600;

                    if (isSmallScreen) {
                      // Stack buttons vertically on small screens
                      return Column(
                        children: [
                          Row(
                            children: [
                              Expanded(
                                child: OutlinedButton.icon(
                                  onPressed: _deleteEntity,
                                  icon: Icon(Icons.delete, color: Colors.red.shade400, size: 18),
                                  label: Text('Delete', style: TextStyle(fontSize: 12)),
                                  style: OutlinedButton.styleFrom(
                                    foregroundColor: Colors.red.shade400,
                                    side: BorderSide(color: Colors.grey.shade300),
                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                  ),
                                ),
                              ),
                            ],
                          ),
                          SizedBox(height: 6),
                          Row(
                            children: [
                              Expanded(
                                child: OutlinedButton.icon(
                                  onPressed: _saveAndNew,
                                  icon: Icon(Icons.save, color: Colors.orange.shade700, size: 18),
                                  label: Text('Save & New', style: TextStyle(fontSize: 12)),
                                  style: OutlinedButton.styleFrom(
                                    foregroundColor: Colors.orange.shade700,
                                    side: BorderSide(color: Colors.orange.shade700),
                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                  ),
                                ),
                              ),
                              SizedBox(width: 6),
                              Expanded(
                                child: ElevatedButton.icon(
                                  onPressed: _saveEntity,
                                  icon: Icon(Icons.save, color: Colors.white, size: 18),
                                  label: Text('Save', style: TextStyle(fontSize: 12)),
                                  style: ElevatedButton.styleFrom(
                                    backgroundColor: Colors.orange.shade700,
                                    foregroundColor: Colors.white,
                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ],
                      );
                    } else {
                      // Original horizontal layout for larger screens
                      return Row(
                        children: [
                          OutlinedButton.icon(
                            onPressed: _deleteEntity,
                            icon: Icon(Icons.delete, color: Colors.red.shade400, size: 20),
                            label: Text('Delete'),
                            style: OutlinedButton.styleFrom(
                              foregroundColor: Colors.red.shade400,
                              side: BorderSide(color: Colors.grey.shade300),
                            ),
                          ),
                          Spacer(),
                          OutlinedButton.icon(
                            onPressed: _saveAndNew,
                            icon: Icon(Icons.save, color: Colors.orange.shade700, size: 20),
                            label: Text('Save and New'),
                            style: OutlinedButton.styleFrom(
                              foregroundColor: Colors.orange.shade700,
                              side: BorderSide(color: Colors.orange.shade700),
                            ),
                          ),
                          SizedBox(width: 8),
                          ElevatedButton.icon(
                            onPressed: _saveEntity,
                            icon: Icon(Icons.save, color: Colors.white, size: 20),
                            label: Text('Save'),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.orange.shade700,
                              foregroundColor: Colors.white,
                            ),
                          ),
                        ],
                      );
                    }
                  },
                ),
              ),

              // Form content
              Expanded(
                child: SingleChildScrollView(
                  padding: EdgeInsets.all(16),
                  child: Form(
                    key: _formKey,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Responsible Entity',
                          style: TextStyle(
                            fontSize: 24,
                            fontWeight: FontWeight.bold,
                            color: Colors.black87,
                          ),
                        ),
                        SizedBox(height: 24),

                        // Entity Name
                        TextFormField(
                          controller: _entityNameController,
                          decoration: InputDecoration(
                            labelText: 'Entity Name*',
                            border: OutlineInputBorder(),
                            contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
                          ),
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Please enter entity Name';
                            }
                            return null;
                          },
                        ),
                        SizedBox(height: 32),
                        TextFormField(
                          controller: _entityCodeController,
                          decoration: InputDecoration(
                            labelText: 'Entity Code*',
                            border: OutlineInputBorder(),
                            contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
                          ),
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Please enter Entity Code';
                            }
                            return null;
                          },
                        ),
                        SizedBox(height: 32),
                      ],
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

//Station Page
class StationPage extends StatefulWidget {
  @override
  _StationPageState createState() => _StationPageState();
}

class _StationPageState extends State<StationPage> {
  final ScrollController _horizontalScrollController = ScrollController();
  final TextEditingController _searchController = TextEditingController();

  // Column widths - can be adjusted
  Map<String, double> columnWidths = {
    'Checkbox': 60,
    'StationName': 730,
    'StationCode': 730,
  };

  // Map column keys to data field names
  Map<String, String> columnToDataField = {
    'StationName': 'stationName',
    'StationCode': 'stationCode',
  };

  // Sorting state
  String _sortColumn = '';
  bool _sortAscending = true;

  // Pagination state
  int _currentPage = 1;
  int _pageSize = 20;
  final List<int> _pageSizeOptions = [10, 20, 50, 100];

  // Sample data structure
  List<Map<String, dynamic>> _stationsData = [
    {
      'selected': false,
      'stationName': 'ABOVE ROCKS',
      'stationCode': 'ABRK',
    },
    {
      'selected': false,
      'stationName': 'BAMBOO',
      'stationCode': 'BAMB',
    },
  ];

  bool _selectAll = false;

  @override
  void dispose() {
    _horizontalScrollController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  List<Map<String, dynamic>> get _filteredData {
    var filtered = _stationsData;

    // Apply search filter
    if (_searchController.text.isNotEmpty) {
      filtered = filtered.where((station) {
        return station.values.any((value) =>
            value.toString().toLowerCase().contains(_searchController.text.toLowerCase()));
      }).toList();
    }

    // Apply sorting
    if (_sortColumn.isNotEmpty) {
      String dataField = columnToDataField[_sortColumn] ?? _sortColumn;
      filtered.sort((a, b) {
        var aValue = a[dataField] ?? '';
        var bValue = b[dataField] ?? '';

        int comparison = aValue.toString().compareTo(bValue.toString());
        return _sortAscending ? comparison : -comparison;
      });
    }

    return filtered;
  }

  List<Map<String, dynamic>> get _paginatedData {
    var filtered = _filteredData;
    int startIndex = (_currentPage - 1) * _pageSize;
    int endIndex = startIndex + _pageSize;

    if (startIndex >= filtered.length) return [];
    if (endIndex > filtered.length) endIndex = filtered.length;

    return filtered.sublist(startIndex, endIndex);
  }

  int get _totalPages {
    return (_filteredData.length / _pageSize).ceil();
  }

  void _refreshData() {
    setState(() {
      // Unselect all checkboxes
      for (var station in _stationsData) {
        station['selected'] = false;
      }
      _selectAll = false;
      // add actual data refresh logic here
    });
  }

  void _navigateToNewStationPage() async {
    final result = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => NewStationPage(),
      ),
    );

    if (result != null) {
      setState(() {
        _stationsData.add({
          'selected': false,
          'stationName': result['stationName'],
          'stationCode': result['stationCode'],
        });
      });

      // If keepOpen flag is set, reopen the page
      if (result['keepOpen'] == true) {
        _navigateToNewStationPage();
      }
    }
  }

  void _toggleSelectAll() {
    setState(() {
      _selectAll = !_selectAll;
      for (var station in _paginatedData) {
        station['selected'] = _selectAll;
      }
    });
  }

  void _deleteSelected() {
    setState(() {
      _stationsData.removeWhere((station) => station['selected'] == true);
      _selectAll = false;
      // Adjust current page if needed
      if (_currentPage > _totalPages && _totalPages > 0) {
        _currentPage = _totalPages;
      }
    });
  }

  void _exportData() {
    // Add export functionality here
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Export functionality would be implemented here')),
    );
  }

  void _showFilterDialog(String columnKey) {
    // Add filter dialog functionality here
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Filter ${columnKey}'),
        content: Text('Filter functionality would be implemented here'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Close'),
          ),
        ],
      ),
    );
  }

  void _sortData(String columnKey) {
    setState(() {
      if (_sortColumn == columnKey) {
        _sortAscending = !_sortAscending;
      } else {
        _sortColumn = columnKey;
        _sortAscending = true;
      }
    });
  }

  bool _hasSelectedItems() {
    return _stationsData.any((station) => station['selected'] == true);
  }

  Widget _buildResizableColumn({
    required String title,
    required String columnKey,
    required bool isLast,
    Widget? customContent,
  }) {
    return Container(
      width: columnWidths[columnKey],
      child: Row(
        children: [
          Expanded(
            child: Container(
              height: 40, // Fixed height for consistent checkbox alignment
              padding: EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.grey.shade200,
                border: Border(
                  right: BorderSide(color: Colors.grey.shade400),
                  bottom: BorderSide(color: Colors.grey.shade400),
                ),
              ),
              child: customContent ??
                  Row(
                    children: [
                      Expanded(
                        child: Text(
                          title,
                          style: TextStyle(fontWeight: FontWeight.bold, fontSize: 12),
                          overflow: TextOverflow.ellipsis,
                        ),
                      ),
                      if (columnKey == 'StationName') ...[
                        GestureDetector(
                          onTap: () => _sortData(columnKey),
                          child: Icon(
                            _sortColumn == columnKey
                                ? (_sortAscending ? Icons.arrow_upward : Icons.arrow_downward)
                                : Icons.unfold_more,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                        ),
                        SizedBox(width: 4),
                      ],
                      if (columnKey != 'Checkbox')
                        GestureDetector(
                          onTap: () => _showFilterDialog(columnKey),
                          child: Icon(
                            Icons.filter_alt_outlined,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                        ),
                    ],
                  ),
            ),
          ),
          if (!isLast)
            GestureDetector(
              onPanUpdate: (details) {
                setState(() {
                  columnWidths[columnKey] =
                      (columnWidths[columnKey]! + details.delta.dx).clamp(60.0, 400.0);
                });
              },
              child: Container(
                width: 4,
                height: 40,
                color: Colors.grey.shade400,
                child: MouseRegion(
                  cursor: SystemMouseCursors.resizeColumn,
                  child: Container(),
                ),
              ),
            ),
        ],
      ),
    );
  }

  Widget _buildDataCell(dynamic data, String columnKey, {Widget? customContent}) {
    return Container(
      width: columnWidths[columnKey],
      height: 40, // Fixed height for consistent alignment
      padding: EdgeInsets.all(8),
      decoration: BoxDecoration(
        border: Border(
          right: BorderSide(color: Colors.grey.shade400),
          bottom: BorderSide(color: Colors.grey.shade400),
        ),
      ),
      child: Align(
        alignment: Alignment.centerLeft,
        child: customContent ??
            Text(
              data.toString(),
              style: TextStyle(fontSize: 12),
              overflow: TextOverflow.ellipsis,
            ),
      ),
    );
  }

  Widget _buildPaginationControls() {
    return Container(
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        border: Border(
          top: BorderSide(color: Colors.grey.shade300, width: 1),
        ),
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          // Page numbers
          Row(
            children: [
              for (int i = 1; i <= _totalPages && i <= 4; i++)
                GestureDetector(
                  onTap: () {
                    setState(() {
                      _currentPage = i;
                    });
                  },
                  child: Container(
                    margin: EdgeInsets.symmetric(horizontal: 4),
                    padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                    decoration: BoxDecoration(
                      color: _currentPage == i ? Colors.orange.shade700 : Colors.transparent,
                      borderRadius: BorderRadius.circular(4),
                    ),
                    child: Text(
                      i.toString(),
                      style: TextStyle(
                        color: _currentPage == i ? Colors.white : Colors.black,
                        fontWeight: _currentPage == i ? FontWeight.bold : FontWeight.normal,
                      ),
                    ),
                  ),
                ),
            ],
          ),
          // Page size selector
          Row(
            children: [
              Text('Page Size: ', style: TextStyle(fontSize: 14)),
              DropdownButton<int>(
                value: _pageSize,
                items: _pageSizeOptions.map((size) {
                  return DropdownMenuItem<int>(
                    value: size,
                    child: Text(size.toString()),
                  );
                }).toList(),
                onChanged: (value) {
                  setState(() {
                    _pageSize = value!;
                    _currentPage = 1; // Reset to first page
                  });
                },
              ),
            ],
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        color: Colors.grey.shade50,
        child: Column(
          children: [
            // Header with buttons and search
            Container(
              width: double.infinity, // Full width
              padding: EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.white,
                border: Border(
                  bottom: BorderSide(color: Colors.grey.shade300, width: 1),
                ),
              ),
              child: LayoutBuilder(
                builder: (context, constraints) {
                  final isSmallScreen = constraints.maxWidth < 600;
                  final buttonStyle = OutlinedButton.styleFrom(
                    padding: isSmallScreen
                        ? EdgeInsets.symmetric(horizontal: 6, vertical: 4)
                        : EdgeInsets.symmetric(horizontal: 8, vertical: 6),
                    textStyle: TextStyle(
                      fontSize: isSmallScreen ? 12 : 14,
                    ),
                    minimumSize: Size(0, isSmallScreen ? 30 : 36),
                    side: BorderSide(color: Colors.grey.shade300),
                  );

                  return SingleChildScrollView(
                    scrollDirection: Axis.horizontal,
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.start, // Left-aligned content
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        // New Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _navigateToNewStationPage,
                            icon: Icon(Icons.add, color: Colors.orange.shade700, size: 20),
                            padding: EdgeInsets.all(4),
                            tooltip: 'New',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _navigateToNewStationPage,
                            icon: Icon(Icons.add, color: Colors.orange.shade700, size: 20),
                            label: Text('New'),
                            style: buttonStyle.copyWith(
                              backgroundColor: MaterialStateProperty.all(Colors.white),
                              foregroundColor: MaterialStateProperty.all(Colors.black),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Delete Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _hasSelectedItems() ? _deleteSelected : null,
                            icon: Icon(Icons.delete,
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                                size: 20
                            ),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Delete',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _hasSelectedItems() ? _deleteSelected : null,
                            icon: Icon(Icons.delete,
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                                size: 20
                            ),
                            label: Text(
                              'Delete',
                              style: TextStyle(
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                              ),
                            ),
                            style: buttonStyle.copyWith(
                              foregroundColor: MaterialStateProperty.all(
                                _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                              ),
                              side: MaterialStateProperty.all(
                                BorderSide(color: Colors.grey.shade300),
                              ),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Search Field
                        Container(
                          width: isSmallScreen ? 180 : 300,
                          child: TextField(
                            controller: _searchController,
                            onChanged: (value) {
                              setState(() {
                                _currentPage = 1;
                              });
                            },
                            decoration: InputDecoration(
                              isDense: true,
                              hintText: 'Search...',
                              suffixIcon: Icon(Icons.search, color: Colors.orange.shade700),
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(4),
                              ),
                              contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                            ),
                          ),
                        ),

                        SizedBox(width: 12),

                        // Export Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _exportData,
                            icon: Icon(Icons.download, color: Colors.orange.shade700, size: 20),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Export',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _exportData,
                            icon: Icon(Icons.download, color: Colors.orange.shade700, size: 20),
                            label: Text('Export'),
                            style: buttonStyle.copyWith(
                              backgroundColor: MaterialStateProperty.all(Colors.white),
                              foregroundColor: MaterialStateProperty.all(Colors.black),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Refresh Button
                        IconButton(
                          onPressed: _refreshData,
                          icon: Icon(Icons.refresh, color: Colors.orange.shade700, size: 20),
                          padding: EdgeInsets.all(4),
                          tooltip: 'Refresh',
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),

            // Table area
            Expanded(
              child: Container(
                margin: EdgeInsets.all(16),
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.grey.shade300),
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(4),
                ),
                child: Column(
                  children: [
                    // Table with synchronized scrolling
                    Expanded(
                      child: _paginatedData.isEmpty
                          ? Center(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(
                              Icons.folder_open,
                              size: 64,
                              color: Colors.grey.shade400,
                            ),
                            SizedBox(height: 16),
                            Text(
                              'No stations found',
                              style: TextStyle(
                                fontSize: 18,
                                color: Colors.grey.shade600,
                              ),
                            ),
                            SizedBox(height: 8),
                            Text(
                              'Click "New" to add your first station',
                              style: TextStyle(
                                fontSize: 14,
                                color: Colors.grey.shade500,
                              ),
                            ),
                          ],
                        ),
                      )
                          : SingleChildScrollView(
                        controller: _horizontalScrollController,
                        scrollDirection: Axis.horizontal,
                        child: Column(
                          children: [
                            // Table header
                            Row(
                              children: [
                                _buildResizableColumn(
                                  title: '',
                                  columnKey: 'Checkbox',
                                  isLast: false,
                                  customContent: Center(
                                    child: Checkbox(
                                      value: _selectAll,
                                      onChanged: (value) => _toggleSelectAll(),
                                    ),
                                  ),
                                ),
                                _buildResizableColumn(
                                  title: 'Station Name',
                                  columnKey: 'StationName',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Station Code',
                                  columnKey: 'StationCode',
                                  isLast: true,
                                ),
                              ],
                            ),

                            // Table body
                            Expanded(
                              child: SingleChildScrollView(
                                child: Column(
                                  children: _paginatedData.map((station) {
                                    return Row(
                                      children: [
                                        _buildDataCell(
                                          '',
                                          'Checkbox',
                                          customContent: Center(
                                            child: Checkbox(
                                              value: station['selected'],
                                              onChanged: (value) {
                                                setState(() {
                                                  station['selected'] = value;
                                                });
                                              },
                                            ),
                                          ),
                                        ),
                                        _buildDataCell(station['stationName'] ?? '', 'StationName'),
                                        _buildDataCell(station['stationCode'] ?? '', 'StationCode'),
                                      ],
                                    );
                                  }).toList(),
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                    // Pagination controls
                    if (_totalPages > 0) _buildPaginationControls(),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// New Station Page
class NewStationPage extends StatefulWidget {
  @override
  _NewStationPageState createState() => _NewStationPageState();
}

class _NewStationPageState extends State<NewStationPage> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController _stationNameController = TextEditingController();
  final TextEditingController _stationCodeController = TextEditingController();

  @override
  void dispose(){
    _stationNameController.dispose();
    _stationCodeController.dispose();
    super.dispose();
  }

  void _saveStation() {
    if (_formKey.currentState!.validate()) {
      Navigator.pop(context, {
        'stationName': _stationNameController.text,
        'stationCode': _stationCodeController.text,
      });
    }
  }

  void _saveAndNew() {
    if (_formKey.currentState!.validate()) {
      Navigator.pop(context, {
        'stationName': _stationNameController.text,
        'stationCode': _stationCodeController.text,
        'keepOpen': true,
      });
    }
  }

  void _deleteStation() {
    Navigator.pop(context);
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        Navigator.pop(context, null);
        return false;
      },
      child: Scaffold(
        appBar: AppBar(
          title: Text('Station'),
          backgroundColor: Colors.white,
          foregroundColor: Colors.black,
          elevation: 0,
          leading: IconButton(
            onPressed: () => Navigator.pop(context, null),
            icon: Icon(Icons.arrow_back, color: Colors.black),
          ),
          actions: [
            IconButton(
              onPressed: () => Navigator.pop(context, null),
              icon: Icon(Icons.arrow_back),
            ),
            IconButton(
              onPressed: () => Navigator.pop(context, null),
              icon: Icon(Icons.arrow_forward),
            ),
            IconButton(
              onPressed: () => _formKey.currentState?.reset(),
              icon: Icon(Icons.refresh),
            ),
          ],
        ),
        body: Container(
          color: Colors.grey.shade50,
          child: Column(
            children: [
              // Action buttons
              Container(
                padding: EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.white,
                  border: Border(
                    bottom: BorderSide(color: Colors.grey.shade300, width: 1),
                  ),
                ),
                child: LayoutBuilder(
                  builder: (context, constraints) {
                    bool isSmallScreen = constraints.maxWidth < 600;

                    if (isSmallScreen) {
                      // Stack buttons vertically on small screens
                      return Column(
                        children: [
                          Row(
                            children: [
                              Expanded(
                                child: OutlinedButton.icon(
                                  onPressed: _deleteStation,
                                  icon: Icon(Icons.delete, color: Colors.red.shade400, size: 18),
                                  label: Text('Delete', style: TextStyle(fontSize: 12)),
                                  style: OutlinedButton.styleFrom(
                                    foregroundColor: Colors.red.shade400,
                                    side: BorderSide(color: Colors.grey.shade300),
                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                  ),
                                ),
                              ),
                            ],
                          ),
                          SizedBox(height: 6),
                          Row(
                            children: [
                              Expanded(
                                child: OutlinedButton.icon(
                                  onPressed: _saveAndNew,
                                  icon: Icon(Icons.save, color: Colors.orange.shade700, size: 18),
                                  label: Text('Save & New', style: TextStyle(fontSize: 12)),
                                  style: OutlinedButton.styleFrom(
                                    foregroundColor: Colors.orange.shade700,
                                    side: BorderSide(color: Colors.orange.shade700),
                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                  ),
                                ),
                              ),
                              SizedBox(width: 6),
                              Expanded(
                                child: ElevatedButton.icon(
                                  onPressed: _saveStation,
                                  icon: Icon(Icons.save, color: Colors.white, size: 18),
                                  label: Text('Save', style: TextStyle(fontSize: 12)),
                                  style: ElevatedButton.styleFrom(
                                    backgroundColor: Colors.orange.shade700,
                                    foregroundColor: Colors.white,
                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ],
                      );
                    } else {
                      // Original horizontal layout for larger screens
                      return Row(
                        children: [
                          OutlinedButton.icon(
                            onPressed: _deleteStation,
                            icon: Icon(Icons.delete, color: Colors.red.shade400, size: 20),
                            label: Text('Delete'),
                            style: OutlinedButton.styleFrom(
                              foregroundColor: Colors.red.shade400,
                              side: BorderSide(color: Colors.grey.shade300),
                            ),
                          ),
                          Spacer(),
                          OutlinedButton.icon(
                            onPressed: _saveAndNew,
                            icon: Icon(Icons.save, color: Colors.orange.shade700, size: 20),
                            label: Text('Save and New'),
                            style: OutlinedButton.styleFrom(
                              foregroundColor: Colors.orange.shade700,
                              side: BorderSide(color: Colors.orange.shade700),
                            ),
                          ),
                          SizedBox(width: 8),
                          ElevatedButton.icon(
                            onPressed: _saveStation,
                            icon: Icon(Icons.save, color: Colors.white, size: 20),
                            label: Text('Save'),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.orange.shade700,
                              foregroundColor: Colors.white,
                            ),
                          ),
                        ],
                      );
                    }
                  },
                ),
              ),

              // Form content
              Expanded(
                child: SingleChildScrollView(
                  padding: EdgeInsets.all(16),
                  child: Form(
                    key: _formKey,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Station',
                          style: TextStyle(
                            fontSize: 24,
                            fontWeight: FontWeight.bold,
                            color: Colors.black87,
                          ),
                        ),
                        SizedBox(height: 24),

                        // Station Name
                        TextFormField(
                          controller: _stationNameController,
                          decoration: InputDecoration(
                            labelText: 'Station Name*',
                            border: OutlineInputBorder(),
                            contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
                          ),
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Please enter Station Name';
                            }
                            return null;
                          },
                        ),
                        SizedBox(height: 32),
                        TextFormField(
                          controller: _stationCodeController,
                          decoration: InputDecoration(
                            labelText: 'Station Code*',
                            border: OutlineInputBorder(),
                            contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
                          ),
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Please enter Station Code';
                            }
                            return null;
                          },
                        ),
                        SizedBox(height: 32),

                      ],
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}


//Topic Page
class TopicPage extends StatefulWidget {
  @override
  _TopicPageState createState() => _TopicPageState();
}

class _TopicPageState extends State<TopicPage> {
  final ScrollController _horizontalScrollController = ScrollController();
  final TextEditingController _searchController = TextEditingController();

  // Column widths - can be adjusted
  Map<String, double> columnWidths = {
    'Checkbox': 60,
    'TopicName': 1450,
  };

  // Map column keys to data field names
  Map<String, String> columnToDataField = {
    'TopicName': 'topicName',
  };

  // Sorting state
  String _sortColumn = '';
  bool _sortAscending = true;

  // Pagination state
  int _currentPage = 1;
  int _pageSize = 20;
  final List<int> _pageSizeOptions = [10, 20, 50, 100];

  // Sample data structure
  List<Map<String, dynamic>> _topicsData = [
    {
      'selected': false,
      'topicName': 'Error Message',
    },
    {
      'selected': false,
      'topicName': 'Connect Issues',
    },
    {
      'selected': false,
      'topicName': 'Change of Role'
    },
  ];

  bool _selectAll = false;

  @override
  void dispose() {
    _horizontalScrollController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  List<Map<String, dynamic>> get _filteredData {
    var filtered = _topicsData;

    // Apply search filter
    if (_searchController.text.isNotEmpty) {
      filtered = filtered.where((topic) {
        return topic.values.any((value) =>
            value.toString().toLowerCase().contains(_searchController.text.toLowerCase()));
      }).toList();
    }

    // Apply sorting
    if (_sortColumn.isNotEmpty) {
      String dataField = columnToDataField[_sortColumn] ?? _sortColumn;
      filtered.sort((a, b) {
        var aValue = a[dataField] ?? '';
        var bValue = b[dataField] ?? '';

        int comparison = aValue.toString().compareTo(bValue.toString());
        return _sortAscending ? comparison : -comparison;
      });
    }

    return filtered;
  }

  List<Map<String, dynamic>> get _paginatedData {
    var filtered = _filteredData;
    int startIndex = (_currentPage - 1) * _pageSize;
    int endIndex = startIndex + _pageSize;

    if (startIndex >= filtered.length) return [];
    if (endIndex > filtered.length) endIndex = filtered.length;

    return filtered.sublist(startIndex, endIndex);
  }

  int get _totalPages {
    return (_filteredData.length / _pageSize).ceil();
  }

  void _refreshData() {
    setState(() {
      // Unselect all checkboxes
      for (var topic in _topicsData) {
        topic['selected'] = false;
      }
      _selectAll = false;
      // add actual data refresh logic here
    });
  }

  void _navigateToNewTopicPage() async {
    final result = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => NewTopicPage(),
      ),
    );

    if (result != null) {
      setState(() {
        _topicsData.add({
          'selected': false,
          'topicName': result['topicName'],
        });
      });

      // If keepOpen flag is set, reopen the page
      if (result['keepOpen'] == true) {
        _navigateToNewTopicPage();
      }
    }
  }

  void _toggleSelectAll() {
    setState(() {
      _selectAll = !_selectAll;
      for (var topic in _paginatedData) {
        topic['selected'] = _selectAll;
      }
    });
  }

  void _deleteSelected() {
    setState(() {
      _topicsData.removeWhere((topic) => topic['selected'] == true);
      _selectAll = false;
      // Adjust current page if needed
      if (_currentPage > _totalPages && _totalPages > 0) {
        _currentPage = _totalPages;
      }
    });
  }

  void _exportData() {
    // Add export functionality here
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Export functionality would be implemented here')),
    );
  }

  void _showFilterDialog(String columnKey) {
    // Add filter dialog functionality here
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Filter ${columnKey}'),
        content: Text('Filter functionality would be implemented here'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Close'),
          ),
        ],
      ),
    );
  }

  void _sortData(String columnKey) {
    setState(() {
      if (_sortColumn == columnKey) {
        _sortAscending = !_sortAscending;
      } else {
        _sortColumn = columnKey;
        _sortAscending = true;
      }
    });
  }

  bool _hasSelectedItems() {
    return _topicsData.any((topic) => topic['selected'] == true);
  }

  Widget _buildResizableColumn({
    required String title,
    required String columnKey,
    required bool isLast,
    Widget? customContent,
  }) {
    return Container(
      width: columnWidths[columnKey],
      child: Row(
        children: [
          Expanded(
            child: Container(
              height: 40, // Fixed height for consistent checkbox alignment
              padding: EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.grey.shade200,
                border: Border(
                  right: BorderSide(color: Colors.grey.shade400),
                  bottom: BorderSide(color: Colors.grey.shade400),
                ),
              ),
              child: customContent ??
                  Row(
                    children: [
                      Expanded(
                        child: Text(
                          title,
                          style: TextStyle(fontWeight: FontWeight.bold, fontSize: 12),
                          overflow: TextOverflow.ellipsis,
                        ),
                      ),
                      if (columnKey == 'TopicName') ...[
                        GestureDetector(
                          onTap: () => _sortData(columnKey),
                          child: Icon(
                            _sortColumn == columnKey
                                ? (_sortAscending ? Icons.arrow_upward : Icons.arrow_downward)
                                : Icons.unfold_more,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                        ),
                        SizedBox(width: 4),
                      ],
                      if (columnKey != 'Checkbox')
                        GestureDetector(
                          onTap: () => _showFilterDialog(columnKey),
                          child: Icon(
                            Icons.filter_alt_outlined,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                        ),
                    ],
                  ),
            ),
          ),
          if (!isLast)
            GestureDetector(
              onPanUpdate: (details) {
                setState(() {
                  columnWidths[columnKey] =
                      (columnWidths[columnKey]! + details.delta.dx).clamp(60.0, 400.0);
                });
              },
              child: Container(
                width: 4,
                height: 40,
                color: Colors.grey.shade400,
                child: MouseRegion(
                  cursor: SystemMouseCursors.resizeColumn,
                  child: Container(),
                ),
              ),
            ),
        ],
      ),
    );
  }

  Widget _buildDataCell(dynamic data, String columnKey, {Widget? customContent}) {
    return Container(
      width: columnWidths[columnKey],
      height: 40, // Fixed height for consistent alignment
      padding: EdgeInsets.all(8),
      decoration: BoxDecoration(
        border: Border(
          right: BorderSide(color: Colors.grey.shade400),
          bottom: BorderSide(color: Colors.grey.shade400),
        ),
      ),
      child: Align(
        alignment: Alignment.centerLeft,
        child: customContent ??
            Text(
              data.toString(),
              style: TextStyle(fontSize: 12),
              overflow: TextOverflow.ellipsis,
            ),
      ),
    );
  }

  Widget _buildPaginationControls() {
    return Container(
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        border: Border(
          top: BorderSide(color: Colors.grey.shade300, width: 1),
        ),
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          // Page numbers
          Row(
            children: [
              for (int i = 1; i <= _totalPages && i <= 4; i++)
                GestureDetector(
                  onTap: () {
                    setState(() {
                      _currentPage = i;
                    });
                  },
                  child: Container(
                    margin: EdgeInsets.symmetric(horizontal: 4),
                    padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                    decoration: BoxDecoration(
                      color: _currentPage == i ? Colors.orange.shade700 : Colors.transparent,
                      borderRadius: BorderRadius.circular(4),
                    ),
                    child: Text(
                      i.toString(),
                      style: TextStyle(
                        color: _currentPage == i ? Colors.white : Colors.black,
                        fontWeight: _currentPage == i ? FontWeight.bold : FontWeight.normal,
                      ),
                    ),
                  ),
                ),
            ],
          ),
          // Page size selector
          Row(
            children: [
              Text('Page Size: ', style: TextStyle(fontSize: 14)),
              DropdownButton<int>(
                value: _pageSize,
                items: _pageSizeOptions.map((size) {
                  return DropdownMenuItem<int>(
                    value: size,
                    child: Text(size.toString()),
                  );
                }).toList(),
                onChanged: (value) {
                  setState(() {
                    _pageSize = value!;
                    _currentPage = 1; // Reset to first page
                  });
                },
              ),
            ],
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        color: Colors.grey.shade50,
        child: Column(
          children: [
            // Header with buttons and search
            Container(
              width: double.infinity, // Full width
              padding: EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.white,
                border: Border(
                  bottom: BorderSide(color: Colors.grey.shade300, width: 1),
                ),
              ),
              child: LayoutBuilder(
                builder: (context, constraints) {
                  final isSmallScreen = constraints.maxWidth < 600;
                  final buttonStyle = OutlinedButton.styleFrom(
                    padding: isSmallScreen
                        ? EdgeInsets.symmetric(horizontal: 6, vertical: 4)
                        : EdgeInsets.symmetric(horizontal: 8, vertical: 6),
                    textStyle: TextStyle(
                      fontSize: isSmallScreen ? 12 : 14,
                    ),
                    minimumSize: Size(0, isSmallScreen ? 30 : 36),
                    side: BorderSide(color: Colors.grey.shade300),
                  );

                  return SingleChildScrollView(
                    scrollDirection: Axis.horizontal,
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.start, // Left-aligned content
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        // New Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _navigateToNewTopicPage,
                            icon: Icon(Icons.add, color: Colors.orange.shade700, size: 20),
                            padding: EdgeInsets.all(4),
                            tooltip: 'New',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _navigateToNewTopicPage,
                            icon: Icon(Icons.add, color: Colors.orange.shade700, size: 20),
                            label: Text('New'),
                            style: buttonStyle.copyWith(
                              backgroundColor: MaterialStateProperty.all(Colors.white),
                              foregroundColor: MaterialStateProperty.all(Colors.black),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Delete Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _hasSelectedItems() ? _deleteSelected : null,
                            icon: Icon(Icons.delete,
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                                size: 20
                            ),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Delete',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _hasSelectedItems() ? _deleteSelected : null,
                            icon: Icon(Icons.delete,
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                                size: 20
                            ),
                            label: Text(
                              'Delete',
                              style: TextStyle(
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                              ),
                            ),
                            style: buttonStyle.copyWith(
                              foregroundColor: MaterialStateProperty.all(
                                _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                              ),
                              side: MaterialStateProperty.all(
                                BorderSide(color: Colors.grey.shade300),
                              ),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Search Field
                        Container(
                          width: isSmallScreen ? 180 : 300,
                          child: TextField(
                            controller: _searchController,
                            onChanged: (value) {
                              setState(() {
                                _currentPage = 1;
                              });
                            },
                            decoration: InputDecoration(
                              isDense: true,
                              hintText: 'Search...',
                              suffixIcon: Icon(Icons.search, color: Colors.orange.shade700),
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(4),
                              ),
                              contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                            ),
                          ),
                        ),

                        SizedBox(width: 12),

                        // Export Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _exportData,
                            icon: Icon(Icons.download, color: Colors.orange.shade700, size: 20),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Export',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _exportData,
                            icon: Icon(Icons.download, color: Colors.orange.shade700, size: 20),
                            label: Text('Export'),
                            style: buttonStyle.copyWith(
                              backgroundColor: MaterialStateProperty.all(Colors.white),
                              foregroundColor: MaterialStateProperty.all(Colors.black),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Refresh Button
                        IconButton(
                          onPressed: _refreshData,
                          icon: Icon(Icons.refresh, color: Colors.orange.shade700, size: 20),
                          padding: EdgeInsets.all(4),
                          tooltip: 'Refresh',
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),

            // Table area
            Expanded(
              child: Container(
                margin: EdgeInsets.all(16),
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.grey.shade300),
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(4),
                ),
                child: Column(
                  children: [
                    // Table with synchronized scrolling
                    Expanded(
                      child: _paginatedData.isEmpty
                          ? Center(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(
                              Icons.folder_open,
                              size: 64,
                              color: Colors.grey.shade400,
                            ),
                            SizedBox(height: 16),
                            Text(
                              'No topics found',
                              style: TextStyle(
                                fontSize: 18,
                                color: Colors.grey.shade600,
                              ),
                            ),
                            SizedBox(height: 8),
                            Text(
                              'Click "New" to add your first topic',
                              style: TextStyle(
                                fontSize: 14,
                                color: Colors.grey.shade500,
                              ),
                            ),
                          ],
                        ),
                      )
                          : SingleChildScrollView(
                        controller: _horizontalScrollController,
                        scrollDirection: Axis.horizontal,
                        child: Column(
                          children: [
                            // Table header
                            Row(
                              children: [
                                _buildResizableColumn(
                                  title: '',
                                  columnKey: 'Checkbox',
                                  isLast: false,
                                  customContent: Center(
                                    child: Checkbox(
                                      value: _selectAll,
                                      onChanged: (value) => _toggleSelectAll(),
                                    ),
                                  ),
                                ),
                                _buildResizableColumn(
                                  title: 'Topic Name',
                                  columnKey: 'TopicName',
                                  isLast: true,
                                ),
                              ],
                            ),

                            // Table body
                            Expanded(
                              child: SingleChildScrollView(
                                child: Column(
                                  children: _paginatedData.map((topic) {
                                    return Row(
                                      children: [
                                        _buildDataCell(
                                          '',
                                          'Checkbox',
                                          customContent: Center(
                                            child: Checkbox(
                                              value: topic['selected'],
                                              onChanged: (value) {
                                                setState(() {
                                                  topic['selected'] = value;
                                                });
                                              },
                                            ),
                                          ),
                                        ),
                                        _buildDataCell(topic['topicName'] ?? '', 'TopicName'),
                                      ],
                                    );
                                  }).toList(),
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                    // Pagination controls
                    if (_totalPages > 0) _buildPaginationControls(),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// New Topic Page
class NewTopicPage extends StatefulWidget {
  @override
  _NewTopicPageState createState() => _NewTopicPageState();
}

class _NewTopicPageState extends State<NewTopicPage> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController _topicNameController = TextEditingController();

  @override
  void dispose() {
    _topicNameController.dispose();
    super.dispose();
  }

  void _saveTopic() {
    if (_formKey.currentState!.validate()) {
      Navigator.pop(context, {
        'topicName': _topicNameController.text,
      });
    }
  }

  void _saveAndNew() {
    if (_formKey.currentState!.validate()) {
      Navigator.pop(context, {
        'topicName': _topicNameController.text,
        'keepOpen': true,
      });
    }
  }

  void _deleteTopic() {
    Navigator.pop(context);
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        Navigator.pop(context, null);
        return false;
      },
      child: Scaffold(
        appBar: AppBar(
          title: Text('Topic'),
          backgroundColor: Colors.white,
          foregroundColor: Colors.black,
          elevation: 0,
          leading: IconButton(
            onPressed: () => Navigator.pop(context, null),
            icon: Icon(Icons.arrow_back, color: Colors.black),
          ),
          actions: [
            IconButton(
              onPressed: () => Navigator.pop(context, null),
              icon: Icon(Icons.arrow_back),
            ),
            IconButton(
              onPressed: () => Navigator.pop(context, null),
              icon: Icon(Icons.arrow_forward),
            ),
            IconButton(
              onPressed: () => _formKey.currentState?.reset(),
              icon: Icon(Icons.refresh),
            ),
          ],
        ),
        body: Container(
          color: Colors.grey.shade50,
          child: Column(
            children: [
              // Action buttons
              Container(
                padding: EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.white,
                  border: Border(
                    bottom: BorderSide(color: Colors.grey.shade300, width: 1),
                  ),
                ),
                child: LayoutBuilder(
                  builder: (context, constraints) {
                    bool isSmallScreen = constraints.maxWidth < 600;

                    if (isSmallScreen) {
                      // Stack buttons vertically on small screens
                      return Column(
                        children: [
                          Row(
                            children: [
                              Expanded(
                                child: OutlinedButton.icon(
                                  onPressed: _deleteTopic,
                                  icon: Icon(Icons.delete, color: Colors.red.shade400, size: 18),
                                  label: Text('Delete', style: TextStyle(fontSize: 12)),
                                  style: OutlinedButton.styleFrom(
                                    foregroundColor: Colors.red.shade400,
                                    side: BorderSide(color: Colors.grey.shade300),
                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                  ),
                                ),
                              ),
                            ],
                          ),
                          SizedBox(height: 6),
                          Row(
                            children: [
                              Expanded(
                                child: OutlinedButton.icon(
                                  onPressed: _saveAndNew,
                                  icon: Icon(Icons.save, color: Colors.orange.shade700, size: 18),
                                  label: Text('Save & New', style: TextStyle(fontSize: 12)),
                                  style: OutlinedButton.styleFrom(
                                    foregroundColor: Colors.orange.shade700,
                                    side: BorderSide(color: Colors.orange.shade700),
                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                  ),
                                ),
                              ),
                              SizedBox(width: 6),
                              Expanded(
                                child: ElevatedButton.icon(
                                  onPressed: _saveTopic,
                                  icon: Icon(Icons.save, color: Colors.white, size: 18),
                                  label: Text('Save', style: TextStyle(fontSize: 12)),
                                  style: ElevatedButton.styleFrom(
                                    backgroundColor: Colors.orange.shade700,
                                    foregroundColor: Colors.white,
                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ],
                      );
                    } else {
                      // Original horizontal layout for larger screens
                      return Row(
                        children: [
                          OutlinedButton.icon(
                            onPressed: _deleteTopic,
                            icon: Icon(Icons.delete, color: Colors.red.shade400, size: 20),
                            label: Text('Delete'),
                            style: OutlinedButton.styleFrom(
                              foregroundColor: Colors.red.shade400,
                              side: BorderSide(color: Colors.grey.shade300),
                            ),
                          ),
                          Spacer(),
                          OutlinedButton.icon(
                            onPressed: _saveAndNew,
                            icon: Icon(Icons.save, color: Colors.orange.shade700, size: 20),
                            label: Text('Save and New'),
                            style: OutlinedButton.styleFrom(
                              foregroundColor: Colors.orange.shade700,
                              side: BorderSide(color: Colors.orange.shade700),
                            ),
                          ),
                          SizedBox(width: 8),
                          ElevatedButton.icon(
                            onPressed: _saveTopic,
                            icon: Icon(Icons.save, color: Colors.white, size: 20),
                            label: Text('Save'),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.orange.shade700,
                              foregroundColor: Colors.white,
                            ),
                          ),
                        ],
                      );
                    }
                  },
                ),
              ),

              // Form content
              Expanded(
                child: SingleChildScrollView(
                  padding: EdgeInsets.all(16),
                  child: Form(
                    key: _formKey,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Topic',
                          style: TextStyle(
                            fontSize: 24,
                            fontWeight: FontWeight.bold,
                            color: Colors.black87,
                          ),
                        ),
                        SizedBox(height: 24),

                        // Topic Name
                        TextFormField(
                          controller: _topicNameController,
                          decoration: InputDecoration(
                            labelText: 'Topic Name*',
                            border: OutlineInputBorder(),
                            contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
                          ),
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Please enter Topic Name';
                            }
                            return null;
                          },
                        ),
                        SizedBox(height: 32),

                      ],
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

//Unit Page
class UnitPage extends StatefulWidget {
  @override
  _UnitPageState createState() => _UnitPageState();
}

class _UnitPageState extends State<UnitPage> {
  final ScrollController _horizontalScrollController = ScrollController();
  final TextEditingController _searchController = TextEditingController();

  // Column widths - can be adjusted
  Map<String, double> columnWidths = {
    'Checkbox': 60,
    'UnitName': 730,
    'Division': 730,
  };

  // Map column keys to data field names
  Map<String, String> columnToDataField = {
    'UnitName': 'unitName',
    'Division': 'division',
  };

  // Sorting state
  String _sortColumn = '';
  bool _sortAscending = true;

  // Pagination state
  int _currentPage = 1;
  int _pageSize = 20;
  final List<int> _pageSizeOptions = [10, 20, 50, 100];

  // Sample data structure
  List<Map<String, dynamic>> _unitsData = [
    {
      'selected': false,
      'unitName': 'Inventory',
      'division': 'Information and Communications Technology',
    },
    {
      'selected': false,
      'unitName': 'Projects',
      'division': 'Technology Branch',
    },
  ];

  bool _selectAll = false;

  @override
  void dispose() {
    _horizontalScrollController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  List<Map<String, dynamic>> get _filteredData {
    var filtered = _unitsData;

    // Apply search filter
    if (_searchController.text.isNotEmpty) {
      filtered = filtered.where((unit) {
        return unit.values.any((value) =>
            value.toString().toLowerCase().contains(_searchController.text.toLowerCase()));
      }).toList();
    }

    // Apply sorting
    if (_sortColumn.isNotEmpty) {
      String dataField = columnToDataField[_sortColumn] ?? _sortColumn;
      filtered.sort((a, b) {
        var aValue = a[dataField] ?? '';
        var bValue = b[dataField] ?? '';

        int comparison = aValue.toString().compareTo(bValue.toString());
        return _sortAscending ? comparison : -comparison;
      });
    }

    return filtered;
  }

  List<Map<String, dynamic>> get _paginatedData {
    var filtered = _filteredData;
    int startIndex = (_currentPage - 1) * _pageSize;
    int endIndex = startIndex + _pageSize;

    if (startIndex >= filtered.length) return [];
    if (endIndex > filtered.length) endIndex = filtered.length;

    return filtered.sublist(startIndex, endIndex);
  }

  int get _totalPages {
    return (_filteredData.length / _pageSize).ceil();
  }

  void _refreshData() {
    setState(() {
      // Unselect all checkboxes
      for (var unit in _unitsData) {
        unit['selected'] = false;
      }
      _selectAll = false;
      // add actual data refresh logic here
    });
  }

  void _navigateToNewUnitPage() async {
    final result = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => NewUnitPage(),
      ),
    );

    if (result != null) {
      setState(() {
        _unitsData.add({
          'selected': false,
          'unitName': result['unitName'],
        });
      });

      // If keepOpen flag is set, reopen the page
      if (result['keepOpen'] == true) {
        _navigateToNewUnitPage();
      }
    }
  }

  void _toggleSelectAll() {
    setState(() {
      _selectAll = !_selectAll;
      for (var unit in _paginatedData) {
        unit['selected'] = _selectAll;
      }
    });
  }

  void _deleteSelected() {
    setState(() {
      _unitsData.removeWhere((unit) => unit['selected'] == true);
      _selectAll = false;
      // Adjust current page if needed
      if (_currentPage > _totalPages && _totalPages > 0) {
        _currentPage = _totalPages;
      }
    });
  }

  void _exportData() {
    // Add export functionality here
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Export functionality would be implemented here')),
    );
  }

  void _showFilterDialog(String columnKey) {
    // Add filter dialog functionality here
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Filter ${columnKey}'),
        content: Text('Filter functionality would be implemented here'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Close'),
          ),
        ],
      ),
    );
  }

  void _sortData(String columnKey) {
    setState(() {
      if (_sortColumn == columnKey) {
        _sortAscending = !_sortAscending;
      } else {
        _sortColumn = columnKey;
        _sortAscending = true;
      }
    });
  }

  bool _hasSelectedItems() {
    return _unitsData.any((unit) => unit['selected'] == true);
  }

  Widget _buildResizableColumn({
    required String title,
    required String columnKey,
    required bool isLast,
    Widget? customContent,
  }) {
    return Container(
      width: columnWidths[columnKey],
      child: Row(
        children: [
          Expanded(
            child: Container(
              height: 40, // Fixed height for consistent checkbox alignment
              padding: EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.grey.shade200,
                border: Border(
                  right: BorderSide(color: Colors.grey.shade400),
                  bottom: BorderSide(color: Colors.grey.shade400),
                ),
              ),
              child: customContent ??
                  Row(
                    children: [
                      Expanded(
                        child: Text(
                          title,
                          style: TextStyle(fontWeight: FontWeight.bold, fontSize: 12),
                          overflow: TextOverflow.ellipsis,
                        ),
                      ),
                      if (columnKey == 'UnitName') ...[
                        GestureDetector(
                          onTap: () => _sortData(columnKey),
                          child: Icon(
                            _sortColumn == columnKey
                                ? (_sortAscending ? Icons.arrow_upward : Icons.arrow_downward)
                                : Icons.unfold_more,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                        ),
                        SizedBox(width: 4),
                      ],
                      if (columnKey != 'Checkbox')
                        GestureDetector(
                          onTap: () => _showFilterDialog(columnKey),
                          child: Icon(
                            Icons.filter_alt_outlined,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                        ),
                    ],
                  ),
            ),
          ),
          if (!isLast)
            GestureDetector(
              onPanUpdate: (details) {
                setState(() {
                  columnWidths[columnKey] =
                      (columnWidths[columnKey]! + details.delta.dx).clamp(60.0, 400.0);
                });
              },
              child: Container(
                width: 4,
                height: 40,
                color: Colors.grey.shade400,
                child: MouseRegion(
                  cursor: SystemMouseCursors.resizeColumn,
                  child: Container(),
                ),
              ),
            ),
        ],
      ),
    );
  }

  Widget _buildDataCell(dynamic data, String columnKey, {Widget? customContent}) {
    return Container(
      width: columnWidths[columnKey],
      height: 40, // Fixed height for consistent alignment
      padding: EdgeInsets.all(8),
      decoration: BoxDecoration(
        border: Border(
          right: BorderSide(color: Colors.grey.shade400),
          bottom: BorderSide(color: Colors.grey.shade400),
        ),
      ),
      child: Align(
        alignment: Alignment.centerLeft,
        child: customContent ??
            Text(
              data.toString(),
              style: TextStyle(fontSize: 12),
              overflow: TextOverflow.ellipsis,
            ),
      ),
    );
  }

  Widget _buildPaginationControls() {
    return Container(
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        border: Border(
          top: BorderSide(color: Colors.grey.shade300, width: 1),
        ),
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          // Page numbers
          Row(
            children: [
              for (int i = 1; i <= _totalPages && i <= 4; i++)
                GestureDetector(
                  onTap: () {
                    setState(() {
                      _currentPage = i;
                    });
                  },
                  child: Container(
                    margin: EdgeInsets.symmetric(horizontal: 4),
                    padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                    decoration: BoxDecoration(
                      color: _currentPage == i ? Colors.orange.shade700 : Colors.transparent,
                      borderRadius: BorderRadius.circular(4),
                    ),
                    child: Text(
                      i.toString(),
                      style: TextStyle(
                        color: _currentPage == i ? Colors.white : Colors.black,
                        fontWeight: _currentPage == i ? FontWeight.bold : FontWeight.normal,
                      ),
                    ),
                  ),
                ),
            ],
          ),
          // Page size selector
          Row(
            children: [
              Text('Page Size: ', style: TextStyle(fontSize: 14)),
              DropdownButton<int>(
                value: _pageSize,
                items: _pageSizeOptions.map((size) {
                  return DropdownMenuItem<int>(
                    value: size,
                    child: Text(size.toString()),
                  );
                }).toList(),
                onChanged: (value) {
                  setState(() {
                    _pageSize = value!;
                    _currentPage = 1; // Reset to first page
                  });
                },
              ),
            ],
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        color: Colors.grey.shade50,
        child: Column(
          children: [
            // Header with buttons and search
            Container(
              width: double.infinity, // Full width
              padding: EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.white,
                border: Border(
                  bottom: BorderSide(color: Colors.grey.shade300, width: 1),
                ),
              ),
              child: LayoutBuilder(
                builder: (context, constraints) {
                  final isSmallScreen = constraints.maxWidth < 600;
                  final buttonStyle = OutlinedButton.styleFrom(
                    padding: isSmallScreen
                        ? EdgeInsets.symmetric(horizontal: 6, vertical: 4)
                        : EdgeInsets.symmetric(horizontal: 8, vertical: 6),
                    textStyle: TextStyle(
                      fontSize: isSmallScreen ? 12 : 14,
                    ),
                    minimumSize: Size(0, isSmallScreen ? 30 : 36),
                    side: BorderSide(color: Colors.grey.shade300),
                  );

                  return SingleChildScrollView(
                    scrollDirection: Axis.horizontal,
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.start, // Left-aligned content
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        // New Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _navigateToNewUnitPage,
                            icon: Icon(Icons.add, color: Colors.orange.shade700, size: 20),
                            padding: EdgeInsets.all(4),
                            tooltip: 'New',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _navigateToNewUnitPage,
                            icon: Icon(Icons.add, color: Colors.orange.shade700, size: 20),
                            label: Text('New'),
                            style: buttonStyle.copyWith(
                              backgroundColor: MaterialStateProperty.all(Colors.white),
                              foregroundColor: MaterialStateProperty.all(Colors.black),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Delete Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _hasSelectedItems() ? _deleteSelected : null,
                            icon: Icon(Icons.delete,
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                                size: 20
                            ),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Delete',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _hasSelectedItems() ? _deleteSelected : null,
                            icon: Icon(Icons.delete,
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                                size: 20
                            ),
                            label: Text(
                              'Delete',
                              style: TextStyle(
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                              ),
                            ),
                            style: buttonStyle.copyWith(
                              foregroundColor: MaterialStateProperty.all(
                                _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                              ),
                              side: MaterialStateProperty.all(
                                BorderSide(color: Colors.grey.shade300),
                              ),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Search Field
                        Container(
                          width: isSmallScreen ? 180 : 300,
                          child: TextField(
                            controller: _searchController,
                            onChanged: (value) {
                              setState(() {
                                _currentPage = 1;
                              });
                            },
                            decoration: InputDecoration(
                              isDense: true,
                              hintText: 'Search...',
                              suffixIcon: Icon(Icons.search, color: Colors.orange.shade700),
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(4),
                              ),
                              contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                            ),
                          ),
                        ),

                        SizedBox(width: 12),

                        // Export Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _exportData,
                            icon: Icon(Icons.download, color: Colors.orange.shade700, size: 20),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Export',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _exportData,
                            icon: Icon(Icons.download, color: Colors.orange.shade700, size: 20),
                            label: Text('Export'),
                            style: buttonStyle.copyWith(
                              backgroundColor: MaterialStateProperty.all(Colors.white),
                              foregroundColor: MaterialStateProperty.all(Colors.black),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Refresh Button
                        IconButton(
                          onPressed: _refreshData,
                          icon: Icon(Icons.refresh, color: Colors.orange.shade700, size: 20),
                          padding: EdgeInsets.all(4),
                          tooltip: 'Refresh',
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),

            // Table area
            Expanded(
              child: Container(
                margin: EdgeInsets.all(16),
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.grey.shade300),
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(4),
                ),
                child: Column(
                  children: [
                    // Table with synchronized scrolling
                    Expanded(
                      child: _paginatedData.isEmpty
                          ? Center(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(
                              Icons.folder_open,
                              size: 64,
                              color: Colors.grey.shade400,
                            ),
                            SizedBox(height: 16),
                            Text(
                              'No units found',
                              style: TextStyle(
                                fontSize: 18,
                                color: Colors.grey.shade600,
                              ),
                            ),
                            SizedBox(height: 8),
                            Text(
                              'Click "New" to add your first unit',
                              style: TextStyle(
                                fontSize: 14,
                                color: Colors.grey.shade500,
                              ),
                            ),
                          ],
                        ),
                      )
                          : SingleChildScrollView(
                        controller: _horizontalScrollController,
                        scrollDirection: Axis.horizontal,
                        child: Column(
                          children: [
                            // Table header
                            Row(
                              children: [
                                _buildResizableColumn(
                                  title: '',
                                  columnKey: 'Checkbox',
                                  isLast: false,
                                  customContent: Center(
                                    child: Checkbox(
                                      value: _selectAll,
                                      onChanged: (value) => _toggleSelectAll(),
                                    ),
                                  ),
                                ),
                                _buildResizableColumn(
                                  title: 'Unit Name',
                                  columnKey: 'UnitName',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Division',
                                  columnKey: 'Division',
                                  isLast: true,
                                ),
                              ],
                            ),

                            // Table body
                            Expanded(
                              child: SingleChildScrollView(
                                child: Column(
                                  children: _paginatedData.map((unit) {
                                    return Row(
                                      children: [
                                        _buildDataCell(
                                          '',
                                          'Checkbox',
                                          customContent: Center(
                                            child: Checkbox(
                                              value: unit['selected'],
                                              onChanged: (value) {
                                                setState(() {
                                                  unit['selected'] = value;
                                                });
                                              },
                                            ),
                                          ),
                                        ),
                                        _buildDataCell(unit['unitName'] ?? '', 'UnitName'),
                                        _buildDataCell(unit['division'] ?? '', 'Division'),
                                      ],
                                    );
                                  }).toList(),
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                    // Pagination controls
                    if (_totalPages > 0) _buildPaginationControls(),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// New Unit Page
class NewUnitPage extends StatefulWidget {
  @override
  _NewUnitPageState createState() => _NewUnitPageState();
}

class _NewUnitPageState extends State<NewUnitPage> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController _unitNameController = TextEditingController();
  int _selectedTabIndex = 0;

  @override
  void dispose() {
    _unitNameController.dispose();
    super.dispose();
  }

  void _saveUnit() {
    if (_formKey.currentState!.validate()) {
      Navigator.pop(context, {
        'unitName': _unitNameController.text,
      });
    }
  }

  void _saveAndNew() {
    if (_formKey.currentState!.validate()) {
      Navigator.pop(context, {
        'unitName': _unitNameController.text,
        'keepOpen': true,
      });
    }
  }

  void _deleteUnit() {
    Navigator.pop(context);
  }

  Widget _buildProjectPlanningsTab() {
    return Container(
      padding: EdgeInsets.all(16),
      child: Column(
        children: [
          // Action buttons
          Container(
            width: double.infinity,
            child: SingleChildScrollView(
              scrollDirection: Axis.horizontal,
              child: Row(
                children: [
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.add, size: 16),
                    label: Text('New'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.link, size: 16),
                    label: Text('Link'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.link_off, size: 16),
                    label: Text('Unlink'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.delete, size: 16, color: Colors.red),
                    label: Text('Delete'),
                    style: OutlinedButton.styleFrom(
                      foregroundColor: Colors.red,
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  Container(
                    width: 180,
                    child: TextField(
                      decoration: InputDecoration(
                        isDense: true,
                        hintText: 'Search...',
                        prefixIcon: Icon(Icons.search, size: 16),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(4),
                          borderSide: BorderSide(color: Colors.grey.shade300),
                        ),
                        contentPadding: EdgeInsets.symmetric(vertical: 8, horizontal: 8),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
          SizedBox(height: 16),
          // Table
          Expanded(
            child: Container(
              decoration: BoxDecoration(
                border: Border.all(color: Colors.grey.shade300),
                borderRadius: BorderRadius.circular(4),
              ),
              child: Column(
                children: [
                  // Table header
                  Container(
                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 12),
                    decoration: BoxDecoration(
                      color: Colors.grey.shade100,
                      border: Border(bottom: BorderSide(color: Colors.grey.shade300)),
                    ),
                    child: SingleChildScrollView(
                      scrollDirection: Axis.horizontal,
                      child: Row(
                        children: [
                          SizedBox(
                            width: 40,
                            child: Row(
                              children: [
                                Checkbox(value: false, onChanged: (_) {}),
                              ],
                            ),
                          ),
                          SizedBox(width: 8),
                          _buildCompactTableHeader('Project Name'),
                          _buildCompactTableHeader('Project Manager'),
                          _buildCompactTableHeader('Project Budget'),
                          _buildCompactTableHeader('Project Start Date'),
                          _buildCompactTableHeader('Project End Date'),
                          _buildCompactTableHeader('Team'),
                          _buildCompactTableHeader('Project Category'),
                          _buildCompactTableHeader('Unit'),
                          _buildCompactTableHeader('Project Status'),
                        ],
                      ),
                    ),
                  ),
                  // Table content
                  Expanded(
                    child: Center(
                      child: Text('No data to display', style: TextStyle(color: Colors.grey)),
                    ),
                  ),
                ],
              ),
            ),
          ),
          // Pagination
          Container(
            padding: EdgeInsets.symmetric(vertical: 16),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Container(
                  padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                  decoration: BoxDecoration(
                    color: Colors.orange.shade700,
                    borderRadius: BorderRadius.circular(4),
                  ),
                  child: Text('1', style: TextStyle(color: Colors.white, fontWeight: FontWeight.w600)),
                ),
                Row(
                  children: [
                    Text('Page Size: '),
                    DropdownButton<int>(
                      value: 20,
                      items: [10, 20, 50, 100].map((size) => DropdownMenuItem(
                        value: size,
                        child: Text(size.toString()),
                      )).toList(),
                      onChanged: (value) {},
                      underline: Container(),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildApplicationUsersTab() {
    return Container(
      padding: EdgeInsets.all(16),
      child: Column(
        children: [
          // Action buttons
          Container(
            width: double.infinity,
            child: SingleChildScrollView(
              scrollDirection: Axis.horizontal,
              child: Row(
                children: [
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.add, size: 16),
                    label: Text('New'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.link, size: 16),
                    label: Text('Link'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.link_off, size: 16),
                    label: Text('Unlink'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.delete, size: 16, color: Colors.red),
                    label: Text('Delete'),
                    style: OutlinedButton.styleFrom(
                      foregroundColor: Colors.red,
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  Container(
                    width: 180,
                    child: TextField(
                      decoration: InputDecoration(
                        isDense: true,
                        hintText: 'Search...',
                        prefixIcon: Icon(Icons.search, size: 16),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(4),
                          borderSide: BorderSide(color: Colors.grey.shade300),
                        ),
                        contentPadding: EdgeInsets.symmetric(vertical: 8, horizontal: 8),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
          SizedBox(height: 16),
          // Table
          Expanded(
            child: Container(
              decoration: BoxDecoration(
                border: Border.all(color: Colors.grey.shade300),
                borderRadius: BorderRadius.circular(4),
              ),
              child: Column(
                children: [
                  // Table header
                  Container(
                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 12),
                    decoration: BoxDecoration(
                      color: Colors.grey.shade100,
                      border: Border(bottom: BorderSide(color: Colors.grey.shade300)),
                    ),
                    child: SingleChildScrollView(
                      scrollDirection: Axis.horizontal,
                      child: Row(
                        children: [
                          SizedBox(
                            width: 40,
                            child: Row(
                              children: [
                                Checkbox(value: false, onChanged: (_) {}),
                              ],
                            ),
                          ),
                          SizedBox(width: 8),
                          _buildCompactTableHeader('User Name'),
                          _buildCompactTableHeader('First Name'),
                          _buildCompactTableHeader('Last Name'),
                          _buildCompactTableHeader('Full Name'),
                          _buildCompactTableHeader('Email'),
                          _buildCompactTableHeader('Unit'),
                        ],
                      ),
                    ),
                  ),
                  // Table content
                  Expanded(
                    child: Center(
                      child: Text('No data to display', style: TextStyle(color: Colors.grey)),
                    ),
                  ),
                ],
              ),
            ),
          ),
          // Pagination
          Container(
            padding: EdgeInsets.symmetric(vertical: 16),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Container(
                  padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                  decoration: BoxDecoration(
                    color: Colors.orange.shade700,
                    borderRadius: BorderRadius.circular(4),
                  ),
                  child: Text('1', style: TextStyle(color: Colors.white, fontWeight: FontWeight.w600)),
                ),
                Row(
                  children: [
                    Text('Page Size: '),
                    DropdownButton<int>(
                      value: 20,
                      items: [10, 20, 50, 100].map((size) => DropdownMenuItem(
                        value: size,
                        child: Text(size.toString()),
                      )).toList(),
                      onChanged: (value) {},
                      underline: Container(),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildProjectTeamsTab() {
    return Container(
      padding: EdgeInsets.all(16),
      child: Column(
        children: [
          // Action buttons
          Container(
            width: double.infinity,
            child: SingleChildScrollView(
              scrollDirection: Axis.horizontal,
              child: Row(
                children: [
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.add, size: 16),
                    label: Text('New'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.link, size: 16),
                    label: Text('Link'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.link_off, size: 16),
                    label: Text('Unlink'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.delete, size: 16, color: Colors.red),
                    label: Text('Delete'),
                    style: OutlinedButton.styleFrom(
                      foregroundColor: Colors.red,
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  Container(
                    width: 180,
                    child: TextField(
                      decoration: InputDecoration(
                        isDense: true,
                        hintText: 'Search...',
                        prefixIcon: Icon(Icons.search, size: 16),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(4),
                          borderSide: BorderSide(color: Colors.grey.shade300),
                        ),
                        contentPadding: EdgeInsets.symmetric(vertical: 8, horizontal: 8),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
          SizedBox(height: 16),
          // Table
          Expanded(
            child: Container(
              decoration: BoxDecoration(
                border: Border.all(color: Colors.grey.shade300),
                borderRadius: BorderRadius.circular(4),
              ),
              child: Column(
                children: [
                  // Table header
                  Container(
                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 12),
                    decoration: BoxDecoration(
                      color: Colors.grey.shade100,
                      border: Border(bottom: BorderSide(color: Colors.grey.shade300)),
                    ),
                    child: SingleChildScrollView(
                      scrollDirection: Axis.horizontal,
                      child: Row(
                        children: [
                          SizedBox(
                            width: 40,
                            child: Row(
                              children: [
                                Checkbox(value: false, onChanged: (_) {}),
                              ],
                            ),
                          ),
                          SizedBox(width: 8),
                          _buildCompactTableHeader('Team Name'),
                        ],
                      ),
                    ),
                  ),
                  // Table content
                  Expanded(
                    child: Center(
                      child: Text('No data to display', style: TextStyle(color: Colors.grey)),
                    ),
                  ),
                ],
              ),
            ),
          ),
          // Pagination
          Container(
            padding: EdgeInsets.symmetric(vertical: 16),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Container(
                  padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                  decoration: BoxDecoration(
                    color: Colors.orange.shade700,
                    borderRadius: BorderRadius.circular(4),
                  ),
                  child: Text('1', style: TextStyle(color: Colors.white, fontWeight: FontWeight.w600)),
                ),
                Row(
                  children: [
                    Text('Page Size: '),
                    DropdownButton<int>(
                      value: 20,
                      items: [10, 20, 50, 100].map((size) => DropdownMenuItem(
                        value: size,
                        child: Text(size.toString()),
                      )).toList(),
                      onChanged: (value) {},
                      underline: Container(),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildCompactTableHeader(String title) {
    return Container(
      width: 120,
      padding: EdgeInsets.symmetric(horizontal: 4),
      child: Row(
        children: [
          Expanded(
            child: Text(
              title,
              style: TextStyle(fontWeight: FontWeight.w600, fontSize: 10),
              overflow: TextOverflow.ellipsis,
            ),
          ),
          Icon(Icons.filter_list, size: 10, color: Colors.grey),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        Navigator.pop(context, null);
        return false;
      },
      child: Scaffold(
        appBar: AppBar(
          title: Text('Unit'),
          backgroundColor: Colors.white,
          foregroundColor: Colors.black,
          elevation: 0,
          leading: IconButton(
            onPressed: () => Navigator.pop(context, null),
            icon: Icon(Icons.arrow_back, color: Colors.black),
          ),
          actions: [
            IconButton(
              onPressed: () => Navigator.pop(context, null),
              icon: Icon(Icons.arrow_back),
            ),
            IconButton(
              onPressed: () => Navigator.pop(context, null),
              icon: Icon(Icons.arrow_forward),
            ),
            IconButton(
              onPressed: () => _formKey.currentState?.reset(),
              icon: Icon(Icons.refresh),
            ),
          ],
        ),
        body: Container(
          color: Colors.grey.shade50,
          child: Column(
            children: [
              // Action buttons
              Container(
                padding: EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.white,
                  border: Border(
                    bottom: BorderSide(color: Colors.grey.shade300, width: 1),
                  ),
                ),
                child: LayoutBuilder(
                  builder: (context, constraints) {
                    bool isSmallScreen = constraints.maxWidth < 600;

                    if (isSmallScreen) {
                      // Stack buttons vertically on small screens
                      return Column(
                        children: [
                          Row(
                            children: [
                              Expanded(
                                child: OutlinedButton.icon(
                                  onPressed: _deleteUnit,
                                  icon: Icon(Icons.delete, color: Colors.red.shade400, size: 18),
                                  label: Text('Delete', style: TextStyle(fontSize: 12)),
                                  style: OutlinedButton.styleFrom(
                                    foregroundColor: Colors.red.shade400,
                                    side: BorderSide(color: Colors.grey.shade300),
                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                  ),
                                ),
                              ),
                            ],
                          ),
                          SizedBox(height: 6),
                          Row(
                            children: [
                              Expanded(
                                child: OutlinedButton.icon(
                                  onPressed: _saveAndNew,
                                  icon: Icon(Icons.save, color: Colors.orange.shade700, size: 18),
                                  label: Text('Save & New', style: TextStyle(fontSize: 12)),
                                  style: OutlinedButton.styleFrom(
                                    foregroundColor: Colors.orange.shade700,
                                    side: BorderSide(color: Colors.orange.shade700),
                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                  ),
                                ),
                              ),
                              SizedBox(width: 6),
                              Expanded(
                                child: ElevatedButton.icon(
                                  onPressed: _saveUnit,
                                  icon: Icon(Icons.save, color: Colors.white, size: 18),
                                  label: Text('Save', style: TextStyle(fontSize: 12)),
                                  style: ElevatedButton.styleFrom(
                                    backgroundColor: Colors.orange.shade700,
                                    foregroundColor: Colors.white,
                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ],
                      );
                    } else {
                      // Original horizontal layout for larger screens
                      return Row(
                        children: [
                          OutlinedButton.icon(
                            onPressed: _deleteUnit,
                            icon: Icon(Icons.delete, color: Colors.red.shade400, size: 20),
                            label: Text('Delete'),
                            style: OutlinedButton.styleFrom(
                              foregroundColor: Colors.red.shade400,
                              side: BorderSide(color: Colors.grey.shade300),
                            ),
                          ),
                          Spacer(),
                          OutlinedButton.icon(
                            onPressed: _saveAndNew,
                            icon: Icon(Icons.save, color: Colors.orange.shade700, size: 20),
                            label: Text('Save and New'),
                            style: OutlinedButton.styleFrom(
                              foregroundColor: Colors.orange.shade700,
                              side: BorderSide(color: Colors.orange.shade700),
                            ),
                          ),
                          SizedBox(width: 8),
                          ElevatedButton.icon(
                            onPressed: _saveUnit,
                            icon: Icon(Icons.save, color: Colors.white, size: 20),
                            label: Text('Save'),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.orange.shade700,
                              foregroundColor: Colors.white,
                            ),
                          ),
                        ],
                      );
                    }
                  },
                ),
              ),

              // Form content
              Expanded(
                child: SingleChildScrollView(
                  padding: EdgeInsets.all(16),
                  child: Form(
                    key: _formKey,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Unit',
                          style: TextStyle(
                            fontSize: 24,
                            fontWeight: FontWeight.bold,
                            color: Colors.black87,
                          ),
                        ),
                        SizedBox(height: 24),

                        // Unit Name
                        TextFormField(
                          controller: _unitNameController,
                          decoration: InputDecoration(
                            labelText: 'Unit Name*',
                            border: OutlineInputBorder(),
                            contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
                          ),
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Please enter Unit Name';
                            }
                            return null;
                          },
                        ),
                        SizedBox(height: 32),

                        // Tabs Section
                        Container(
                          decoration: BoxDecoration(
                            color: Colors.white,
                            borderRadius: BorderRadius.circular(8),
                            border: Border.all(color: Colors.grey.shade300),
                          ),
                          child: Column(
                            children: [
                              // Tab headers
                              Container(
                                decoration: BoxDecoration(
                                  border: Border(bottom: BorderSide(color: Colors.grey.shade300)),
                                ),
                                child: Row(
                                  children: [
                                    GestureDetector(
                                      onTap: () => setState(() => _selectedTabIndex = 0),
                                      child: Container(
                                        padding: EdgeInsets.symmetric(horizontal: 20, vertical: 12),
                                        decoration: BoxDecoration(
                                          color: _selectedTabIndex == 0 ? Colors.orange.shade700 : Colors.transparent,
                                          borderRadius: BorderRadius.only(
                                            topLeft: Radius.circular(8),
                                          ),
                                        ),
                                        child: Row(
                                          children: [
                                            Icon(
                                              Icons.task_alt,
                                              size: 16,
                                              color: _selectedTabIndex == 0 ? Colors.white : Colors.orange.shade700,
                                            ),
                                            SizedBox(width: 8),
                                            Text(
                                              'Plannings',
                                              style: TextStyle(
                                                color: _selectedTabIndex == 0 ? Colors.white : Colors.black87,
                                                fontWeight: FontWeight.w500,
                                              ),
                                            ),
                                          ],
                                        ),
                                      ),
                                    ),
                                    GestureDetector(
                                      onTap: () => setState(() => _selectedTabIndex = 1),
                                      child: Container(
                                        padding: EdgeInsets.symmetric(horizontal: 20, vertical: 12),
                                        decoration: BoxDecoration(
                                          color: _selectedTabIndex == 1 ? Colors.orange.shade700 : Colors.transparent,
                                        ),
                                        child: Row(
                                          children: [
                                            Icon(
                                              Icons.person,
                                              size: 16,
                                              color: _selectedTabIndex == 1 ? Colors.white : Colors.orange.shade700,
                                            ),
                                            SizedBox(width: 8),
                                            Text(
                                              'Users',
                                              style: TextStyle(
                                                color: _selectedTabIndex == 1 ? Colors.white : Colors.black87,
                                                fontWeight: FontWeight.w500,
                                              ),
                                            ),
                                          ],
                                        ),
                                      ),
                                    ),
                                    GestureDetector(
                                      onTap: () => setState(() => _selectedTabIndex = 2),
                                      child: Container(
                                        padding: EdgeInsets.symmetric(horizontal: 20, vertical: 12),
                                        decoration: BoxDecoration(
                                          color: _selectedTabIndex == 2 ? Colors.orange.shade700 : Colors.transparent,
                                          borderRadius: BorderRadius.only(
                                            topRight: Radius.circular(8),
                                          ),
                                        ),
                                        child: Row(
                                          children: [
                                            Icon(
                                              Icons.group,
                                              size: 16,
                                              color: _selectedTabIndex == 2 ? Colors.white : Colors.orange.shade700,
                                            ),
                                            SizedBox(width: 8),
                                            Text(
                                              'Teams',
                                              style: TextStyle(
                                                color: _selectedTabIndex == 2 ? Colors.white : Colors.black87,
                                                fontWeight: FontWeight.w500,
                                              ),
                                            ),
                                          ],
                                        ),
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                              // Tab content
                              Container(
                                height: 400,
                                child: _selectedTabIndex == 0
                                    ? _buildProjectPlanningsTab()
                                    : _selectedTabIndex == 1
                                    ? _buildApplicationUsersTab()
                                    : _buildProjectTeamsTab(),
                              ),
                            ],
                          ),
                        ),
                        SizedBox(height: 32),
                      ],
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Analysis Page
class AnalysisPage extends StatefulWidget {
  @override
  _AnalysisPageState createState() => _AnalysisPageState();
}

class _AnalysisPageState extends State<AnalysisPage> {
  final ScrollController _horizontalScrollController = ScrollController();
  final TextEditingController _searchController = TextEditingController();

  // Column widths - can be adjusted
  Map<String, double> columnWidths = {
    'Checkbox': 60,
    'Name': 300,
    'Criteria': 300,
    'DataType': 300,
  };

  // Map column keys to data field names
  Map<String, String> columnToDataField = {
    'Name': 'name',
    'Criteria': 'criteria',
    'DataType': 'dataType',
  };

  // Sorting state
  String _sortColumn = '';
  bool _sortAscending = true;

  // Pagination state
  int _currentPage = 1;
  int _pageSize = 20;
  final List<int> _pageSizeOptions = [10, 20, 50, 100];

  // Sample data structure
  List<Map<String, dynamic>> _analysisData = [

  ];

  bool _selectAll = false;

  @override
  void dispose() {
    _horizontalScrollController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  List<Map<String, dynamic>> get _filteredData {
    var filtered = _analysisData;

    // Apply search filter
    if (_searchController.text.isNotEmpty) {
      filtered = filtered.where((analysis) {
        return analysis.values.any((value) =>
            value.toString().toLowerCase().contains(_searchController.text.toLowerCase()));
      }).toList();
    }

    // Apply sorting
    if (_sortColumn.isNotEmpty) {
      String dataField = columnToDataField[_sortColumn] ?? _sortColumn;
      filtered.sort((a, b) {
        var aValue = a[dataField] ?? '';
        var bValue = b[dataField] ?? '';

        int comparison = aValue.toString().compareTo(bValue.toString());
        return _sortAscending ? comparison : -comparison;
      });
    }

    return filtered;
  }

  List<Map<String, dynamic>> get _paginatedData {
    var filtered = _filteredData;
    int startIndex = (_currentPage - 1) * _pageSize;
    int endIndex = startIndex + _pageSize;

    if (startIndex >= filtered.length) return [];
    if (endIndex > filtered.length) endIndex = filtered.length;

    return filtered.sublist(startIndex, endIndex);
  }

  int get _totalPages {
    return (_filteredData.length / _pageSize).ceil();
  }

  void _refreshData() {
    setState(() {
      // Unselect all checkboxes
      for (var analysis in _analysisData) {
        analysis['selected'] = false;
      }
      _selectAll = false;
      // add actual data refresh logic here
    });
  }

  void _navigateToNewAnalysisPage() async {
    final result = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => NewAnalysisPage(),
      ),
    );

    if (result != null) {
      setState(() {
        _analysisData.add({
          'selected': false,
          'name': result['name'],
          'dataType': result['dataType'],
          'criteria': result['criteria'],
        });
      });

      // If keepOpen flag is set, reopen the page
      if (result['keepOpen'] == true) {
        _navigateToNewAnalysisPage();
      }
    }
  }

  void _toggleSelectAll() {
    setState(() {
      _selectAll = !_selectAll;
      for (var analysis in _paginatedData) {
        analysis['selected'] = _selectAll;
      }
    });
  }

  void _deleteSelected() {
    setState(() {
      _analysisData.removeWhere((analysis) => analysis['selected'] == true);
      _selectAll = false;
      // Adjust current page if needed
      if (_currentPage > _totalPages && _totalPages > 0) {
        _currentPage = _totalPages;
      }
    });
  }

  void _exportData() {
    // Add export functionality here
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Export functionality would be implemented here')),
    );
  }

  void _showFilterDialog(String columnKey) {
    // Add filter dialog functionality here
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Filter ${columnKey}'),
        content: Text('Filter functionality would be implemented here'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Close'),
          ),
        ],
      ),
    );
  }

  void _sortData(String columnKey) {
    setState(() {
      if (_sortColumn == columnKey) {
        _sortAscending = !_sortAscending;
      } else {
        _sortColumn = columnKey;
        _sortAscending = true;
      }
    });
  }

  bool _hasSelectedItems() {
    return _analysisData.any((analysis) => analysis['selected'] == true);
  }

  Widget _buildResizableColumn({
    required String title,
    required String columnKey,
    required bool isLast,
    Widget? customContent,
  }) {
    return Container(
      width: columnWidths[columnKey],
      child: Row(
        children: [
          Expanded(
            child: Container(
              height: 40, // Fixed height for consistent checkbox alignment
              padding: EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.grey.shade200,
                border: Border(
                  right: BorderSide(color: Colors.grey.shade400),
                  bottom: BorderSide(color: Colors.grey.shade400),
                ),
              ),
              child: customContent ??
                  Row(
                    children: [
                      Expanded(
                        child: Text(
                          title,
                          style: TextStyle(fontWeight: FontWeight.bold, fontSize: 12),
                          overflow: TextOverflow.ellipsis,
                        ),
                      ),
                      if (columnKey == 'Name') ...[
                        GestureDetector(
                          onTap: () => _sortData(columnKey),
                          child: Icon(
                            _sortColumn == columnKey
                                ? (_sortAscending ? Icons.arrow_upward : Icons.arrow_downward)
                                : Icons.unfold_more,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                        ),
                        SizedBox(width: 4),
                      ],
                      if (columnKey != 'Checkbox')
                        GestureDetector(
                          onTap: () => _showFilterDialog(columnKey),
                          child: Icon(
                            Icons.filter_alt_outlined,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                        ),
                    ],
                  ),
            ),
          ),
          if (!isLast)
            GestureDetector(
              onPanUpdate: (details) {
                setState(() {
                  columnWidths[columnKey] =
                      (columnWidths[columnKey]! + details.delta.dx).clamp(60.0, 400.0);
                });
              },
              child: Container(
                width: 4,
                height: 40,
                color: Colors.grey.shade400,
                child: MouseRegion(
                  cursor: SystemMouseCursors.resizeColumn,
                  child: Container(),
                ),
              ),
            ),
        ],
      ),
    );
  }

  Widget _buildDataCell(dynamic data, String columnKey, {Widget? customContent}) {
    return Container(
      width: columnWidths[columnKey],
      height: 40, // Fixed height for consistent alignment
      padding: EdgeInsets.all(8),
      decoration: BoxDecoration(
        border: Border(
          right: BorderSide(color: Colors.grey.shade400),
          bottom: BorderSide(color: Colors.grey.shade400),
        ),
      ),
      child: Align(
        alignment: Alignment.centerLeft,
        child: customContent ??
            Text(
              data.toString(),
              style: TextStyle(fontSize: 12),
              overflow: TextOverflow.ellipsis,
            ),
      ),
    );
  }

  Widget _buildPaginationControls() {
    return Container(
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        border: Border(
          top: BorderSide(color: Colors.grey.shade300, width: 1),
        ),
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          // Page numbers
          Row(
            children: [
              for (int i = 1; i <= _totalPages && i <= 4; i++)
                GestureDetector(
                  onTap: () {
                    setState(() {
                      _currentPage = i;
                    });
                  },
                  child: Container(
                    margin: EdgeInsets.symmetric(horizontal: 4),
                    padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                    decoration: BoxDecoration(
                      color: _currentPage == i ? Colors.orange.shade700 : Colors.transparent,
                      borderRadius: BorderRadius.circular(4),
                    ),
                    child: Text(
                      i.toString(),
                      style: TextStyle(
                        color: _currentPage == i ? Colors.white : Colors.black,
                        fontWeight: _currentPage == i ? FontWeight.bold : FontWeight.normal,
                      ),
                    ),
                  ),
                ),
            ],
          ),
          // Page size selector
          Row(
            children: [
              Text('Page Size: ', style: TextStyle(fontSize: 14)),
              DropdownButton<int>(
                value: _pageSize,
                items: _pageSizeOptions.map((size) {
                  return DropdownMenuItem<int>(
                    value: size,
                    child: Text(size.toString()),
                  );
                }).toList(),
                onChanged: (value) {
                  setState(() {
                    _pageSize = value!;
                    _currentPage = 1; // Reset to first page
                  });
                },
              ),
            ],
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        color: Colors.grey.shade50,
        child: Column(
          children: [
            // Header with buttons and search
            Container(
              width: double.infinity, // Full width
              padding: EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.white,
                border: Border(
                  bottom: BorderSide(color: Colors.grey.shade300, width: 1),
                ),
              ),
              child: LayoutBuilder(
                builder: (context, constraints) {
                  final isSmallScreen = constraints.maxWidth < 600;
                  final buttonStyle = OutlinedButton.styleFrom(
                    padding: isSmallScreen
                        ? EdgeInsets.symmetric(horizontal: 6, vertical: 4)
                        : EdgeInsets.symmetric(horizontal: 8, vertical: 6),
                    textStyle: TextStyle(
                      fontSize: isSmallScreen ? 12 : 14,
                    ),
                    minimumSize: Size(0, isSmallScreen ? 30 : 36),
                    side: BorderSide(color: Colors.grey.shade300),
                  );

                  return SingleChildScrollView(
                    scrollDirection: Axis.horizontal,
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.start, // Left-aligned content
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        // New Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _navigateToNewAnalysisPage,
                            icon: Icon(Icons.add, color: Colors.orange.shade700, size: 20),
                            padding: EdgeInsets.all(4),
                            tooltip: 'New',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _navigateToNewAnalysisPage,
                            icon: Icon(Icons.add, color: Colors.orange.shade700, size: 20),
                            label: Text('New'),
                            style: buttonStyle.copyWith(
                              backgroundColor: MaterialStateProperty.all(Colors.white),
                              foregroundColor: MaterialStateProperty.all(Colors.black),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Delete Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _hasSelectedItems() ? _deleteSelected : null,
                            icon: Icon(Icons.delete,
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                                size: 20
                            ),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Delete',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _hasSelectedItems() ? _deleteSelected : null,
                            icon: Icon(Icons.delete,
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                                size: 20
                            ),
                            label: Text(
                              'Delete',
                              style: TextStyle(
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                              ),
                            ),
                            style: buttonStyle.copyWith(
                              foregroundColor: MaterialStateProperty.all(
                                _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                              ),
                              side: MaterialStateProperty.all(
                                BorderSide(color: Colors.grey.shade300),
                              ),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Search Field
                        Container(
                          width: isSmallScreen ? 180 : 300,
                          child: TextField(
                            controller: _searchController,
                            onChanged: (value) {
                              setState(() {
                                _currentPage = 1;
                              });
                            },
                            decoration: InputDecoration(
                              isDense: true,
                              hintText: 'Search...',
                              suffixIcon: Icon(Icons.search, color: Colors.orange.shade700),
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(4),
                              ),
                              contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                            ),
                          ),
                        ),

                        SizedBox(width: 12),

                        // Export Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _exportData,
                            icon: Icon(Icons.download, color: Colors.orange.shade700, size: 20),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Export',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _exportData,
                            icon: Icon(Icons.download, color: Colors.orange.shade700, size: 20),
                            label: Text('Export'),
                            style: buttonStyle.copyWith(
                              backgroundColor: MaterialStateProperty.all(Colors.white),
                              foregroundColor: MaterialStateProperty.all(Colors.black),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Refresh Button
                        IconButton(
                          onPressed: _refreshData,
                          icon: Icon(Icons.refresh, color: Colors.orange.shade700, size: 20),
                          padding: EdgeInsets.all(4),
                          tooltip: 'Refresh',
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),

            // Table area
            Expanded(
              child: Container(
                margin: EdgeInsets.all(16),
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.grey.shade300),
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(4),
                ),
                child: Column(
                  children: [
                    // Table with synchronized scrolling
                    Expanded(
                      child: _paginatedData.isEmpty
                          ? Center(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(
                              Icons.folder_open,
                              size: 64,
                              color: Colors.grey.shade400,
                            ),
                            SizedBox(height: 16),
                            Text(
                              'No data to display',
                              style: TextStyle(
                                fontSize: 18,
                                color: Colors.grey.shade600,
                              ),
                            ),
                            SizedBox(height: 8),
                            Text(
                              'Click "New" to add data',
                              style: TextStyle(
                                fontSize: 14,
                                color: Colors.grey.shade500,
                              ),
                            ),
                          ],
                        ),
                      )
                          : SingleChildScrollView(
                        controller: _horizontalScrollController,
                        scrollDirection: Axis.horizontal,
                        child: Column(
                          children: [
                            // Table header
                            Row(
                              children: [
                                _buildResizableColumn(
                                  title: '',
                                  columnKey: 'Checkbox',
                                  isLast: false,
                                  customContent: Center(
                                    child: Checkbox(
                                      value: _selectAll,
                                      onChanged: (value) => _toggleSelectAll(),
                                    ),
                                  ),
                                ),
                                _buildResizableColumn(
                                  title: 'Name',
                                  columnKey: 'Name',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Criteria',
                                  columnKey: 'Criteria',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Data Type',
                                  columnKey: 'DataType',
                                  isLast: true,
                                ),
                              ],
                            ),

                            // Table body
                            Expanded(
                              child: SingleChildScrollView(
                                child: Column(
                                  children: _paginatedData.map((analysis) {
                                    return Row(
                                      children: [
                                        _buildDataCell(
                                          '',
                                          'Checkbox',
                                          customContent: Center(
                                            child: Checkbox(
                                              value: analysis['selected'],
                                              onChanged: (value) {
                                                setState(() {
                                                  analysis['selected'] = value;
                                                });
                                              },
                                            ),
                                          ),
                                        ),
                                        _buildDataCell(analysis['name'] ?? '', 'Name'),
                                        _buildDataCell(analysis['criteria'] ?? '', 'Criteria'),
                                        _buildDataCell(analysis['dataType'] ?? '', 'DataType')
                                      ],
                                    );
                                  }).toList(),
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                    // Pagination controls
                    if (_totalPages > 0) _buildPaginationControls(),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// New Analysis Page
class NewAnalysisPage extends StatefulWidget {
  @override
  _NewAnalysisPageState createState() => _NewAnalysisPageState();
}

class _NewAnalysisPageState extends State<NewAnalysisPage> {
  final _formKey = GlobalKey<FormState>();
  final Map<String, TextEditingController> _controllers = {};

  // Form field values
  String _selectedDataType = '';

  @override
  void initState() {
    super.initState();
    // Initialize controllers for all form fields
    [
      'name', 'criteria'
    ].forEach((field) {
      _controllers[field] = TextEditingController();
    });
  }

  @override
  void dispose() {
    _controllers.values.forEach((controller) => controller.dispose());
    super.dispose();
  }

  void _saveAnalysis() {
    if (_formKey.currentState!.validate()) {
      // Prepare the data to return
      Map<String, dynamic> formData = {
        'name': _controllers['name']!.text,
        'dataType': _selectedDataType,
        'criteria': _controllers['criteria']!.text,
        'keepOpen': false,
      };

      Navigator.pop(context, formData);
    }
  }

  void _saveAndNew() {
    if (_formKey.currentState!.validate()) {
      // Prepare the data to return
      Map<String, dynamic> formData = {
        'name': _controllers['name']!.text,
        'dataType': _selectedDataType,
        'criteria': _controllers['criteria']!.text,
        'keepOpen': true,
      };

      Navigator.pop(context, formData);
    }
  }

  void _deleteAnalysis() {
    Navigator.pop(context, null);
  }

  void _bindAnalysisData() {
    // TODO: Implement bind analysis data functionality
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Bind Analysis Data functionality to be implemented')),
    );
  }

  void _unbindAnalysisData() {
    // TODO: Implement unbind analysis data functionality
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Unbind Analysis Data functionality to be implemented')),
    );
  }

  void _refreshData() {
    setState(() {
      // Refresh the data
    });
  }

  Widget _buildDropdownField({
    required String label,
    required String value,
    required List<String> items,
    required Function(String?) onChanged,
    bool isRequired = false,
  }) {
    return DropdownButtonFormField<String>(
      value: value.isEmpty ? null : value,
      decoration: InputDecoration(
        labelText: isRequired ? '$label*' : label,
        border: OutlineInputBorder(),
        contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
        suffixIcon: Icon(Icons.arrow_drop_down, size: 20),
      ),
      items: items.map((item) => DropdownMenuItem(
        value: item,
        child: Text(item),
      )).toList(),
      onChanged: onChanged,
      validator: isRequired ? (value) {
        if (value == null || value.isEmpty) {
          return 'Please select a $label';
        }
        return null;
      } : null,
    );
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async{
        Navigator.pop(context, null);
        return false;
      },
      child: Scaffold(
        appBar: AppBar(
          title: Text('Analysis'),
          backgroundColor: Colors.white,
          foregroundColor: Colors.black,
          elevation: 0,
          actions: [
            IconButton(
              onPressed: () => Navigator.pop(context),
              icon: Icon(Icons.arrow_back),
            ),
            IconButton(
              onPressed: () => Navigator.pop(context),
              icon: Icon(Icons.arrow_forward),
            ),
            IconButton(
              onPressed: _refreshData,
              icon: Icon(Icons.refresh),
            ),
          ],
        ),
        body: Container(
          color: Colors.grey.shade50,
          child: Column(
            children: [
              // Action buttons - Made responsive
              Container(
                padding: EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.white,
                  border: Border(
                    bottom: BorderSide(color: Colors.grey.shade300, width: 1),
                  ),
                ),
                child: LayoutBuilder(
                  builder: (context, constraints) {
                    bool isSmallScreen = constraints.maxWidth < 700;

                    if (isSmallScreen) {
                      // Stack buttons vertically on small screens
                      return Column(
                        children: [
                          Row(
                            children: [
                              Expanded(
                                child: OutlinedButton.icon(
                                  onPressed: _deleteAnalysis,
                                  icon: Icon(Icons.delete, color: Colors.red.shade400, size: 18),
                                  label: Text('Delete', style: TextStyle(fontSize: 12)),
                                  style: OutlinedButton.styleFrom(
                                    foregroundColor: Colors.red.shade400,
                                    side: BorderSide(color: Colors.grey.shade300),
                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                  ),
                                ),
                              ),
                              SizedBox(width: 6),
                              Expanded(
                                child: OutlinedButton.icon(
                                  onPressed: _bindAnalysisData,
                                  icon: Icon(Icons.link, color: Colors.blue.shade600, size: 18),
                                  label: Text('Bind Data', style: TextStyle(fontSize: 12)),
                                  style: OutlinedButton.styleFrom(
                                    foregroundColor: Colors.blue.shade600,
                                    side: BorderSide(color: Colors.grey.shade300),
                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                  ),
                                ),
                              ),
                              SizedBox(width: 6),
                              Expanded(
                                child: OutlinedButton.icon(
                                  onPressed: _unbindAnalysisData,
                                  icon: Icon(Icons.link_off, color: Colors.orange.shade600, size: 18),
                                  label: Text('Unbind', style: TextStyle(fontSize: 12)),
                                  style: OutlinedButton.styleFrom(
                                    foregroundColor: Colors.orange.shade600,
                                    side: BorderSide(color: Colors.grey.shade300),
                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                  ),
                                ),
                              ),
                            ],
                          ),
                          SizedBox(height: 6),
                          Row(
                            children: [
                              Expanded(
                                child: OutlinedButton.icon(
                                  onPressed: _saveAndNew,
                                  icon: Icon(Icons.save, color: Colors.orange.shade700, size: 18),
                                  label: Text('Save & New', style: TextStyle(fontSize: 12)),
                                  style: OutlinedButton.styleFrom(
                                    foregroundColor: Colors.orange.shade700,
                                    side: BorderSide(color: Colors.orange.shade700),
                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                  ),
                                ),
                              ),
                              SizedBox(width: 6),
                              Expanded(
                                child: ElevatedButton.icon(
                                  onPressed: _saveAnalysis,
                                  icon: Icon(Icons.save, color: Colors.white, size: 18),
                                  label: Text('Save', style: TextStyle(fontSize: 12)),
                                  style: ElevatedButton.styleFrom(
                                    backgroundColor: Colors.orange.shade700,
                                    foregroundColor: Colors.white,
                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ],
                      );
                    } else {
                      // Original horizontal layout for larger screens
                      return Row(
                        children: [
                          OutlinedButton.icon(
                            onPressed: _deleteAnalysis,
                            icon: Icon(Icons.delete, color: Colors.red.shade400, size: 20),
                            label: Text('Delete'),
                            style: OutlinedButton.styleFrom(
                              foregroundColor: Colors.red.shade400,
                              side: BorderSide(color: Colors.grey.shade300),
                            ),
                          ),
                          SizedBox(width: 8),
                          OutlinedButton.icon(
                            onPressed: _bindAnalysisData,
                            icon: Icon(Icons.link, color: Colors.blue.shade600, size: 20),
                            label: Text('Bind Analysis Data'),
                            style: OutlinedButton.styleFrom(
                              foregroundColor: Colors.blue.shade600,
                              side: BorderSide(color: Colors.grey.shade300),
                            ),
                          ),
                          SizedBox(width: 8),
                          OutlinedButton.icon(
                            onPressed: _unbindAnalysisData,
                            icon: Icon(Icons.link_off, color: Colors.orange.shade600, size: 20),
                            label: Text('Unbind Analysis Data'),
                            style: OutlinedButton.styleFrom(
                              foregroundColor: Colors.orange.shade600,
                              side: BorderSide(color: Colors.grey.shade300),
                            ),
                          ),
                          Spacer(),
                          OutlinedButton.icon(
                            onPressed: _saveAndNew,
                            icon: Icon(Icons.save, color: Colors.orange.shade700, size: 20),
                            label: Text('Save and New'),
                            style: OutlinedButton.styleFrom(
                              foregroundColor: Colors.orange.shade700,
                              side: BorderSide(color: Colors.orange.shade700),
                            ),
                          ),
                          SizedBox(width: 8),
                          ElevatedButton.icon(
                            onPressed: _saveAnalysis,
                            icon: Icon(Icons.save, color: Colors.white, size: 20),
                            label: Text('Save'),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.orange.shade700,
                              foregroundColor: Colors.white,
                            ),
                          ),
                        ],
                      );
                    }
                  },
                ),
              ),

              // Form content
              Expanded(
                child: SingleChildScrollView(
                  padding: EdgeInsets.all(12),
                  child: Form(
                    key: _formKey,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Analysis',
                          style: TextStyle(
                            fontSize: 24,
                            fontWeight: FontWeight.bold,
                            color: Colors.black87,
                          ),
                        ),
                        SizedBox(height: 20),

                        // Name field (required)
                        TextFormField(
                          controller: _controllers['name'],
                          decoration: InputDecoration(
                            labelText: 'Name*',
                            border: OutlineInputBorder(),
                            contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
                          ),
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Please enter a name';
                            }
                            return null;
                          },
                        ),
                        SizedBox(height: 16),

                        // Data Type dropdown
                        _buildDropdownField(
                          label: 'Data Type',
                          value: _selectedDataType,
                          items: [
                            'Application User',
                            'Area',
                            'Branch',
                            'Division',
                            'Issues Log',
                          ],
                          onChanged: (value) {
                            setState(() {
                              _selectedDataType = value ?? '';
                            });
                          },
                          isRequired: false,
                        ),
                        SizedBox(height: 16),

                        // Criteria field (multiline text area)
                        TextFormField(
                          controller: _controllers['criteria'],
                          decoration: InputDecoration(
                            labelText: 'Criteria',
                            border: OutlineInputBorder(),
                            contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 12),
                            alignLabelWithHint: true,
                          ),
                          maxLines: 6,
                          minLines: 4,
                          validator: (value) {
                            // Optional field, no validation required
                            return null;
                          },
                        ),
                        SizedBox(height: 32),
                      ],
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}


//Dashboards Page
class DashboardsPage extends StatefulWidget {
  @override
  _DashboardsPageState createState() => _DashboardsPageState();
}

class _DashboardsPageState extends State<DashboardsPage> {
  final ScrollController _horizontalScrollController = ScrollController();
  final TextEditingController _searchController = TextEditingController();

  // Column widths - can be adjusted
  Map<String, double> columnWidths = {
    'Checkbox': 60,
    'Title': 1400,
  };

  // Map column keys to data field names
  Map<String, String> columnToDataField = {
    'Title': 'title',
  };

  // Sorting state
  String _sortColumn = '';
  bool _sortAscending = true;

  // Pagination state
  int _currentPage = 1;
  int _pageSize = 20;
  final List<int> _pageSizeOptions = [10, 20, 50, 100];

  // Sample data structure
  List<Map<String, dynamic>> _dashboardsData = [
    {
      'selected': false,
      'title': 'Sales Dashboard',
    },
    {
      'selected': false,
      'title': 'Marketing Analytics',
    },
    {
      'selected': false,
      'title': 'Customer Insights',
    },
    {
      'selected': false,
      'title': 'Financial Overview',
    },
    {
      'selected': false,
      'title': 'Operations Dashboard',
    },
    {
      'selected': false,
      'title': 'HR Analytics',
    },
    {
      'selected': false,
      'title': 'Product Performance',
    },
    {
      'selected': false,
      'title': 'Executive Summary',
    },
  ];

  bool _selectAll = false;

  @override
  void dispose() {
    _horizontalScrollController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  List<Map<String, dynamic>> get _filteredData {
    var filtered = _dashboardsData;

    // Apply search filter
    if (_searchController.text.isNotEmpty) {
      filtered = filtered.where((dashboard) {
        return dashboard.values.any((value) =>
            value.toString().toLowerCase().contains(_searchController.text.toLowerCase()));
      }).toList();
    }

    // Apply sorting
    if (_sortColumn.isNotEmpty) {
      String dataField = columnToDataField[_sortColumn] ?? _sortColumn;
      filtered.sort((a, b) {
        var aValue = a[dataField] ?? '';
        var bValue = b[dataField] ?? '';

        int comparison = aValue.toString().compareTo(bValue.toString());
        return _sortAscending ? comparison : -comparison;
      });
    }

    return filtered;
  }

  List<Map<String, dynamic>> get _paginatedData {
    var filtered = _filteredData;
    int startIndex = (_currentPage - 1) * _pageSize;
    int endIndex = startIndex + _pageSize;

    if (startIndex >= filtered.length) return [];
    if (endIndex > filtered.length) endIndex = filtered.length;

    return filtered.sublist(startIndex, endIndex);
  }

  int get _totalPages {
    return (_filteredData.length / _pageSize).ceil();
  }

  void _refreshData() {
    setState(() {
      // Unselect all checkboxes
      for (var dashboard in _dashboardsData) {
        dashboard['selected'] = false;
      }
      _selectAll = false;
      // add actual data refresh logic here
    });
  }

  void _navigateToNewDashboardPage() {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => NewDashboardPage(),
      ),
    );
  }

  void _toggleSelectAll() {
    setState(() {
      _selectAll = !_selectAll;
      for (var dashboard in _paginatedData) {
        dashboard['selected'] = _selectAll;
      }
    });
  }

  void _deleteSelected() {
    setState(() {
      _dashboardsData.removeWhere((dashboard) => dashboard['selected'] == true);
      _selectAll = false;
      // Adjust current page if needed
      if (_currentPage > _totalPages && _totalPages > 0) {
        _currentPage = _totalPages;
      }
    });
  }

  void _exportData() {
    // Add export functionality here
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Export functionality would be implemented here')),
    );
  }

  void _showFilterDialog(String columnKey) {
    // Add filter dialog functionality here
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Filter ${columnKey}'),
        content: Text('Filter functionality would be implemented here'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Close'),
          ),
        ],
      ),
    );
  }

  void _sortData(String columnKey) {
    setState(() {
      if (_sortColumn == columnKey) {
        _sortAscending = !_sortAscending;
      } else {
        _sortColumn = columnKey;
        _sortAscending = true;
      }
    });
  }

  bool _hasSelectedItems() {
    return _dashboardsData.any((dashboard) => dashboard['selected'] == true);
  }

  Widget _buildResizableColumn({
    required String title,
    required String columnKey,
    required bool isLast,
    Widget? customContent,
  }) {
    return Container(
      width: columnWidths[columnKey],
      child: Row(
        children: [
          Expanded(
            child: Container(
              height: 40, // Fixed height for consistent checkbox alignment
              padding: EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.grey.shade200,
                border: Border(
                  right: BorderSide(color: Colors.grey.shade400),
                  bottom: BorderSide(color: Colors.grey.shade400),
                ),
              ),
              child: customContent ??
                  Row(
                    children: [
                      Expanded(
                        child: Text(
                          title,
                          style: TextStyle(fontWeight: FontWeight.bold, fontSize: 12),
                          overflow: TextOverflow.ellipsis,
                        ),
                      ),
                      if (columnKey == 'Title') ...[
                        GestureDetector(
                          onTap: () => _sortData(columnKey),
                          child: Icon(
                            _sortColumn == columnKey
                                ? (_sortAscending ? Icons.arrow_upward : Icons.arrow_downward)
                                : Icons.unfold_more,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                        ),
                        SizedBox(width: 4),
                      ],
                      if (columnKey != 'Checkbox')
                        GestureDetector(
                          onTap: () => _showFilterDialog(columnKey),
                          child: Icon(
                            Icons.filter_alt_outlined,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                        ),
                    ],
                  ),
            ),
          ),
          if (!isLast)
            GestureDetector(
              onPanUpdate: (details) {
                setState(() {
                  columnWidths[columnKey] =
                      (columnWidths[columnKey]! + details.delta.dx).clamp(60.0, 400.0);
                });
              },
              child: Container(
                width: 4,
                height: 40,
                color: Colors.grey.shade400,
                child: MouseRegion(
                  cursor: SystemMouseCursors.resizeColumn,
                  child: Container(),
                ),
              ),
            ),
        ],
      ),
    );
  }

  Widget _buildDataCell(dynamic data, String columnKey, {Widget? customContent}) {
    return Container(
      width: columnWidths[columnKey],
      height: 40, // Fixed height for consistent alignment
      padding: EdgeInsets.all(8),
      decoration: BoxDecoration(
        border: Border(
          right: BorderSide(color: Colors.grey.shade400),
          bottom: BorderSide(color: Colors.grey.shade400),
        ),
      ),
      child: Align(
        alignment: Alignment.centerLeft,
        child: customContent ??
            Text(
              data.toString(),
              style: TextStyle(fontSize: 12),
              overflow: TextOverflow.ellipsis,
            ),
      ),
    );
  }

  Widget _buildPaginationControls() {
    return Container(
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        border: Border(
          top: BorderSide(color: Colors.grey.shade300, width: 1),
        ),
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          // Page numbers
          Row(
            children: [
              for (int i = 1; i <= _totalPages && i <= 4; i++)
                GestureDetector(
                  onTap: () {
                    setState(() {
                      _currentPage = i;
                    });
                  },
                  child: Container(
                    margin: EdgeInsets.symmetric(horizontal: 4),
                    padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                    decoration: BoxDecoration(
                      color: _currentPage == i ? Colors.orange.shade700 : Colors.transparent,
                      borderRadius: BorderRadius.circular(4),
                    ),
                    child: Text(
                      i.toString(),
                      style: TextStyle(
                        color: _currentPage == i ? Colors.white : Colors.black,
                        fontWeight: _currentPage == i ? FontWeight.bold : FontWeight.normal,
                      ),
                    ),
                  ),
                ),
            ],
          ),
          // Page size selector
          Row(
            children: [
              Text('Page Size: ', style: TextStyle(fontSize: 14)),
              DropdownButton<int>(
                value: _pageSize,
                items: _pageSizeOptions.map((size) {
                  return DropdownMenuItem<int>(
                    value: size,
                    child: Text(size.toString()),
                  );
                }).toList(),
                onChanged: (value) {
                  setState(() {
                    _pageSize = value!;
                    _currentPage = 1; // Reset to first page
                  });
                },
              ),
            ],
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        color: Colors.grey.shade50,
        child: Column(
          children: [
            // Header with buttons and search
            Container(
              width: double.infinity, // Full width
              padding: EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.white,
                border: Border(
                  bottom: BorderSide(color: Colors.grey.shade300, width: 1),
                ),
              ),
              child: LayoutBuilder(
                builder: (context, constraints) {
                  final isSmallScreen = constraints.maxWidth < 600;
                  final buttonStyle = OutlinedButton.styleFrom(
                    padding: isSmallScreen
                        ? EdgeInsets.symmetric(horizontal: 6, vertical: 4)
                        : EdgeInsets.symmetric(horizontal: 8, vertical: 6),
                    textStyle: TextStyle(
                      fontSize: isSmallScreen ? 12 : 14,
                    ),
                    minimumSize: Size(0, isSmallScreen ? 30 : 36),
                    side: BorderSide(color: Colors.grey.shade300),
                  );

                  return SingleChildScrollView(
                    scrollDirection: Axis.horizontal,
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.start, // Left-aligned content
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        // New Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _navigateToNewDashboardPage,
                            icon: Icon(Icons.dashboard_customize, color: Colors.green.shade700, size: 20),
                            padding: EdgeInsets.all(4),
                            tooltip: 'New',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _navigateToNewDashboardPage,
                            icon: Icon(Icons.dashboard_customize, color: Colors.green.shade700, size: 20),
                            label: Text('New'),
                            style: buttonStyle.copyWith(
                              backgroundColor: MaterialStateProperty.all(Colors.white),
                              foregroundColor: MaterialStateProperty.all(Colors.black),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Delete Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _hasSelectedItems() ? _deleteSelected : null,
                            icon: Icon(Icons.delete,
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                                size: 20
                            ),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Delete',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _hasSelectedItems() ? _deleteSelected : null,
                            icon: Icon(Icons.delete,
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                                size: 20
                            ),
                            label: Text(
                              'Delete',
                              style: TextStyle(
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                              ),
                            ),
                            style: buttonStyle.copyWith(
                              foregroundColor: MaterialStateProperty.all(
                                _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                              ),
                              side: MaterialStateProperty.all(
                                BorderSide(color: Colors.grey.shade300),
                              ),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Search Field
                        Container(
                          width: isSmallScreen ? 180 : 300,
                          child: TextField(
                            controller: _searchController,
                            onChanged: (value) {
                              setState(() {
                                _currentPage = 1;
                              });
                            },
                            decoration: InputDecoration(
                              isDense: true,
                              hintText: 'Search...',
                              suffixIcon: Icon(Icons.search, color: Colors.orange.shade700),
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(4),
                              ),
                              contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                            ),
                          ),
                        ),

                        SizedBox(width: 12),

                        // Export Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _exportData,
                            icon: Icon(Icons.download, color: Colors.orange.shade700, size: 20),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Export',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _exportData,
                            icon: Icon(Icons.download, color: Colors.orange.shade700, size: 20),
                            label: Text('Export'),
                            style: buttonStyle.copyWith(
                              backgroundColor: MaterialStateProperty.all(Colors.white),
                              foregroundColor: MaterialStateProperty.all(Colors.black),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Refresh Button
                        IconButton(
                          onPressed: _refreshData,
                          icon: Icon(Icons.refresh, color: Colors.orange.shade700, size: 20),
                          padding: EdgeInsets.all(4),
                          tooltip: 'Refresh',
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),

            // Table area
            Expanded(
              child: Container(
                margin: EdgeInsets.all(16),
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.grey.shade300),
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(4),
                ),
                child: Column(
                  children: [
                    // Table with synchronized scrolling
                    Expanded(
                      child: _paginatedData.isEmpty
                          ? Center(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(
                              Icons.dashboard,
                              size: 64,
                              color: Colors.grey.shade400,
                            ),
                            SizedBox(height: 16),
                            Text(
                              'No data to display',
                              style: TextStyle(
                                fontSize: 18,
                                color: Colors.grey.shade600,
                              ),
                            ),
                            SizedBox(height: 8),
                            Text(
                              'Click "New" to add your first dashboard',
                              style: TextStyle(
                                fontSize: 14,
                                color: Colors.grey.shade500,
                              ),
                            ),
                          ],
                        ),
                      )
                          : SingleChildScrollView(
                        controller: _horizontalScrollController,
                        scrollDirection: Axis.horizontal,
                        child: Column(
                          children: [
                            // Table header
                            Row(
                              children: [
                                _buildResizableColumn(
                                  title: '',
                                  columnKey: 'Checkbox',
                                  isLast: false,
                                  customContent: Center(
                                    child: Checkbox(
                                      value: _selectAll,
                                      onChanged: (value) => _toggleSelectAll(),
                                    ),
                                  ),
                                ),
                                _buildResizableColumn(
                                  title: 'Title',
                                  columnKey: 'Title',
                                  isLast: true,
                                ),
                              ],
                            ),

                            // Table body
                            Expanded(
                              child: SingleChildScrollView(
                                child: Column(
                                  children: _paginatedData.map((dashboard) {
                                    return Row(
                                      children: [
                                        _buildDataCell(
                                          '',
                                          'Checkbox',
                                          customContent: Center(
                                            child: Checkbox(
                                              value: dashboard['selected'],
                                              onChanged: (value) {
                                                setState(() {
                                                  dashboard['selected'] = value;
                                                });
                                              },
                                            ),
                                          ),
                                        ),
                                        _buildDataCell(dashboard['title'] ?? '', 'Title'),
                                      ],
                                    );
                                  }).toList(),
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                    // Pagination controls
                    if (_totalPages > 0) _buildPaginationControls(),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// New Dashboard Page
class NewDashboardPage extends StatelessWidget {
  const NewDashboardPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Dashboard'),
      ),
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              // Action buttons section (replaces the mode selection row)
              _buildActionButtonsSection(context),
              const SizedBox(height: 30),

              // Dashboard title
              const Center(
                child: Text(
                  'Dashboard',
                  style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
                ),
              ),
              const SizedBox(height: 30),

              // Instruction text
              const Padding(
                padding: EdgeInsets.symmetric(horizontal: 20.0),
                child: Text(
                  'Drag an item from the Toolbox or click a button below to create a new item.',
                  textAlign: TextAlign.center,
                  style: TextStyle(fontSize: 16, color: Colors.grey),
                ),
              ),
              const SizedBox(height: 40),

              // Content buttons grid
              _buildContentButtonsGrid(),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildActionButtonsSection(BuildContext context) {
    return LayoutBuilder(
      builder: (context, constraints) {
        // Stack vertically on small screens, side by side on larger screens
        if (constraints.maxWidth < 600) {
          return Column(
            children: [
              _buildActionButton('Switch to View Mode', Icons.visibility, onPressed: () {}),
              const SizedBox(height: 10),
              _buildActionButton('Export to MML', Icons.import_export, onPressed: null), // Disabled
            ],
          );
        } else {
          return Row(
            children: [
              Expanded(child: _buildActionButton('Switch to View Mode', Icons.visibility, onPressed: () {})),
              const SizedBox(width: 10),
              Expanded(child: _buildActionButton('Export to MML', Icons.import_export, onPressed: null)), // Disabled
            ],
          );
        }
      },
    );
  }

  Widget _buildActionButton(String text, IconData icon, {VoidCallback? onPressed}) {
    return ElevatedButton.icon(
      icon: Icon(icon),
      label: Text(text),
      onPressed: onPressed,
      style: ElevatedButton.styleFrom(
        foregroundColor: onPressed == null ? Colors.grey : null,
        backgroundColor: onPressed == null ? Colors.grey.withOpacity(0.2) : null,
        padding: const EdgeInsets.symmetric(vertical: 16),
        minimumSize: const Size.fromHeight(50),
      ),
    );
  }

  Widget _buildContentButtonsGrid() {
    // Example items - you would replace with your actual items
    const List<Map<String, dynamic>> items = [
      {'icon': Icons.insert_chart, 'label': 'Chart'},
      {'icon': Icons.table_chart, 'label': 'Table'},
      {'icon': Icons.map, 'label': 'Map'},
      {'icon': Icons.show_chart, 'label': 'Graph'},
      {'icon': Icons.pie_chart, 'label': 'Pie Chart'},
      {'icon': Icons.add, 'label': 'New Item'},
    ];

    return GridView.builder(
      shrinkWrap: true,
      physics: const NeverScrollableScrollPhysics(),
      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: 3,
        crossAxisSpacing: 15,
        mainAxisSpacing: 15,
        childAspectRatio: 1.2,
      ),
      itemCount: items.length,
      itemBuilder: (context, index) {
        return Card(
          elevation: 3,
          child: InkWell(
            borderRadius: BorderRadius.circular(8),
            onTap: () {
              // Handle item tap
            },
            child: Padding(
              padding: const EdgeInsets.all(12.0),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(items[index]['icon'], size: 40),
                  const SizedBox(height: 8),
                  Text(items[index]['label']),
                ],
              ),
            ),
          ),
        );
      },
    );
  }
}

//Reports Page
class ReportsPage extends StatefulWidget {
  @override
  _ReportsPageState createState() => _ReportsPageState();
}

class _ReportsPageState extends State<ReportsPage> {
  final ScrollController _horizontalScrollController = ScrollController();
  final TextEditingController _searchController = TextEditingController();

  // Column widths - can be adjusted
  Map<String, double> columnWidths = {
    'Checkbox': 60,
    'DisplayName': 600,
    'DataType': 400,
  };

  // Map column keys to data field names
  Map<String, String> columnToDataField = {
    'DisplayName': 'displayName',
    'DataType': 'dataType',
  };

  // Sorting state
  String _sortColumn = '';
  bool _sortAscending = true;

  // Pagination state
  int _currentPage = 1;
  int _pageSize = 20;
  final List<int> _pageSizeOptions = [10, 20, 50, 100];

  // Sample data structure
  List<Map<String, dynamic>> _reportsData = [
    {
      'selected': false,
      'displayName': 'Technology Branch Project Report',
      'dataType': 'Project Planning',
    },
    {
      'selected': false,
      'displayName': 'Financial Summary Report',
      'dataType': 'Financial',
    },
    {
      'selected': false,
      'displayName': 'Customer Analytics Report',
      'dataType': 'Analytics',
    },
    {
      'selected': false,
      'displayName': 'Sales Performance Report',
      'dataType': 'Sales',
    },
    {
      'selected': false,
      'displayName': 'Inventory Management Report',
      'dataType': 'Operations',
    },
    {
      'selected': false,
      'displayName': 'HR Monthly Report',
      'dataType': 'Human Resources',
    },
    {
      'selected': false,
      'displayName': 'Marketing Campaign Report',
      'dataType': 'Marketing',
    },
    {
      'selected': false,
      'displayName': 'Quality Assurance Report',
      'dataType': 'Quality Control',
    },
  ];

  bool _selectAll = false;

  @override
  void dispose() {
    _horizontalScrollController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  List<Map<String, dynamic>> get _filteredData {
    var filtered = _reportsData;

    // Apply search filter
    if (_searchController.text.isNotEmpty) {
      filtered = filtered.where((report) {
        return report.values.any((value) =>
            value.toString().toLowerCase().contains(_searchController.text.toLowerCase()));
      }).toList();
    }

    // Apply sorting
    if (_sortColumn.isNotEmpty) {
      String dataField = columnToDataField[_sortColumn] ?? _sortColumn;
      filtered.sort((a, b) {
        var aValue = a[dataField] ?? '';
        var bValue = b[dataField] ?? '';

        int comparison = aValue.toString().compareTo(bValue.toString());
        return _sortAscending ? comparison : -comparison;
      });
    }

    return filtered;
  }

  List<Map<String, dynamic>> get _paginatedData {
    var filtered = _filteredData;
    int startIndex = (_currentPage - 1) * _pageSize;
    int endIndex = startIndex + _pageSize;

    if (startIndex >= filtered.length) return [];
    if (endIndex > filtered.length) endIndex = filtered.length;

    return filtered.sublist(startIndex, endIndex);
  }

  int get _totalPages {
    return (_filteredData.length / _pageSize).ceil();
  }

  void _refreshData() {
    setState(() {
      // Unselect all checkboxes
      for (var report in _reportsData) {
        report['selected'] = false;
      }
      _selectAll = false;
      // add actual data refresh logic here
    });
  }

  void _navigateToNewReportPage() async {
    final result = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => NewReportPage(),
      ),
    );

    if (result != null) {
      setState(() {
        _reportsData.add({
          'selected': false,
          'displayName': result['displayName'],
          'dataType': result['dataType'],
        });
      });
    }
  }

  void _toggleSelectAll() {
    setState(() {
      _selectAll = !_selectAll;
      for (var report in _paginatedData) {
        report['selected'] = _selectAll;
      }
    });
  }

  void _deleteSelected() {
    setState(() {
      _reportsData.removeWhere((report) => report['selected'] == true);
      _selectAll = false;
      // Adjust current page if needed
      if (_currentPage > _totalPages && _totalPages > 0) {
        _currentPage = _totalPages;
      }
    });
  }

  void _editSelected() {
    // Add edit functionality here
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Edit functionality would be implemented here')),
    );
  }

  void _copyPredefinedReport() {
    // Add copy predefined report functionality here
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Copy Predefined Report functionality would be implemented here')),
    );
  }

  void _executeReport() {
    // Add execute report functionality here
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Execute Report functionality would be implemented here')),
    );
  }

  void _showReportDesigner() {
    // Add show report designer functionality here
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Show Report Designer functionality would be implemented here')),
    );
  }

  void _showFilterDialog(String columnKey) {
    // Add filter dialog functionality here
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Filter ${columnKey}'),
        content: Text('Filter functionality would be implemented here'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Close'),
          ),
        ],
      ),
    );
  }

  void _sortData(String columnKey) {
    setState(() {
      if (_sortColumn == columnKey) {
        _sortAscending = !_sortAscending;
      } else {
        _sortColumn = columnKey;
        _sortAscending = true;
      }
    });
  }

  bool _hasSelectedItems() {
    return _reportsData.any((report) => report['selected'] == true);
  }

  Widget _buildResizableColumn({
    required String title,
    required String columnKey,
    required bool isLast,
    Widget? customContent,
  }) {
    return Container(
      width: columnWidths[columnKey],
      child: Row(
        children: [
          Expanded(
            child: Container(
              height: 40, // Fixed height for consistent checkbox alignment
              padding: EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.grey.shade200,
                border: Border(
                  right: BorderSide(color: Colors.grey.shade400),
                  bottom: BorderSide(color: Colors.grey.shade400),
                ),
              ),
              child: customContent ??
                  Row(
                    children: [
                      Expanded(
                        child: Text(
                          title,
                          style: TextStyle(fontWeight: FontWeight.bold, fontSize: 12),
                          overflow: TextOverflow.ellipsis,
                        ),
                      ),
                      if (columnKey == 'DisplayName' || columnKey == 'DataType') ...[
                        GestureDetector(
                          onTap: () => _sortData(columnKey),
                          child: Icon(
                            _sortColumn == columnKey
                                ? (_sortAscending ? Icons.arrow_upward : Icons.arrow_downward)
                                : Icons.unfold_more,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                        ),
                        SizedBox(width: 4),
                      ],
                      if (columnKey != 'Checkbox')
                        GestureDetector(
                          onTap: () => _showFilterDialog(columnKey),
                          child: Icon(
                            Icons.filter_alt_outlined,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                        ),
                    ],
                  ),
            ),
          ),
          if (!isLast)
            GestureDetector(
              onPanUpdate: (details) {
                setState(() {
                  columnWidths[columnKey] =
                      (columnWidths[columnKey]! + details.delta.dx).clamp(60.0, 600.0);
                });
              },
              child: Container(
                width: 4,
                height: 40,
                color: Colors.grey.shade400,
                child: MouseRegion(
                  cursor: SystemMouseCursors.resizeColumn,
                  child: Container(),
                ),
              ),
            ),
        ],
      ),
    );
  }

  Widget _buildDataCell(dynamic data, String columnKey, {Widget? customContent}) {
    return Container(
      width: columnWidths[columnKey],
      height: 40, // Fixed height for consistent alignment
      padding: EdgeInsets.all(8),
      decoration: BoxDecoration(
        border: Border(
          right: BorderSide(color: Colors.grey.shade400),
          bottom: BorderSide(color: Colors.grey.shade400),
        ),
      ),
      child: Align(
        alignment: Alignment.centerLeft,
        child: customContent ??
            Text(
              data.toString(),
              style: TextStyle(fontSize: 12),
              overflow: TextOverflow.ellipsis,
            ),
      ),
    );
  }

  Widget _buildPaginationControls() {
    return Container(
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        border: Border(
          top: BorderSide(color: Colors.grey.shade300, width: 1),
        ),
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          // Page numbers
          Row(
            children: [
              for (int i = 1; i <= _totalPages && i <= 4; i++)
                GestureDetector(
                  onTap: () {
                    setState(() {
                      _currentPage = i;
                    });
                  },
                  child: Container(
                    margin: EdgeInsets.symmetric(horizontal: 4),
                    padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                    decoration: BoxDecoration(
                      color: _currentPage == i ? Colors.orange.shade700 : Colors.transparent,
                      borderRadius: BorderRadius.circular(4),
                    ),
                    child: Text(
                      i.toString(),
                      style: TextStyle(
                        color: _currentPage == i ? Colors.white : Colors.black,
                        fontWeight: _currentPage == i ? FontWeight.bold : FontWeight.normal,
                      ),
                    ),
                  ),
                ),
            ],
          ),
          // Page size selector
          Row(
            children: [
              Text('Page Size: ', style: TextStyle(fontSize: 14)),
              DropdownButton<int>(
                value: _pageSize,
                items: _pageSizeOptions.map((size) {
                  return DropdownMenuItem<int>(
                    value: size,
                    child: Text(size.toString()),
                  );
                }).toList(),
                onChanged: (value) {
                  setState(() {
                    _pageSize = value!;
                    _currentPage = 1; // Reset to first page
                  });
                },
              ),
            ],
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        color: Colors.grey.shade50,
        child: Column(
          children: [
            // Header with buttons and search
            Container(
              width: double.infinity, // Full width
              padding: EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.white,
                border: Border(
                  bottom: BorderSide(color: Colors.grey.shade300, width: 1),
                ),
              ),
              child: LayoutBuilder(
                builder: (context, constraints) {
                  final isSmallScreen = constraints.maxWidth < 600;
                  final buttonStyle = OutlinedButton.styleFrom(
                    padding: isSmallScreen
                        ? EdgeInsets.symmetric(horizontal: 6, vertical: 4)
                        : EdgeInsets.symmetric(horizontal: 8, vertical: 6),
                    textStyle: TextStyle(
                      fontSize: isSmallScreen ? 12 : 14,
                    ),
                    minimumSize: Size(0, isSmallScreen ? 30 : 36),
                    side: BorderSide(color: Colors.grey.shade300),
                  );

                  return SingleChildScrollView(
                    scrollDirection: Axis.horizontal,
                    child: Row(
                      children: [
                        // New Report Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _navigateToNewReportPage,
                            icon: Icon(Icons.add, color: Colors.orange.shade700, size: 20),
                            padding: EdgeInsets.all(4),
                            tooltip: 'New Report',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _navigateToNewReportPage,
                            icon: Icon(Icons.add, color: Colors.orange.shade700, size: 20),
                            label: Text('New'),
                            style: buttonStyle.copyWith(
                              backgroundColor: MaterialStateProperty.all(Colors.white),
                              foregroundColor: MaterialStateProperty.all(Colors.black),
                            ),
                          ),

                        SizedBox(width: isSmallScreen ? 8 : 12),

                        // Delete Button (with disabled state)
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _hasSelectedItems() ? _deleteSelected : null,
                            icon: Icon(Icons.delete,
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                                size: 20
                            ),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Delete',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _hasSelectedItems() ? _deleteSelected : null,
                            icon: Icon(Icons.delete,
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                                size: 20
                            ),
                            label: Text('Delete'),
                            style: buttonStyle.copyWith(
                              foregroundColor: MaterialStateProperty.all(
                                _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                              ),
                            ),
                          ),

                        SizedBox(width: isSmallScreen ? 8 : 12),

                        // Edit Button (with disabled state)
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _hasSelectedItems() ? _editSelected : null,
                            icon: Icon(Icons.edit,
                                color: _hasSelectedItems() ? Colors.orange.shade700 : Colors.grey.shade400,
                                size: 20
                            ),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Edit',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _hasSelectedItems() ? _editSelected : null,
                            icon: Icon(Icons.edit,
                                color: _hasSelectedItems() ? Colors.orange.shade700 : Colors.grey.shade400,
                                size: 20
                            ),
                            label: Text('Edit'),
                            style: buttonStyle.copyWith(
                              foregroundColor: MaterialStateProperty.all(
                                _hasSelectedItems() ? Colors.black : Colors.grey.shade400,
                              ),
                            ),
                          ),

                        SizedBox(width: isSmallScreen ? 8 : 12),

                        // Copy Predefined Report
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _copyPredefinedReport,
                            icon: Icon(Icons.copy, color: Colors.blue.shade600, size: 20),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Copy Report',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _copyPredefinedReport,
                            icon: Icon(Icons.copy, color: Colors.blue.shade600, size: 20),
                            label: Text(isSmallScreen ? 'Copy' : 'Copy Predefined Report'),
                            style: buttonStyle.copyWith(
                              foregroundColor: MaterialStateProperty.all(Colors.black),
                            ),
                          ),

                        SizedBox(width: isSmallScreen ? 8 : 12),

                        // Execute Report (with disabled state)
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _hasSelectedItems() ? _executeReport : null,
                            icon: Icon(Icons.play_arrow,
                                color: _hasSelectedItems() ? Colors.green.shade600 : Colors.grey.shade400,
                                size: 20
                            ),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Execute',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _hasSelectedItems() ? _executeReport : null,
                            icon: Icon(Icons.play_arrow,
                                color: _hasSelectedItems() ? Colors.green.shade600 : Colors.grey.shade400,
                                size: 20
                            ),
                            label: Text(isSmallScreen ? 'Run' : 'Execute Report'),
                            style: buttonStyle.copyWith(
                              foregroundColor: MaterialStateProperty.all(
                                _hasSelectedItems() ? Colors.black : Colors.grey.shade400,
                              ),
                            ),
                          ),

                        SizedBox(width: isSmallScreen ? 8 : 12),

                        // Show Report Designer (with disabled state)
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _hasSelectedItems() ? _showReportDesigner : null,
                            icon: Icon(Icons.design_services,
                                color: _hasSelectedItems() ? Colors.purple.shade600 : Colors.grey.shade400,
                                size: 20
                            ),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Designer',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _hasSelectedItems() ? _showReportDesigner : null,
                            icon: Icon(Icons.design_services,
                                color: _hasSelectedItems() ? Colors.purple.shade600 : Colors.grey.shade400,
                                size: 20
                            ),
                            label: Text(isSmallScreen ? 'Design' : 'Show Report Designer'),
                            style: buttonStyle.copyWith(
                              foregroundColor: MaterialStateProperty.all(
                                _hasSelectedItems() ? Colors.black : Colors.grey.shade400,
                              ),
                            ),
                          ),

                        SizedBox(width: isSmallScreen ? 8 : 12),

                        // Search Field
                        Container(
                          width: isSmallScreen ? 180 : 300,
                          child: TextField(
                            controller: _searchController,
                            onChanged: (value) {
                              setState(() {
                                _currentPage = 1;
                              });
                            },
                            decoration: InputDecoration(
                              isDense: true,
                              hintText: 'Search...',
                              suffixIcon: Icon(Icons.search, color: Colors.orange.shade700),
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(4),
                              ),
                              contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                            ),
                          ),
                        ),

                        SizedBox(width: isSmallScreen ? 8 : 12),

                        // Refresh Button
                        IconButton(
                          onPressed: _refreshData,
                          icon: Icon(Icons.refresh, color: Colors.orange.shade700, size: 20),
                          padding: EdgeInsets.all(4),
                          tooltip: 'Refresh',
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),

            // Table area
            Expanded(
              child: Container(
                margin: EdgeInsets.all(16),
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.grey.shade300),
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(4),
                ),
                child: Column(
                  children: [
                    // Table with synchronized scrolling
                    Expanded(
                      child: _paginatedData.isEmpty
                          ? Center(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(
                              Icons.article,
                              size: 64,
                              color: Colors.grey.shade400,
                            ),
                            SizedBox(height: 16),
                            Text(
                              'No reports found',
                              style: TextStyle(
                                fontSize: 18,
                                color: Colors.grey.shade600,
                              ),
                            ),
                            SizedBox(height: 8),
                            Text(
                              'Click "New" to create your first report',
                              style: TextStyle(
                                fontSize: 14,
                                color: Colors.grey.shade500,
                              ),
                            ),
                          ],
                        ),
                      )
                          : SingleChildScrollView(
                        controller: _horizontalScrollController,
                        scrollDirection: Axis.horizontal,
                        child: Column(
                          children: [
                            // Table header
                            Row(
                              children: [
                                _buildResizableColumn(
                                  title: '',
                                  columnKey: 'Checkbox',
                                  isLast: false,
                                  customContent: Center(
                                    child: Checkbox(
                                      value: _selectAll,
                                      onChanged: (value) => _toggleSelectAll(),
                                    ),
                                  ),
                                ),
                                _buildResizableColumn(
                                  title: 'Display Name',
                                  columnKey: 'DisplayName',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Data Type',
                                  columnKey: 'DataType',
                                  isLast: true,
                                ),
                              ],
                            ),

                            // Table body
                            Expanded(
                              child: SingleChildScrollView(
                                child: Column(
                                  children: _paginatedData.map((report) {
                                    return Row(
                                      children: [
                                        _buildDataCell(
                                          '',
                                          'Checkbox',
                                          customContent: Center(
                                            child: Checkbox(
                                              value: report['selected'],
                                              onChanged: (value) {
                                                setState(() {
                                                  report['selected'] = value;
                                                });
                                              },
                                            ),
                                          ),
                                        ),
                                        _buildDataCell(report['displayName'] ?? '', 'DisplayName'),
                                        _buildDataCell(report['dataType'] ?? '', 'DataType'),
                                      ],
                                    );
                                  }).toList(),
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                    // Pagination controls
                    if (_totalPages > 0) _buildPaginationControls(),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// New Report Page
class NewReportPage extends StatefulWidget {
  const NewReportPage({Key? key}) : super(key: key);

  @override
  State<NewReportPage> createState() => _NewReportPageState();
}

class _NewReportPageState extends State<NewReportPage> {
  final _formKey = GlobalKey<FormState>();
  final _displayNameController = TextEditingController();

  String _selectedReportType = 'Standard';
  String? _selectedDataType;

  final List<String> _reportTypeOptions = [
    'Standard',
    'Label'
  ];

  final List<String> _dataTypeOptions = [
    'Application User',
    'Area',
    'Branch',
    'Division',
    'Issues Log'
  ];

  @override
  void dispose() {
    _displayNameController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Dialog(
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
      child: Container(
        width: MediaQuery.of(context).size.width * 0.85,
        height: MediaQuery.of(context).size.height * 0.65,
        constraints: const BoxConstraints(
          maxWidth: 500,
          maxHeight: 400,
          minHeight: 350,
        ),
        child: Column(
          children: [
            // Header
            Container(
              padding: const EdgeInsets.all(16),
              decoration: const BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.only(
                  topLeft: Radius.circular(8),
                  topRight: Radius.circular(8),
                ),
              ),
              child: Row(
                children: [
                  const Text(
                    'New Report Wizard Parameters',
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                  const Spacer(),
                  IconButton(
                    onPressed: () => Navigator.of(context).pop(),
                    icon: const Icon(Icons.close, size: 20),
                    padding: EdgeInsets.zero,
                    constraints: const BoxConstraints(),
                  ),
                ],
              ),
            ),

            const Divider(height: 1),

            // Form Content
            Expanded(
              child: SingleChildScrollView(
                padding: const EdgeInsets.all(24),
                child: Form(
                  key: _formKey,
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // Report Type
                      const Text(
                        'Report Type',
                        style: TextStyle(
                          fontSize: 14,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                      const SizedBox(height: 8),
                      DropdownButtonFormField<String>(
                        value: _selectedReportType,
                        decoration: const InputDecoration(
                          border: OutlineInputBorder(),
                          contentPadding: EdgeInsets.symmetric(
                            horizontal: 12,
                            vertical: 8,
                          ),
                        ),
                        items: _reportTypeOptions.map((String value) {
                          return DropdownMenuItem<String>(
                            value: value,
                            child: Text(value),
                          );
                        }).toList(),
                        onChanged: (String? newValue) {
                          setState(() {
                            _selectedReportType = newValue!;
                          });
                        },
                        validator: (value) {
                          if (value == null || value.isEmpty) {
                            return 'Report Type is required';
                          }
                          return null;
                        },
                      ),

                      const SizedBox(height: 24),

                      // Display Name
                      const Text(
                        'Display Name',
                        style: TextStyle(
                          fontSize: 14,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                      const SizedBox(height: 8),
                      TextFormField(
                        controller: _displayNameController,
                        decoration: const InputDecoration(
                          border: OutlineInputBorder(),
                          contentPadding: EdgeInsets.symmetric(
                            horizontal: 12,
                            vertical: 8,
                          ),
                          hintText: 'Enter report display name',
                        ),
                        validator: (value) {
                          if (value == null || value.isEmpty) {
                            return 'Display Name is required';
                          }
                          return null;
                        },
                      ),

                      const SizedBox(height: 24),

                      // Data Type
                      const Text(
                        'Data Type',
                        style: TextStyle(
                          fontSize: 14,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                      const SizedBox(height: 8),
                      DropdownButtonFormField<String>(
                        value: _selectedDataType,
                        decoration: const InputDecoration(
                          border: OutlineInputBorder(),
                          contentPadding: EdgeInsets.symmetric(
                            horizontal: 12,
                            vertical: 8,
                          ),
                          hintText: 'Select data type',
                        ),
                        items: _dataTypeOptions.map((String value) {
                          return DropdownMenuItem<String>(
                            value: value,
                            child: Text(
                              value,
                              overflow: TextOverflow.ellipsis,
                            ),
                          );
                        }).toList(),
                        onChanged: (String? newValue) {
                          setState(() {
                            _selectedDataType = newValue;
                          });
                        },
                        validator: (value) {
                          if (value == null || value.isEmpty) {
                            return 'Data Type is required';
                          }
                          return null;
                        },
                        isExpanded: true,
                        menuMaxHeight: 200, // Limit dropdown height for small screens
                      ),

                      const SizedBox(height: 32),
                    ],
                  ),
                ),
              ),
            ),

            // Footer Buttons
            Container(
              padding: const EdgeInsets.all(16),
              decoration: const BoxDecoration(
                border: Border(top: BorderSide(color: Colors.grey, width: 0.5)),
              ),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.end,
                children: [
                  TextButton(
                    onPressed: () => Navigator.of(context).pop(),
                    style: TextButton.styleFrom(
                      padding: const EdgeInsets.symmetric(
                        horizontal: 20,
                        vertical: 10,
                      ),
                    ),
                    child: const Text(
                      'Close',
                      style: TextStyle(fontSize: 14),
                    ),
                  ),
                  const SizedBox(width: 12),
                  ElevatedButton(
                    onPressed: () {
                      if (_formKey.currentState!.validate()) {
                        // TODO: Implement create report functionality
                        _createReport();
                      }
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.blue,
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(
                        horizontal: 20,
                        vertical: 10,
                      ),
                    ),
                    child: const Text(
                      'Create',
                      style: TextStyle(fontSize: 14),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _createReport() {
    if (_formKey.currentState!.validate()) {
      // Prepare the data to return
      Map<String, dynamic> formData = {
        'displayName': _displayNameController.text,
        'dataType': _selectedDataType,
        'reportType': _selectedReportType,
      };

      Navigator.of(context).pop(formData);
    }
  }
}

// Extension method to show the dialog
extension ShowNewReportPage on BuildContext {
  Future<Map<String, dynamic>?> showNewReportPage() {
    return showDialog<Map<String, dynamic>>(
      context: this,
      builder: (context) => const NewReportPage(),
    );
  }
}

// Alternative simplified version for basic usage
class SimpleNewReportDialog extends StatelessWidget {
  final Function(Map<String, dynamic>)? onReportCreated;

  const SimpleNewReportDialog({
    Key? key,
    this.onReportCreated,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return const NewReportPage();
  }
}


// Users Page
class UsersPage extends StatefulWidget {
  @override
  _UsersPageState createState() => _UsersPageState();
}

class _UsersPageState extends State<UsersPage> {
  final ScrollController _horizontalScrollController = ScrollController();
  final TextEditingController _searchController = TextEditingController();

  // Column widths - can be adjusted
  Map<String, double> columnWidths = {
    'Checkbox': 60,
    'User Name': 150,
    'Firstname': 120,
    'Lastname': 120,
    'Full Name': 180,
    'Email': 200,
    'Division': 200,
    'Unit': 150,
  };

  // Map column keys to data field names
  Map<String, String> columnToDataField = {
    'User Name': 'username',
    'Firstname': 'firstname',
    'Lastname': 'lastname',
    'Full Name': 'fullname',
    'Email': 'email',
    'Division': 'division',
    'Unit': 'unit',
  };

  // Sorting state
  String _sortColumn = '';
  bool _sortAscending = true;

  // Pagination state
  int _currentPage = 1;
  int _pageSize = 20;
  final List<int> _pageSizeOptions = [10, 20, 50, 100];

  // Sample data structure - now includes unique IDs
  List<Map<String, dynamic>> _usersData = [
    {
      'id': '1',
      'selected': false,
      'username': 'admin',
      'firstname': 'Information and',
      'lastname': 'Communications Technology',
      'fullname': 'Information and Communications Technology',
      'email': 'ictd@jcf.gov.jm',
      'division': 'Information and Communications Technology',
      'unit': 'Systems Maintenance and Development',
      'isActive': true,
      'forcePasswordChange': false,
    },
  ];

  bool _selectAll = false;

  @override
  void dispose() {
    _horizontalScrollController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  List<Map<String, dynamic>> get _filteredData {
    var filtered = _usersData;

    // Apply search filter
    if (_searchController.text.isNotEmpty) {
      filtered = filtered.where((user) {
        return user.values.any((value) =>
            value.toString().toLowerCase().contains(_searchController.text.toLowerCase()));
      }).toList();
    }

    // Apply sorting
    if (_sortColumn.isNotEmpty) {
      String dataField = columnToDataField[_sortColumn] ?? _sortColumn;
      filtered.sort((a, b) {
        var aValue = a[dataField] ?? '';
        var bValue = b[dataField] ?? '';

        int comparison = aValue.toString().compareTo(bValue.toString());
        return _sortAscending ? comparison : -comparison;
      });
    }

    return filtered;
  }

  List<Map<String, dynamic>> get _paginatedData {
    var filtered = _filteredData;
    int startIndex = (_currentPage - 1) * _pageSize;
    int endIndex = startIndex + _pageSize;

    if (startIndex >= filtered.length) return [];
    if (endIndex > filtered.length) endIndex = filtered.length;

    return filtered.sublist(startIndex, endIndex);
  }

  int get _totalPages {
    return (_filteredData.length / _pageSize).ceil();
  }

  void _refreshData() {
    setState(() {
      // Unselect all checkboxes
      for (var user in _usersData) {
        user['selected'] = false;
      }
      _selectAll = false;
      // add actual data refresh logic here
    });
  }

  void _navigateToNewUserPage() {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => NewUserPage(
          onUserSaved: _handleUserSaved,
          isNewUser: true,
        ),
      ),
    );
  }

  void _navigateToEditUserPage(Map<String, dynamic> user) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => NewUserPage(
          existingUser: user,
          onUserSaved: _handleUserSaved,
          isNewUser: false,
        ),
      ),
    );
  }

  // Enhanced method to handle user data saving with proper ID management
  void _handleUserSaved(Map<String, dynamic> userData) {
    setState(() {
      // Add unique ID if not present (for new users)
      if (!userData.containsKey('id') || userData['id'] == null || userData['id'].toString().isEmpty) {
        userData['id'] = DateTime.now().millisecondsSinceEpoch.toString();
      }

      // Ensure the user has a 'selected' field for checkbox functionality
      if (!userData.containsKey('selected')) {
        userData['selected'] = false;
      }

      // Check if this is an update (user already exists) or new user
      // First try to find by ID, then by username as fallback
      int existingIndex = _usersData.indexWhere((user) =>
      (user.containsKey('id') && userData.containsKey('id') && user['id'] == userData['id']) ||
          (user['username'] == userData['username'])
      );

      if (existingIndex >= 0) {
        // Update existing user - preserve the selection state
        bool wasSelected = _usersData[existingIndex]['selected'] ?? false;
        userData['selected'] = wasSelected;
        _usersData[existingIndex] = userData;
      } else {
        // Add new user
        _usersData.add(userData);
      }

      // If we're on a page that no longer has data after the update, adjust the current page
      if (_currentPage > _totalPages && _totalPages > 0) {
        _currentPage = _totalPages;
      }
    });
  }

  void _toggleSelectAll() {
    setState(() {
      _selectAll = !_selectAll;
      for (var user in _paginatedData) {
        user['selected'] = _selectAll;
      }
    });
  }

  void _deleteSelected() {
    setState(() {
      _usersData.removeWhere((user) => user['selected'] == true);
      _selectAll = false;
      // Adjust current page if needed
      if (_currentPage > _totalPages && _totalPages > 0) {
        _currentPage = _totalPages;
      }
    });
  }

  void _exportData() {
    // Add export functionality here
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Export functionality would be implemented here')),
    );
  }

  void _showFilterDialog(String columnKey) {
    // Add filter dialog functionality here
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Filter ${columnKey}'),
        content: Text('Filter functionality would be implemented here'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Close'),
          ),
        ],
      ),
    );
  }

  void _sortData(String columnKey) {
    setState(() {
      if (_sortColumn == columnKey) {
        _sortAscending = !_sortAscending;
      } else {
        _sortColumn = columnKey;
        _sortAscending = true;
      }
    });
  }

  bool _hasSelectedItems() {
    return _usersData.any((user) => user['selected'] == true);
  }

  Widget _buildResizableColumn({
    required String title,
    required String columnKey,
    required bool isLast,
    Widget? customContent,
  }) {
    return Container(
      width: columnWidths[columnKey],
      child: Row(
        children: [
          Expanded(
            child: Container(
              height: 40, // Fixed height for consistent checkbox alignment
              padding: EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.grey.shade200,
                border: Border(
                  right: BorderSide(color: Colors.grey.shade400),
                  bottom: BorderSide(color: Colors.grey.shade400),
                ),
              ),
              child: customContent ??
                  Row(
                    children: [
                      Expanded(
                        child: Text(
                          title,
                          style: TextStyle(fontWeight: FontWeight.bold, fontSize: 12),
                          overflow: TextOverflow.ellipsis,
                        ),
                      ),
                      if (columnKey != 'Checkbox') ...[
                        GestureDetector(
                          onTap: () => _sortData(columnKey),
                          child: Icon(
                            _sortColumn == columnKey
                                ? (_sortAscending ? Icons.arrow_upward : Icons.arrow_downward)
                                : Icons.unfold_more,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                        ),
                        SizedBox(width: 4),
                        GestureDetector(
                          onTap: () => _showFilterDialog(columnKey),
                          child: Icon(
                            Icons.filter_alt_outlined,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                        ),
                      ],
                    ],
                  ),
            ),
          ),
          if (!isLast)
            GestureDetector(
              onPanUpdate: (details) {
                setState(() {
                  columnWidths[columnKey] =
                      (columnWidths[columnKey]! + details.delta.dx).clamp(60.0, 400.0);
                });
              },
              child: Container(
                width: 4,
                height: 40,
                color: Colors.grey.shade400,
                child: MouseRegion(
                  cursor: SystemMouseCursors.resizeColumn,
                  child: Container(),
                ),
              ),
            ),
        ],
      ),
    );
  }

  Widget _buildDataCell(dynamic data, String columnKey, {Widget? customContent, VoidCallback? onTap}) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        width: columnWidths[columnKey],
        height: 40, // Fixed height for consistent alignment
        padding: EdgeInsets.all(8),
        decoration: BoxDecoration(
          border: Border(
            right: BorderSide(color: Colors.grey.shade400),
            bottom: BorderSide(color: Colors.grey.shade400),
          ),
        ),
        child: Align(
          alignment: Alignment.centerLeft,
          child: customContent ??
              Text(
                data.toString(),
                style: TextStyle(
                  fontSize: 12,
                  color: onTap != null ? Colors.blue : Colors.black,
                ),
                overflow: TextOverflow.ellipsis,
              ),
        ),
      ),
    );
  }

  Widget _buildPaginationControls() {
    return Container(
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        border: Border(
          top: BorderSide(color: Colors.grey.shade300, width: 1),
        ),
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          // Page numbers
          Row(
            children: [
              for (int i = 1; i <= _totalPages && i <= 4; i++)
                GestureDetector(
                  onTap: () {
                    setState(() {
                      _currentPage = i;
                    });
                  },
                  child: Container(
                    margin: EdgeInsets.symmetric(horizontal: 4),
                    padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                    decoration: BoxDecoration(
                      color: _currentPage == i ? Colors.orange.shade700 : Colors.transparent,
                      borderRadius: BorderRadius.circular(4),
                    ),
                    child: Text(
                      i.toString(),
                      style: TextStyle(
                        color: _currentPage == i ? Colors.white : Colors.black,
                        fontWeight: _currentPage == i ? FontWeight.bold : FontWeight.normal,
                      ),
                    ),
                  ),
                ),
            ],
          ),
          // Page size selector
          Row(
            children: [
              Text('Page Size: ', style: TextStyle(fontSize: 14)),
              DropdownButton<int>(
                value: _pageSize,
                items: _pageSizeOptions.map((size) {
                  return DropdownMenuItem<int>(
                    value: size,
                    child: Text(size.toString()),
                  );
                }).toList(),
                onChanged: (value) {
                  setState(() {
                    _pageSize = value!;
                    _currentPage = 1; // Reset to first page
                  });
                },
              ),
            ],
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        color: Colors.grey.shade50,
        child: Column(
          children: [
            // Header with buttons and search
            Container(
              width: double.infinity, // Full width
              padding: EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.white,
                border: Border(
                  bottom: BorderSide(color: Colors.grey.shade300, width: 1),
                ),
              ),
              child: LayoutBuilder(
                builder: (context, constraints) {
                  final isSmallScreen = constraints.maxWidth < 600;
                  final buttonStyle = OutlinedButton.styleFrom(
                    padding: isSmallScreen
                        ? EdgeInsets.symmetric(horizontal: 6, vertical: 4)
                        : EdgeInsets.symmetric(horizontal: 8, vertical: 6),
                    textStyle: TextStyle(
                      fontSize: isSmallScreen ? 12 : 14,
                    ),
                    minimumSize: Size(0, isSmallScreen ? 30 : 36),
                    side: BorderSide(color: Colors.grey.shade300),
                  );

                  return SingleChildScrollView(
                    scrollDirection: Axis.horizontal,
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.start, // Left-aligned content
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        // New Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _navigateToNewUserPage,
                            icon: Icon(Icons.add, color: Colors.orange.shade700, size: 20),
                            padding: EdgeInsets.all(4),
                            tooltip: 'New',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _navigateToNewUserPage,
                            icon: Icon(Icons.add, color: Colors.orange.shade700, size: 20),
                            label: Text('New'),
                            style: buttonStyle.copyWith(
                              backgroundColor: MaterialStateProperty.all(Colors.white),
                              foregroundColor: MaterialStateProperty.all(Colors.black),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Delete Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _hasSelectedItems() ? _deleteSelected : null,
                            icon: Icon(Icons.delete,
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                                size: 20
                            ),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Delete',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _hasSelectedItems() ? _deleteSelected : null,
                            icon: Icon(Icons.delete,
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                                size: 20
                            ),
                            label: Text(
                              'Delete',
                              style: TextStyle(
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                              ),
                            ),
                            style: buttonStyle.copyWith(
                              foregroundColor: MaterialStateProperty.all(
                                _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                              ),
                              side: MaterialStateProperty.all(
                                BorderSide(color: Colors.grey.shade300),
                              ),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Search Field
                        Container(
                          width: isSmallScreen ? 180 : 300,
                          child: TextField(
                            controller: _searchController,
                            onChanged: (value) {
                              setState(() {
                                _currentPage = 1;
                              });
                            },
                            decoration: InputDecoration(
                              isDense: true,
                              hintText: 'Search...',
                              suffixIcon: Icon(Icons.search, color: Colors.orange.shade700),
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(4),
                              ),
                              contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                            ),
                          ),
                        ),

                        SizedBox(width: 12),

                        // Export Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _exportData,
                            icon: Icon(Icons.download, color: Colors.orange.shade700, size: 20),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Export',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _exportData,
                            icon: Icon(Icons.download, color: Colors.orange.shade700, size: 20),
                            label: Text('Export'),
                            style: buttonStyle.copyWith(
                              backgroundColor: MaterialStateProperty.all(Colors.white),
                              foregroundColor: MaterialStateProperty.all(Colors.black),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Refresh Button
                        IconButton(
                          onPressed: _refreshData,
                          icon: Icon(Icons.refresh, color: Colors.orange.shade700, size: 20),
                          padding: EdgeInsets.all(4),
                          tooltip: 'Refresh',
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),

            // Table area
            Expanded(
              child: Container(
                margin: EdgeInsets.all(16),
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.grey.shade300),
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(4),
                ),
                child: Column(
                  children: [
                    // Table with synchronized scrolling
                    Expanded(
                      child: _paginatedData.isEmpty
                          ? Center(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(
                              Icons.people,
                              size: 64,
                              color: Colors.grey.shade400,
                            ),
                            SizedBox(height: 16),
                            Text(
                              'No data to display',
                              style: TextStyle(
                                fontSize: 18,
                                color: Colors.grey.shade600,
                              ),
                            ),
                            SizedBox(height: 8),
                            Text(
                              'Click "New" to add your first user',
                              style: TextStyle(
                                fontSize: 14,
                                color: Colors.grey.shade500,
                              ),
                            ),
                          ],
                        ),
                      )
                          : SingleChildScrollView(
                        controller: _horizontalScrollController,
                        scrollDirection: Axis.horizontal,
                        child: Column(
                          children: [
                            // Table header
                            Row(
                              children: [
                                _buildResizableColumn(
                                  title: '',
                                  columnKey: 'Checkbox',
                                  isLast: false,
                                  customContent: Center(
                                    child: Checkbox(
                                      value: _selectAll,
                                      onChanged: (value) => _toggleSelectAll(),
                                    ),
                                  ),
                                ),
                                _buildResizableColumn(
                                  title: 'User Name',
                                  columnKey: 'User Name',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Firstname',
                                  columnKey: 'Firstname',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Lastname',
                                  columnKey: 'Lastname',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Full Name',
                                  columnKey: 'Full Name',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Email',
                                  columnKey: 'Email',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Division',
                                  columnKey: 'Division',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Unit',
                                  columnKey: 'Unit',
                                  isLast: true,
                                ),
                              ],
                            ),

                            // Table body
                            Expanded(
                              child: SingleChildScrollView(
                                child: Column(
                                  children: _paginatedData.map((user) {
                                    return Row(
                                      children: [
                                        _buildDataCell(
                                          '',
                                          'Checkbox',
                                          customContent: Center(
                                            child: Checkbox(
                                              value: user['selected'],
                                              onChanged: (value) {
                                                setState(() {
                                                  user['selected'] = value;
                                                });
                                              },
                                            ),
                                          ),
                                        ),
                                        _buildDataCell(
                                          user['username'] ?? '',
                                          'User Name',
                                          onTap: () => _navigateToEditUserPage(user),
                                        ),
                                        _buildDataCell(user['firstname'] ?? '', 'Firstname'),
                                        _buildDataCell(user['lastname'] ?? '', 'Lastname'),
                                        _buildDataCell(user['fullname'] ?? '', 'Full Name'),
                                        _buildDataCell(user['email'] ?? '', 'Email'),
                                        _buildDataCell(user['division'] ?? '', 'Division'),
                                        _buildDataCell(user['unit'] ?? '', 'Unit'),
                                      ],
                                    );
                                  }).toList(),
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                    // Pagination controls
                    if (_totalPages > 0) _buildPaginationControls(),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// New User Page
class NewUserPage extends StatefulWidget {
  final Map<String, dynamic>? existingUser;
  final Function(Map<String, dynamic>) onUserSaved;
  final bool isNewUser;

  const NewUserPage({
    Key? key,
    this.existingUser,
    required this.onUserSaved,
    this.isNewUser = false,
  }) : super(key: key);

  @override
  _NewUserPageState createState() => _NewUserPageState();
}

class _NewUserPageState extends State<NewUserPage> {
  final _formKey = GlobalKey<FormState>();

  // Form controllers
  late TextEditingController _firstnameController;
  late TextEditingController _lastnameController;
  late TextEditingController _fullNameController;
  late TextEditingController _divisionController;
  late TextEditingController _unitController;
  late TextEditingController _emailController;
  late TextEditingController _userNameController;

  // Form state
  bool _forcePasswordChange = false;
  bool _isActive = true;

  // Dropdown options
  final List<String> _divisionOptions = [
    'Information and Communications Technology',
    'Human Resources',
    'Finance',
    'Operations',
    'Legal',
  ];

  final List<String> _unitOptions = [
    'Data and Quality',
    'Systems Maintenance and Development',
    'Deputy Superintendent of Police Office',
    'Network Infrastructure',
    'Cybersecurity',
  ];

  @override
  void initState() {
    super.initState();
    _initializeControllers();
  }

  void _initializeControllers() {
    final user = widget.existingUser;

    _firstnameController = TextEditingController(text: user?['firstname'] ?? '');
    _lastnameController = TextEditingController(text: user?['lastname'] ?? '');
    _fullNameController = TextEditingController(text: user?['fullname'] ?? '');
    _divisionController = TextEditingController(text: user?['division'] ?? '');
    _unitController = TextEditingController(text: user?['unit'] ?? '');
    _emailController = TextEditingController(text: user?['email'] ?? '');
    _userNameController = TextEditingController(text: user?['username'] ?? '');

    _forcePasswordChange = user?['forcePasswordChange'] ?? false;
    _isActive = user?['isActive'] ?? true;

    // Auto-generate full name when first/last name changes
    _firstnameController.addListener(_updateFullName);
    _lastnameController.addListener(_updateFullName);
  }

  void _updateFullName() {
    final firstName = _firstnameController.text.trim();
    final lastName = _lastnameController.text.trim();
    _fullNameController.text = '$firstName $lastName'.trim();
  }

  @override
  void dispose() {
    _firstnameController.dispose();
    _lastnameController.dispose();
    _fullNameController.dispose();
    _divisionController.dispose();
    _unitController.dispose();
    _emailController.dispose();
    _userNameController.dispose();
    super.dispose();
  }

  void _saveUser({bool saveAndNew = false}) {
    if (_formKey.currentState!.validate()) {
      final userData = {
        'selected': false,
        'firstname': _firstnameController.text.trim(),
        'lastname': _lastnameController.text.trim(),
        'fullname': _fullNameController.text.trim(),
        'division': _divisionController.text.trim(),
        'unit': _unitController.text.trim(),
        'email': _emailController.text.trim(),
        'username': _userNameController.text.trim(),
        'forcePasswordChange': _forcePasswordChange,
        'isActive': _isActive,
      };

      // Call the callback to save the user data
      widget.onUserSaved(userData);

      // Show success message
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('User saved successfully'),
          backgroundColor: Colors.green,
          duration: Duration(seconds: 2),
        ),
      );

      if (saveAndNew) {
        // Clear the form for new entry
        _clearForm();
      }
    }
  }

  void _clearForm() {
    _formKey.currentState!.reset();
    _firstnameController.clear();
    _lastnameController.clear();
    _fullNameController.clear();
    _divisionController.clear();
    _unitController.clear();
    _emailController.clear();
    _userNameController.clear();

    setState(() {
      _forcePasswordChange = false;
      _isActive = true;
    });
  }

  void _deleteUser() {
    Navigator.pop(context);
  }

  Widget _buildTextField({
    required String label,
    required TextEditingController controller,
    bool required = false,
    String? Function(String?)? validator,
    bool readOnly = false,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        RichText(
          text: TextSpan(
            text: label,
            style: TextStyle(
              color: Colors.black87,
              fontSize: 14,
              fontWeight: FontWeight.w500,
            ),
            children: required
                ? [
              TextSpan(
                text: '*',
                style: TextStyle(color: Colors.red),
              ),
            ]
                : [],
          ),
        ),
        SizedBox(height: 4),
        TextFormField(
          controller: controller,
          readOnly: readOnly,
          decoration: InputDecoration(
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(4),
              borderSide: BorderSide(color: Colors.grey.shade400),
            ),
            enabledBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(4),
              borderSide: BorderSide(color: Colors.grey.shade400),
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(4),
              borderSide: BorderSide(color: Colors.orange.shade700, width: 2),
            ),
            filled: readOnly,
            fillColor: readOnly ? Colors.grey.shade100 : Colors.white,
            contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
            suffixIcon: readOnly ? null : IconButton(
              icon: Icon(Icons.clear, size: 18, color: Colors.grey.shade600),
              onPressed: () => controller.clear(),
            ),
          ),
          validator: validator,
        ),
      ],
    );
  }

  Widget _buildDropdownField({
    required String label,
    required TextEditingController controller,
    required List<String> options,
    bool required = false,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        RichText(
          text: TextSpan(
            text: label,
            style: TextStyle(
              color: Colors.black87,
              fontSize: 14,
              fontWeight: FontWeight.w500,
            ),
            children: required
                ? [
              TextSpan(
                text: '*',
                style: TextStyle(color: Colors.red),
              ),
            ]
                : [],
          ),
        ),
        SizedBox(height: 4),
        Row(
          children: [
            Expanded(
              child: TextFormField(
                controller: controller,
                readOnly: true,
                decoration: InputDecoration(
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(4),
                    borderSide: BorderSide(color: Colors.grey.shade400),
                  ),
                  enabledBorder: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(4),
                    borderSide: BorderSide(color: Colors.grey.shade400),
                  ),
                  focusedBorder: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(4),
                    borderSide: BorderSide(color: Colors.orange.shade700, width: 2),
                  ),
                  contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                  suffixIcon: PopupMenuButton<String>(
                    icon: Icon(Icons.arrow_drop_down, size: 18, color: Colors.grey.shade600),
                    onSelected: (value) {
                      controller.text = value;
                    },
                    itemBuilder: (context) {
                      return options.map((option) {
                        return PopupMenuItem<String>(
                          value: option,
                          child: Text(option),
                        );
                      }).toList();
                    },
                  ),
                ),
                validator: required
                    ? (value) {
                  if (value == null || value.isEmpty) {
                    return '$label is required';
                  }
                  return null;
                }
                    : null,
              ),
            ),
          ],
        ),
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey.shade50,
      appBar: AppBar(
        backgroundColor: Colors.white,
        elevation: 1,
        leading: IconButton(
          icon: Icon(Icons.arrow_back, color: Colors.black87),
          onPressed: () => Navigator.pop(context),
        ),
        title: Text(
          'Application User',
          style: TextStyle(color: Colors.black87, fontSize: 18),
        ),
        actions: [
          IconButton(
            onPressed: () {
              // Previous record
            },
            icon: Icon(Icons.chevron_left, color: Colors.black87),
          ),
          IconButton(
            onPressed: () {
              // Next record
            },
            icon: Icon(Icons.chevron_right, color: Colors.black87),
          ),
          IconButton(
            onPressed: () {
              // Refresh
            },
            icon: Icon(Icons.refresh, color: Colors.black87),
          ),
          SizedBox(width: 8),
        ],
      ),
      body: Column(
        children: [
          // Header with buttons
          Container(
            padding: EdgeInsets.symmetric(vertical: 8, horizontal: 16),
            decoration: BoxDecoration(
              color: Colors.white,
              border: Border(
                bottom: BorderSide(color: Colors.grey.shade300, width: 1),
              ),
            ),
            child: LayoutBuilder(
              builder: (context, constraints) {
                // Stack vertically on small screens, horizontally on larger screens
                if (constraints.maxWidth < 600) {
                  return Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Row(
                        children: [
                          Expanded(
                            child: OutlinedButton.icon(
                              onPressed: _deleteUser,
                              icon: Icon(Icons.delete, color: Colors.red.shade400, size: 18),
                              label: Text('Delete', style: TextStyle(fontSize:12)),
                              style: OutlinedButton.styleFrom(
                                foregroundColor: Colors.red.shade400,
                                side: BorderSide(color: Colors.grey.shade300),
                                padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                              ),
                            ),
                          ),
                          SizedBox(width: 6),
                          Expanded(
                            child: OutlinedButton.icon(
                              onPressed: () {
                                // Change password functionality
                              },
                              icon: Icon(Icons.lock, color: Colors.green.shade700, size: 18),
                              label: Text('Reset Password',  style: TextStyle(fontSize:12)),
                              style: OutlinedButton.styleFrom(
                                backgroundColor: Colors.white,
                                foregroundColor: Colors.black,
                                side: BorderSide(color: Colors.grey.shade300),
                                padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                              ),
                            ),
                          ),
                        ],
                      ),
                      SizedBox(height: 6),
                      Row(
                        children: [
                          Expanded(
                            child: ElevatedButton.icon(
                              onPressed: () => _saveUser(saveAndNew: true),
                              icon: Icon(Icons.save, color: Colors.orange.shade700, size: 18),
                              label: Text('Save and New', style: TextStyle(fontSize: 12)),
                              style: ElevatedButton.styleFrom(
                                foregroundColor: Colors.orange.shade700,
                                side: BorderSide(color: Colors.orange.shade700),
                                padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                              ),
                            ),
                          ),
                          SizedBox(width: 6),
                          Expanded(
                            child: ElevatedButton.icon(
                              onPressed: () => _saveUser(),
                              icon: Icon(Icons.save, color: Colors.white, size: 18),
                              label: Text('Save', style: TextStyle(fontSize: 12)),
                              style: ElevatedButton.styleFrom(
                                backgroundColor: Colors.orange.shade700,
                                foregroundColor: Colors.white,
                                padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                              ),
                            ),
                          ),
                        ],
                      ),
                    ],
                  );
                } else {
                  return SingleChildScrollView(
                    scrollDirection: Axis.horizontal,
                    child: Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        OutlinedButton.icon(
                          onPressed: _deleteUser,
                          icon: Icon(Icons.delete, color: Colors.red.shade400, size: 20),
                          label: Text('Delete'),
                          style: OutlinedButton.styleFrom(
                            foregroundColor: Colors.red,
                            side: BorderSide(color: Colors.grey.shade300),
                          ),
                        ),
                        SizedBox(width: 8),
                        OutlinedButton.icon(
                          onPressed: () {
                            // Change password functionality
                          },
                          icon: Icon(Icons.lock, color: Colors.orange.shade700, size: 20),
                          label: Text('Change My Password'),
                          style: OutlinedButton.styleFrom(
                            backgroundColor: Colors.white,
                            foregroundColor: Colors.black,
                            side: BorderSide(color: Colors.grey.shade300),
                          ),
                        ),
                        SizedBox(width: 8),
                        ElevatedButton.icon(
                          onPressed: () => _saveUser(saveAndNew: true),
                          icon: Icon(Icons.save, color: Colors.orange.shade700, size: 20),
                          label: Text('Save and New'),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.orange.shade700,
                            side: BorderSide(color: Colors.orange.shade700),
                          ),
                        ),
                        SizedBox(width: 8),
                        ElevatedButton.icon(
                          onPressed: () => _saveUser(),
                          icon: Icon(Icons.save, color: Colors.white, size: 20),
                          label: Text('Save'),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.orange.shade700,
                            foregroundColor: Colors.white,
                          ),
                        ),
                      ],
                    ),
                  );
                }
              },
            ),
          ),

          // Form content
          Expanded(
            child: SingleChildScrollView(
              padding: EdgeInsets.all(16),
              child: Container(
                constraints: BoxConstraints(
                  minWidth: double.infinity,
                ),
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.grey.shade300),
                ),
                child: Padding(
                  padding: EdgeInsets.all(24),
                  child: Form(
                    key: _formKey,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Application User',
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.w600,
                            color: Colors.black87,
                          ),
                        ),
                        SizedBox(height: 24),

                        // First row - Firstname and Lastname
                        Row(
                          children: [
                            Expanded(
                              child: _buildTextField(
                                label: 'Firstname',
                                controller: _firstnameController,
                                required: true,
                                validator: (value) {
                                  if (value == null || value.isEmpty) {
                                    return 'Firstname is required';
                                  }
                                  return null;
                                },
                              ),
                            ),
                            SizedBox(width: 16),
                            Expanded(
                              child: _buildTextField(
                                label: 'Lastname',
                                controller: _lastnameController,
                                required: true,
                                validator: (value) {
                                  if (value == null || value.isEmpty) {
                                    return 'Lastname is required';
                                  }
                                  return null;
                                },
                              ),
                            ),
                          ],
                        ),
                        SizedBox(height: 16),

                        // Full Name (read-only)
                        _buildTextField(
                          label: 'Full Name',
                          controller: _fullNameController,
                          readOnly: true,
                        ),
                        SizedBox(height: 16),

                        // Division and Unit
                        Row(
                          children: [
                            Expanded(
                              child: _buildDropdownField(
                                label: 'Division',
                                controller: _divisionController,
                                options: _divisionOptions,
                                required: true,
                              ),
                            ),
                            SizedBox(width: 16),
                            Expanded(
                              child: _buildDropdownField(
                                label: 'Unit',
                                controller: _unitController,
                                options: _unitOptions,
                                required: true,
                              ),
                            ),
                          ],
                        ),
                        SizedBox(height: 16),

                        // Email
                        _buildTextField(
                          label: 'Email',
                          controller: _emailController,
                          required: true,
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Email is required';
                            }
                            if (!RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$').hasMatch(value)) {
                              return 'Please enter a valid email address';
                            }
                            return null;
                          },
                        ),
                        SizedBox(height: 16),

                        // User Name
                        _buildTextField(
                          label: 'User Name',
                          controller: _userNameController,
                          required: true,
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'User Name is required';
                            }
                            return null;
                          },
                        ),
                        SizedBox(height: 24),

                        // Checkboxes
                        Row(
                          children: [
                            Expanded(
                              child: Row(
                                children: [
                                  Checkbox(
                                    value: _forcePasswordChange,
                                    onChanged: (value) {
                                      setState(() {
                                        _forcePasswordChange = value ?? false;
                                      });
                                    },
                                  ),
                                  Text(
                                    'Force Password Change',
                                    style: TextStyle(fontSize: 14),
                                  ),
                                ],
                              ),
                            ),
                            Expanded(
                              child: Row(
                                children: [
                                  Checkbox(
                                    value: _isActive,
                                    onChanged: (value) {
                                      setState(() {
                                        _isActive = value ?? true;
                                      });
                                    },
                                  ),
                                  Text(
                                    'Is Active',
                                    style: TextStyle(fontSize: 14),
                                  ),
                                ],
                              ),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}


//Scheduler Event Page
class SchedulerEventPage extends StatefulWidget {
  @override
  _SchedulerEventPageState createState() => _SchedulerEventPageState();
}

class _SchedulerEventPageState extends State<SchedulerEventPage> {
  DateTime _selectedDate = DateTime.now();
  String _currentView = 'Day'; // Day, Week, Work Week, Month, Timeline
  final List<String> _viewOptions = ['Day', 'Week', 'Work Week', 'Month', 'Timeline'];

  // Sample events data
  List<Map<String, dynamic>> _events = [
    {
      'id': '1',
      'title': 'Team Meeting',
      'description': 'Weekly team sync',
      'startTime': DateTime.now().copyWith(hour: 9, minute: 0),
      'endTime': DateTime.now().copyWith(hour: 10, minute: 0),
      'selected': false,
    },
    {
      'id': '2',
      'title': 'Project Review',
      'description': 'Quarterly project review',
      'startTime': DateTime.now().copyWith(hour: 14, minute: 30),
      'endTime': DateTime.now().copyWith(hour: 15, minute: 30),
      'selected': false,
    },
  ];

  bool get _hasSelectedItems {
    return _events.any((event) => event['selected'] == true);
  }

  void _navigateToToday() {
    setState(() {
      _selectedDate = DateTime.now();
    });
  }

  void _navigatePrevious() {
    setState(() {
      switch (_currentView) {
        case 'Day':
          _selectedDate = _selectedDate.subtract(Duration(days: 1));
          break;
        case 'Week':
        case 'Work Week':
          _selectedDate = _selectedDate.subtract(Duration(days: 7));
          break;
        case 'Month':
          _selectedDate = DateTime(_selectedDate.year, _selectedDate.month - 1, _selectedDate.day);
          break;
        case 'Timeline':
          _selectedDate = _selectedDate.subtract(Duration(days: 1));
          break;
      }
    });
  }

  void _navigateNext() {
    setState(() {
      switch (_currentView) {
        case 'Day':
          _selectedDate = _selectedDate.add(Duration(days: 1));
          break;
        case 'Week':
        case 'Work Week':
          _selectedDate = _selectedDate.add(Duration(days: 7));
          break;
        case 'Month':
          _selectedDate = DateTime(_selectedDate.year, _selectedDate.month + 1, _selectedDate.day);
          break;
        case 'Timeline':
          _selectedDate = _selectedDate.add(Duration(days: 1));
          break;
      }
    });
  }

  void _showDatePicker() async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: _selectedDate,
      firstDate: DateTime(2020),
      lastDate: DateTime(2030),
    );
    if (picked != null && picked != _selectedDate) {
      setState(() {
        _selectedDate = picked;
      });
    }
  }

  void _navigateToNewSchedulerEvent() async {
    final result = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => NewSchedulerEvent(),
      ),
    );

    if (result != null) {
      setState(() {
        _events.add({
          'id': DateTime.now().millisecondsSinceEpoch.toString(),
          'title': result['title'],
          'description': result['description'],
          'startTime': result['startTime'],
          'endTime': result['endTime'],
          'selected': false,
        });
      });

      // If keepOpen flag is set, reopen the page
      if (result['keepOpen'] == true) {
        _navigateToNewSchedulerEvent();
      }
    }
  }

  void _deleteSelected() {
    setState(() {
      _events.removeWhere((event) => event['selected'] == true);
    });
  }

  String _getDateDisplayText() {
    switch (_currentView) {
      case 'Day':
        return '${_getMonthName(_selectedDate.month)} ${_selectedDate.day}, ${_selectedDate.year}';
      case 'Week':
      case 'Work Week':
        DateTime startOfWeek = _selectedDate.subtract(Duration(days: _selectedDate.weekday - 1));
        DateTime endOfWeek = startOfWeek.add(Duration(days: 6));
        if (startOfWeek.month == endOfWeek.month) {
          return '${_getMonthName(startOfWeek.month)} ${startOfWeek.day} - ${endOfWeek.day}, ${startOfWeek.year}';
        } else {
          return '${_getMonthName(startOfWeek.month)} ${startOfWeek.day} - ${_getMonthName(endOfWeek.month)} ${endOfWeek.day}, ${startOfWeek.year}';
        }
      case 'Month':
        return '${_getMonthName(_selectedDate.month)} ${_selectedDate.year}';
      case 'Timeline':
        return '${_getMonthName(_selectedDate.month)} ${_selectedDate.day}, ${_selectedDate.year}';
      default:
        return '';
    }
  }

  String _getMonthName(int month) {
    const months = [
      '', 'January', 'February', 'March', 'April', 'May', 'June',
      'July', 'August', 'September', 'October', 'November', 'December'
    ];
    return months[month];
  }

  List<Map<String, dynamic>> _getEventsForDate(DateTime date) {
    return _events.where((event) {
      DateTime eventDate = event['startTime'];
      return eventDate.year == date.year &&
          eventDate.month == date.month &&
          eventDate.day == date.day;
    }).toList();
  }

  Widget _buildTimeSlot(int hour) {
    String timeLabel = hour == 0 ? '12 AM' :
    hour < 12 ? '$hour AM' :
    hour == 12 ? '12 PM' : '${hour - 12} PM';

    List<Map<String, dynamic>> hourEvents = _events.where((event) {
      DateTime eventStart = event['startTime'];
      return eventStart.year == _selectedDate.year &&
          eventStart.month == _selectedDate.month &&
          eventStart.day == _selectedDate.day &&
          eventStart.hour == hour;
    }).toList();

    return Container(
      height: math.max(60, hourEvents.length * 30.0),
      decoration: BoxDecoration(
        border: Border(
          bottom: BorderSide(color: Colors.grey.shade300, width: 0.5),
        ),
      ),
      child: Row(
        children: [
          Container(
            width: 80,
            padding: EdgeInsets.all(8),
            child: Text(
              timeLabel,
              style: TextStyle(fontSize: 12, color: Colors.grey.shade600),
            ),
          ),
          Expanded(
            child: Container(
              padding: EdgeInsets.all(4),
              child: Column(
                children: hourEvents.map((event) {
                  return GestureDetector(
                    onTap: () {
                      setState(() {
                        event['selected'] = !event['selected'];
                      });
                    },
                    child: Container(
                      width: double.infinity,
                      margin: EdgeInsets.symmetric(vertical: 2),
                      padding: EdgeInsets.all(8),
                      decoration: BoxDecoration(
                        color: event['selected'] ? Colors.orange.shade100 : Colors.blue.shade100,
                        borderRadius: BorderRadius.circular(2),
                        border: Border.all(
                          color: event['selected'] ? Colors.orange.shade700 : Colors.blue.shade300,
                          width: event['selected'] ? 1 : 0.5,
                        ),
                      ),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            event['title'],
                            style: TextStyle(
                              fontSize: 10,
                              fontWeight: FontWeight.bold,
                              color: Colors.black87,
                            ),
                            maxLines: 1,
                            overflow: TextOverflow.ellipsis,
                          ),
                          if (event['description'] != null && event['description'].isNotEmpty)
                            Text(
                              event['description'],
                              style: TextStyle(
                                fontSize: 8,
                                color: Colors.black54,
                              ),
                              maxLines: 1,
                              overflow: TextOverflow.ellipsis,
                            ),
                        ],
                      ),
                    ),
                  );
                }).toList(),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildDayView() {
    return SingleChildScrollView(
      child: Column(
        children: List.generate(24, (index) => _buildTimeSlot(index)),
      ),
    );
  }

  Widget _buildWeekView() {
    DateTime startOfWeek = _selectedDate.subtract(Duration(days: _selectedDate.weekday - 1));
    List<DateTime> weekDays = List.generate(7, (index) => startOfWeek.add(Duration(days: index)));

    if (_currentView == 'Work Week') {
      weekDays = weekDays.take(5).toList(); // Monday to Friday only
    }

    return Column(
      children: [
        // Week header
        Container(
          height: 50,
          decoration: BoxDecoration(
            border: Border(bottom: BorderSide(color: Colors.grey.shade300)),
          ),
          child: Row(
            children: [
              Container(width: 80), // Space for time labels
              ...weekDays.map((day) => Expanded(
                child: Container(
                  padding: EdgeInsets.all(4),
                  decoration: BoxDecoration(
                    border: Border(right: BorderSide(color: Colors.grey.shade300, width: 0.5)),
                  ),
                  child: Column(
                    children: [
                      Text(
                        ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'][day.weekday - 1],
                        style: TextStyle(fontSize: 12, fontWeight: FontWeight.bold),
                      ),
                      Text(
                        day.day.toString(),
                        style: TextStyle(
                          fontSize: 12,
                          fontWeight: FontWeight.bold,
                          color: day.day == DateTime.now().day &&
                              day.month == DateTime.now().month &&
                              day.year == DateTime.now().year
                              ? Colors.orange.shade700
                              : Colors.black,
                        ),
                      ),
                    ],
                  ),
                ),
              )).toList(),
            ],
          ),
        ),
        // Week body
        Expanded(
          child: SingleChildScrollView(
            child: Column(
              children: List.generate(24, (hour) {
                String timeLabel = hour == 0 ? '12 AM' :
                hour < 12 ? '$hour AM' :
                hour == 12 ? '12 PM' : '${hour - 12} PM';

                return Container(
                  height: 60,
                  decoration: BoxDecoration(
                    border: Border(bottom: BorderSide(color: Colors.grey.shade300, width: 0.5)),
                  ),
                  child: Row(
                    children: [
                      Container(
                        width: 80,
                        padding: EdgeInsets.all(8),
                        child: Text(
                          timeLabel,
                          style: TextStyle(fontSize: 12, color: Colors.grey.shade600),
                        ),
                      ),
                      ...weekDays.map((day) {
                        List<Map<String, dynamic>> dayEvents = _events.where((event) {
                          DateTime eventStart = event['startTime'];
                          return eventStart.year == day.year &&
                              eventStart.month == day.month &&
                              eventStart.day == day.day &&
                              eventStart.hour == hour;
                        }).toList();

                        return Expanded(
                          child: Container(
                            decoration: BoxDecoration(
                              border: Border(right: BorderSide(color: Colors.grey.shade300, width: 0.5)),
                            ),
                            padding: EdgeInsets.all(2),
                            child: Column(
                              children: dayEvents.map((event) {
                                return GestureDetector(
                                  onTap: () {
                                    setState(() {
                                      event['selected'] = !event['selected'];
                                    });
                                  },
                                  child: Container(
                                    width: double.infinity,
                                    margin: EdgeInsets.symmetric(vertical: 1),
                                    padding: EdgeInsets.all(4),
                                    decoration: BoxDecoration(
                                      color: event['selected'] ? Colors.orange.shade100 : Colors.blue.shade100,
                                      borderRadius: BorderRadius.circular(2),
                                      border: Border.all(
                                        color: event['selected'] ? Colors.orange.shade700 : Colors.blue.shade300,
                                        width: event['selected'] ? 1 : 0.5,
                                      ),
                                    ),
                                    child: Text(
                                      event['title'],
                                      style: TextStyle(fontSize: 10, fontWeight: FontWeight.bold),
                                      maxLines: 1,
                                      overflow: TextOverflow.ellipsis,
                                    ),
                                  ),
                                );
                              }).toList(),
                            ),
                          ),
                        );
                      }).toList(),
                    ],
                  ),
                );
              }),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildMonthView() {
    DateTime firstDayOfMonth = DateTime(_selectedDate.year, _selectedDate.month, 1);
    DateTime lastDayOfMonth = DateTime(_selectedDate.year, _selectedDate.month + 1, 0);

    int daysInMonth = lastDayOfMonth.day;
    int startWeekday = firstDayOfMonth.weekday;

    List<Widget> dayWidgets = [];

    // Add empty cells for days before the first day of the month
    for (int i = 1; i < startWeekday; i++) {
      dayWidgets.add(Container());
    }

    // Add days of the month
    for (int day = 1; day <= daysInMonth; day++) {
      DateTime currentDate = DateTime(_selectedDate.year, _selectedDate.month, day);
      List<Map<String, dynamic>> dayEvents = _getEventsForDate(currentDate);
      bool isToday = currentDate.year == DateTime.now().year &&
          currentDate.month == DateTime.now().month &&
          currentDate.day == DateTime.now().day;

      dayWidgets.add(
        GestureDetector(
          onTap: () {
            setState(() {
              _selectedDate = currentDate;
              _currentView = 'Day';
            });
          },
          child: Container(
            decoration: BoxDecoration(
              border: Border.all(color: Colors.grey.shade300, width: 0.5),
              color: isToday ? Colors.orange.shade50 : Colors.white,
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Padding(
                  padding: EdgeInsets.all(4),
                  child: Text(
                    day.toString(),
                    style: TextStyle(
                      fontSize: 14,
                      fontWeight: isToday ? FontWeight.bold : FontWeight.normal,
                      color: isToday ? Colors.orange.shade700 : Colors.black,
                    ),
                  ),
                ),
                ...dayEvents.take(3).map((event) => Container(
                  constraints: BoxConstraints(maxHeight: 16),
                  margin: EdgeInsets.symmetric(horizontal: 2, vertical: 1),
                  padding: EdgeInsets.all(2),
                  decoration: BoxDecoration(
                    color: Colors.blue.shade100,
                    borderRadius: BorderRadius.circular(2),
                  ),
                  child: Text(
                    event['title'],
                    style: TextStyle(fontSize: 8),
                    maxLines: 1,
                    overflow: TextOverflow.ellipsis,
                  ),
                )).toList(),
                if (dayEvents.length > 3)
                  Padding(
                    padding: EdgeInsets.symmetric(horizontal: 4),
                    child: Text(
                      '+${dayEvents.length - 3} more',
                      style: TextStyle(fontSize: 8, color: Colors.grey.shade600),
                    ),
                  ),
              ],
            ),
          ),
        ),
      );
    }

    return Column(
      children: [
        // Month header with day names
        Container(
          height: 40,
          decoration: BoxDecoration(
            border: Border(bottom: BorderSide(color: Colors.grey.shade300)),
          ),
          child: Row(
            children: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
                .map((day) => Expanded(
              child: Container(
                alignment: Alignment.center,
                decoration: BoxDecoration(
                  border: Border(right: BorderSide(color: Colors.grey.shade300, width: 0.5)),
                ),
                child: Text(
                  day,
                  style: TextStyle(fontSize: 12, fontWeight: FontWeight.bold),
                ),
              ),
            ))
                .toList(),
          ),
        ),
        // Month grid
        Expanded(
          child: GridView.count(
            crossAxisCount: 7,
            children: dayWidgets,
          ),
        ),
      ],
    );
  }

  Widget _buildCurrentView() {
    switch (_currentView) {
      case 'Day':
        return _buildDayView();
      case 'Week':
      case 'Work Week':
        return _buildWeekView();
      case 'Month':
        return _buildMonthView();
      case 'Timeline':
        return _buildDayView(); // For now, same as day view
      default:
        return _buildDayView();
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        color: Colors.grey.shade50,
        child: Column(
          children: [
            // Header with navigation and controls
            Container(
              padding: EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.white,
                border: Border(
                  bottom: BorderSide(color: Colors.grey.shade300, width: 1),
                ),
              ),
              child: Column(
                children: [
                  // Top row with New/Delete buttons
                  Row(
                    children: [
                      OutlinedButton.icon(
                        onPressed: _navigateToNewSchedulerEvent,
                        icon: Icon(Icons.add, color: Colors.orange.shade700, size: 20),
                        label: Text('New'),
                        style: OutlinedButton.styleFrom(
                          backgroundColor: Colors.white,
                          foregroundColor: Colors.black,
                          side: BorderSide(color: Colors.grey.shade300),
                        ),
                      ),
                      SizedBox(width: 8),
                      OutlinedButton.icon(
                        onPressed: _hasSelectedItems ? _deleteSelected : null,
                        icon: Icon(Icons.delete, color: Colors.red.shade400, size: 20),
                        label: Text('Delete'),
                        style: OutlinedButton.styleFrom(
                          foregroundColor: Colors.red.shade400,
                          side: BorderSide(color: Colors.grey.shade300),
                        ),
                      ),
                      Spacer(),
                      // Resources dropdown placeholder
                      Container(
                        padding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                        decoration: BoxDecoration(
                          border: Border.all(color: Colors.grey.shade300),
                          borderRadius: BorderRadius.circular(4),
                        ),
                        child: Row(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            Text('Resources', style: TextStyle(fontSize: 14)),
                            Icon(Icons.arrow_drop_down, color: Colors.grey.shade600),
                          ],
                        ),
                      ),
                    ],
                  ),
                  SizedBox(height: 16),
                  // Bottom row with navigation controls
                  LayoutBuilder(
                    builder: (context, constraints) {
                      final isSmallScreen = constraints.maxWidth < 600;
                      final buttonPadding = isSmallScreen
                          ? EdgeInsets.symmetric(horizontal: 8, vertical: 6)
                          : EdgeInsets.symmetric(horizontal: 12, vertical: 8);

                      return Container(
                        padding: EdgeInsets.symmetric(vertical: 8, horizontal: 16),
                        decoration: BoxDecoration(
                          border: Border(top: BorderSide(color: Colors.grey.shade300, width: 1)),
                        ),
                        child: Row(
                          children: [
                            // Today button - Always visible
                            if (isSmallScreen)
                              IconButton(
                                onPressed: _navigateToToday,
                                icon: Icon(Icons.today, size: 20),
                                padding: EdgeInsets.all(4),
                                tooltip: 'Today',
                              )
                            else
                              OutlinedButton(
                                onPressed: _navigateToToday,
                                child: Text('Today'),
                                style: OutlinedButton.styleFrom(
                                  padding: buttonPadding,
                                  side: BorderSide(color: Colors.grey.shade300),
                                  minimumSize: Size(0, 36),
                                ),
                              ),
                            SizedBox(width: isSmallScreen ? 8 : 16),

                            // Navigation arrows
                            IconButton(
                              onPressed: _navigatePrevious,
                              icon: Icon(Icons.chevron_left, size: 24),
                              padding: EdgeInsets.all(4),
                              constraints: BoxConstraints(minWidth: 36, minHeight: 36),
                            ),
                            IconButton(
                              onPressed: _navigateNext,
                              icon: Icon(Icons.chevron_right, size: 24),
                              padding: EdgeInsets.all(4),
                              constraints: BoxConstraints(minWidth: 36, minHeight: 36),
                            ),
                            SizedBox(width: isSmallScreen ? 8 : 16),

                            // Date display with picker
                            GestureDetector(
                              onTap: _showDatePicker,
                              child: Container(
                                padding: buttonPadding,
                                decoration: BoxDecoration(
                                  border: Border.all(color: Colors.grey.shade300),
                                  borderRadius: BorderRadius.circular(4),
                                ),
                                child: Row(
                                  mainAxisSize: MainAxisSize.min,
                                  children: [
                                    Text(
                                      _getDateDisplayText(),
                                      style: TextStyle(
                                        fontSize: isSmallScreen ? 12 : 14,
                                        fontWeight: FontWeight.w500,
                                      ),
                                    ),
                                    if (!isSmallScreen) ...[
                                      SizedBox(width: 8),
                                      Icon(Icons.arrow_drop_down, color: Colors.grey.shade600),
                                    ],
                                  ],
                                ),
                              ),
                            ),

                            Spacer(),

                            // View options - Responsive version
                            if (isSmallScreen)
                              PopupMenuButton<String>(
                                icon: Icon(Icons.more_vert, color: Colors.grey.shade700),
                                itemBuilder: (context) => _viewOptions.map((view) {
                                  return PopupMenuItem(
                                    value: view,
                                    child: Text(view),
                                  );
                                }).toList(),
                                onSelected: (view) {
                                  setState(() {
                                    _currentView = view;
                                  });
                                },
                              )
                            else
                              Row(
                                children: _viewOptions.map((view) {
                                  bool isSelected = _currentView == view;
                                  return Padding(
                                    padding: EdgeInsets.only(right: 4),
                                    child: ChoiceChip(
                                      label: Text(
                                        view,
                                        style: TextStyle(
                                          fontSize: 12,
                                          color: isSelected ? Colors.white : Colors.black,
                                        ),
                                      ),
                                      selected: isSelected,
                                      onSelected: (selected) {
                                        setState(() {
                                          _currentView = view;
                                        });
                                      },
                                      selectedColor: Colors.orange.shade700,
                                      backgroundColor: Colors.transparent,
                                      shape: StadiumBorder(
                                        side: BorderSide(
                                          color: isSelected ? Colors.orange.shade700 : Colors.grey.shade300,
                                        ),
                                      ),
                                      padding: buttonPadding,
                                    ),
                                  );
                                }).toList(),
                              ),
                          ],
                        ),
                      );
                    },
                  ),
                ],
              ),
            ),

            // Calendar view area
            Expanded(
              child: Container(
                margin: EdgeInsets.all(16),
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.grey.shade300),
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(4),
                ),
                child: _buildCurrentView(),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

//New Scheduler Event Page
class NewSchedulerEvent extends StatefulWidget {
  const NewSchedulerEvent({Key? key}) : super(key: key);

  @override
  State<NewSchedulerEvent> createState() => _NewSchedulerEventState();
}

class _NewSchedulerEventState extends State<NewSchedulerEvent> {
  final _formKey = GlobalKey<FormState>();
  final _subjectController = TextEditingController();
  final _locationController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _startDateController = TextEditingController();
  final _endDateController = TextEditingController();

  bool _isAllDay = false;
  String _selectedLabel = 'None';
  String _selectedStatus = 'Free';
  String _selectedRecurrence = 'Does not repeat';

  final List<String> _labelOptions = ['None', 'Work', 'Personal', 'Important', 'Meeting'];
  final List<String> _statusOptions = ['Free', 'Busy', 'Tentative', 'Out of Office'];
  final List<String> _recurrenceOptions = [
    'Does not repeat',
    'Daily',
    'Weekly',
    'Monthly',
    'Yearly'
  ];

  Future<void> _selectDateTime(BuildContext context, bool isStart) async {
    final initialDateTime = isStart
        ? _parseDateTime(_startDateController.text)
        : _parseDateTime(_endDateController.text);

    // First pick the date
    final pickedDate = await showDatePicker(
      context: context,
      initialDate: initialDateTime,
      firstDate: DateTime(2000),
      lastDate: DateTime(2100),
    );

    if (pickedDate == null) return;

    // Then pick the time
    final pickedTime = await showTimePicker(
      context: context,
      initialTime: TimeOfDay.fromDateTime(initialDateTime),
    );

    if (pickedTime == null) return;

    // Combine date and time
    final newDateTime = DateTime(
      pickedDate.year,
      pickedDate.month,
      pickedDate.day,
      pickedTime.hour,
      pickedTime.minute,
    );

    // Update the appropriate controller
    if (isStart) {
      _startDateController.text = _formatDateTime(newDateTime);

      // If this is the start time and it's after the current end time,
      // update the end time to be 1 hour after the new start time
      final endTime = _parseDateTime(_endDateController.text);
      if (newDateTime.isAfter(endTime)) {
        _endDateController.text = _formatDateTime(newDateTime.add(const Duration(hours: 1)));
      }
    } else {
      _endDateController.text = _formatDateTime(newDateTime);

      // If this is the end time and it's before the current start time,
      // update the start time to be 1 hour before the new end time
      final startTime = _parseDateTime(_startDateController.text);
      if (newDateTime.isBefore(startTime)) {
        _startDateController.text = _formatDateTime(newDateTime.subtract(const Duration(hours: 1)));
      }
    }
  }

  void _saveEvent({bool keepOpen = false}) {
    if (_formKey.currentState!.validate()) {
      // Parse start and end times from controllers
      final startTime = _parseDateTime(_startDateController.text);
      final endTime = _parseDateTime(_endDateController.text);

      // Prepare the data to return
      final eventData = {
        'title': _subjectController.text,
        'description': _descriptionController.text,
        'startTime': startTime,
        'endTime': endTime,
        'location': _locationController.text,
        'isAllDay': _isAllDay,
        'label': _selectedLabel,
        'status': _selectedStatus,
        'recurrence': _selectedRecurrence,
        'keepOpen': keepOpen,
      };

      Navigator.of(context).pop(eventData);
    }
  }

  DateTime _parseDateTime(String dateTimeString) {
    try {
      // Try parsing with AM/PM format first
      final parts = dateTimeString.split(' ');
      if (parts.length >= 3) {
        final dateParts = parts[0].split('/');
        final timeParts = parts[1].split(':');
        final period = parts[2];

        int hour = int.parse(timeParts[0]);
        if (period == 'PM' && hour != 12) {
          hour += 12;
        } else if (period == 'AM' && hour == 12) {
          hour = 0;
        }

        return DateTime(
          int.parse(dateParts[2]),
          int.parse(dateParts[0]),
          int.parse(dateParts[1]),
          hour,
          int.parse(timeParts[1]),
        );
      } else {
        // Fallback for 24-hour format
        final dateTime = DateTime.parse(dateTimeString);
        return dateTime;
      }
    } catch (e) {
      // If parsing fails, return current time
      return DateTime.now();
    }
  }

  @override
  void initState() {
    super.initState();
    // Initialize with current date/time
    final now = DateTime.now();
    final startTime = DateTime(now.year, now.month, now.day, now.hour + 1, 0);
    final endTime = startTime.add(const Duration(hours: 1));

    _startDateController.text = _formatDateTime(startTime);
    _endDateController.text = _formatDateTime(endTime);
  }

  String _formatDateTime(DateTime dateTime) {
    return '${dateTime.month}/${dateTime.day}/${dateTime.year} ${_formatTime(dateTime)}';
  }

  String _formatTime(DateTime dateTime) {
    final hour = dateTime.hour == 0 ? 12 : (dateTime.hour > 12 ? dateTime.hour - 12 : dateTime.hour);
    final minute = dateTime.minute.toString().padLeft(2, '0');
    final period = dateTime.hour < 12 ? 'AM' : 'PM';
    return '$hour:$minute $period';
  }

  @override
  void dispose() {
    _subjectController.dispose();
    _locationController.dispose();
    _descriptionController.dispose();
    _startDateController.dispose();
    _endDateController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Dialog(
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
      child: Container(
        width: MediaQuery.of(context).size.width * 0.9,
        height: MediaQuery.of(context).size.height * 0.85,
        constraints: const BoxConstraints(
          maxWidth: 600,
          maxHeight: 700,
        ),
        child: Column(
          children: [
            // Header
            Container(
              padding: const EdgeInsets.all(16),
              decoration: const BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.only(
                  topLeft: Radius.circular(8),
                  topRight: Radius.circular(8),
                ),
              ),
              child: Row(
                children: [
                  const Icon(Icons.calendar_today, color: Colors.red, size: 20),
                  const SizedBox(width: 8),
                  const Text(
                    'Scheduler Event',
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                  const Spacer(),
                  IconButton(
                    onPressed: () => Navigator.of(context).pop(),
                    icon: const Icon(Icons.close, size: 20),
                    padding: EdgeInsets.zero,
                    constraints: const BoxConstraints(),
                  ),
                ],
              ),
            ),

            const Divider(height: 1),

            // Form Content
            Expanded(
              child: SingleChildScrollView(
                padding: const EdgeInsets.all(16),
                child: Form(
                  key: _formKey,
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // Subject
                      const Text('Subject', style: TextStyle(fontSize: 14)),
                      const SizedBox(height: 4),
                      TextFormField(
                        controller: _subjectController,
                        decoration: const InputDecoration(
                          border: OutlineInputBorder(),
                          contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                        ),
                        validator: (value) {
                          if (value == null || value.isEmpty) {
                            return 'Subject is required';
                          }
                          return null;
                        },
                      ),

                      const SizedBox(height: 16),

                      // All Day Checkbox
                      Row(
                        children: [
                          Checkbox(
                            value: _isAllDay,
                            onChanged: (value) {
                              setState(() {
                                _isAllDay = value ?? false;
                              });
                            },
                          ),
                          const Text('All Day', style: TextStyle(fontSize: 14)),
                        ],
                      ),

                      const SizedBox(height: 16),

                      // Start and End Date/Time
                      Row(
                        children: [
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                const Text('Start', style: TextStyle(fontSize: 14)),
                                const SizedBox(height: 4),
                                TextFormField(
                                  controller: _startDateController,
                                  decoration: const InputDecoration(
                                    border: OutlineInputBorder(),
                                    contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                                    suffixIcon: Icon(Icons.calendar_today, size: 16),
                                  ),
                                  readOnly: true,
                                  onTap: () => _selectDateTime(context, true),
                                ),
                              ],
                            ),
                          ),
                          const SizedBox(width: 16),
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                const Text('End', style: TextStyle(fontSize: 14)),
                                const SizedBox(height: 4),
                                TextFormField(
                                  controller: _endDateController,
                                  decoration: const InputDecoration(
                                    border: OutlineInputBorder(),
                                    contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                                    suffixIcon: Icon(Icons.calendar_today, size: 16),
                                  ),
                                  readOnly: true,
                                  onTap: () => _selectDateTime(context, false),
                                ),
                              ],
                            ),
                          ),
                        ],
                      ),

                      const SizedBox(height: 16),

                      // Label and Status
                      Row(
                        children: [
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                const Text('Label', style: TextStyle(fontSize: 14)),
                                const SizedBox(height: 4),
                                DropdownButtonFormField<String>(
                                  value: _selectedLabel,
                                  decoration: const InputDecoration(
                                    border: OutlineInputBorder(),
                                    contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                                  ),
                                  items: _labelOptions.map((String value) {
                                    return DropdownMenuItem<String>(
                                      value: value,
                                      child: Text(value),
                                    );
                                  }).toList(),
                                  onChanged: (String? newValue) {
                                    setState(() {
                                      _selectedLabel = newValue!;
                                    });
                                  },
                                ),
                              ],
                            ),
                          ),
                          const SizedBox(width: 16),
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                const Text('Status', style: TextStyle(fontSize: 14)),
                                const SizedBox(height: 4),
                                DropdownButtonFormField<String>(
                                  value: _selectedStatus,
                                  decoration: const InputDecoration(
                                    border: OutlineInputBorder(),
                                    contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                                  ),
                                  items: _statusOptions.map((String value) {
                                    return DropdownMenuItem<String>(
                                      value: value,
                                      child: Text(value),
                                    );
                                  }).toList(),
                                  onChanged: (String? newValue) {
                                    setState(() {
                                      _selectedStatus = newValue!;
                                    });
                                  },
                                ),
                              ],
                            ),
                          ),
                        ],
                      ),

                      const SizedBox(height: 16),

                      // Location
                      const Text('Location', style: TextStyle(fontSize: 14)),
                      const SizedBox(height: 4),
                      TextFormField(
                        controller: _locationController,
                        decoration: const InputDecoration(
                          border: OutlineInputBorder(),
                          contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                        ),
                      ),

                      const SizedBox(height: 16),

                      // Description
                      const Text('Description', style: TextStyle(fontSize: 14)),
                      const SizedBox(height: 4),
                      TextFormField(
                        controller: _descriptionController,
                        maxLines: 4,
                        decoration: const InputDecoration(
                          border: OutlineInputBorder(),
                          contentPadding: EdgeInsets.all(12),
                        ),
                      ),

                      const SizedBox(height: 16),

                      // Recurrence
                      const Text('Recurrence', style: TextStyle(fontSize: 14)),
                      const SizedBox(height: 4),
                      DropdownButtonFormField<String>(
                        value: _selectedRecurrence,
                        decoration: const InputDecoration(
                          border: OutlineInputBorder(),
                          contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                        ),
                        items: _recurrenceOptions.map((String value) {
                          return DropdownMenuItem<String>(
                            value: value,
                            child: Text(value),
                          );
                        }).toList(),
                        onChanged: (String? newValue) {
                          setState(() {
                            _selectedRecurrence = newValue!;
                          });
                        },
                      ),

                      const SizedBox(height: 16),

                      // Resources Section (collapsed)
                      ExpansionTile(
                        leading: const Icon(Icons.people, color: Colors.orange, size: 20),
                        title: const Text('Resources', style: TextStyle(fontSize: 14)),
                        initiallyExpanded: false,
                        children: [
                          Container(
                            padding: const EdgeInsets.all(16),
                            child: const Text(
                              'No resources selected',
                              style: TextStyle(color: Colors.grey),
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ),
            ),

            // Footer Buttons
            Container(
              padding: const EdgeInsets.all(16),
              decoration: const BoxDecoration(
                border: Border(top: BorderSide(color: Colors.grey, width: 0.5)),
              ),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.end,
                children: [
                  TextButton(
                    onPressed: () => Navigator.of(context).pop(),
                    child: const Text('Cancel'),
                  ),
                  const SizedBox(width: 8),
                  ElevatedButton.icon(
                    onPressed: () => _saveEvent(keepOpen: true),
                    icon: const Icon(Icons.add, size: 16),
                    label: const Text('Save and New'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.orange,
                      foregroundColor: Colors.white,
                    ),
                  ),
                  const SizedBox(width: 8),
                  ElevatedButton(
                    onPressed: () => _saveEvent(),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.orange,
                      foregroundColor: Colors.white,
                    ),
                    child: const Text('Save'),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// Extension method to show the dialog
extension ShowNewSchedulerEvent on BuildContext {
  void showNewSchedulerEvent() {
    showDialog(
      context: this,
      builder: (context) => const NewSchedulerEvent(),
    );
  }
}

// My Details Page
class MyDetailsPage extends StatefulWidget {
  final Map<String, dynamic>? existingUser;
  final Function(Map<String, dynamic>) onUserSaved;
  final bool isNewUser;
  final String? currentUsername;

  const MyDetailsPage({
    Key? key,
    this.existingUser,
    required this.onUserSaved,
    this.isNewUser = false,
    this.currentUsername,
  }) : super(key: key);

  @override
  _MyDetailsPageState createState() => _MyDetailsPageState();
}

class _MyDetailsPageState extends State<MyDetailsPage> {
  final _formKey = GlobalKey<FormState>();

  // Form controllers
  late TextEditingController _firstnameController;
  late TextEditingController _lastnameController;
  late TextEditingController _fullNameController;
  late TextEditingController _divisionController;
  late TextEditingController _unitController;
  late TextEditingController _emailController;
  late TextEditingController _userNameController;

  // Form state
  bool _forcePasswordChange = false;
  bool _isActive = true;

  // Dropdown options
  final List<String> _divisionOptions = [
    'Information and Communications Technology',
    'NA',
    'Technology Branch',
    'Telecommunications',
  ];

  final List<String> _unitOptions = [
    'Data and Quality',
    'Deputy Superintendent of Police Office',
    'Director Office',
  ];

  @override
  void initState() {
    super.initState();
    _initializeControllers();
  }

  void _initializeControllers() {
    final user = widget.existingUser;

    _firstnameController = TextEditingController(text: user?['firstname'] ?? '');
    _lastnameController = TextEditingController(text: user?['lastname'] ?? '');
    _fullNameController = TextEditingController(text: user?['fullname'] ?? '');
    _divisionController = TextEditingController(text: user?['division'] ?? '');
    _unitController = TextEditingController(text: user?['unit'] ?? '');
    _emailController = TextEditingController(text: user?['email'] ?? '');
    _userNameController = TextEditingController(text: user?['username'] ?? widget.currentUsername ?? '');

    _forcePasswordChange = user?['forcePasswordChange'] ?? false;
    _isActive = user?['isActive'] ?? true;

    // Auto-generate full name when first/last name changes
    _firstnameController.addListener(_updateFullName);
    _lastnameController.addListener(_updateFullName);
  }

  void _updateFullName() {
    final firstName = _firstnameController.text.trim();
    final lastName = _lastnameController.text.trim();
    _fullNameController.text = '$firstName $lastName'.trim();
  }

  @override
  void dispose() {
    _firstnameController.dispose();
    _lastnameController.dispose();
    _fullNameController.dispose();
    _divisionController.dispose();
    _unitController.dispose();
    _emailController.dispose();
    _userNameController.dispose();
    super.dispose();
  }

  void _saveUser({bool saveAndNew = false}) {
    if (_formKey.currentState!.validate()) {
      final userData = {
        'selected': false,
        'firstname': _firstnameController.text.trim(),
        'lastname': _lastnameController.text.trim(),
        'fullname': _fullNameController.text.trim(),
        'division': _divisionController.text.trim(),
        'unit': _unitController.text.trim(),
        'email': _emailController.text.trim(),
        'username': _userNameController.text.trim(),
        'forcePasswordChange': _forcePasswordChange,
        'isActive': _isActive,
      };

      // Call the callback to save the user data
      widget.onUserSaved(userData);

      // Show success message
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('User saved successfully'),
          backgroundColor: Colors.green,
          duration: Duration(seconds: 2),
        ),
      );

      if (saveAndNew) {
        // Clear the form for new entry
        _clearForm();
      }
    }
  }

  void _clearForm() {
    _formKey.currentState!.reset();
    _firstnameController.clear();
    _lastnameController.clear();
    _fullNameController.clear();
    _divisionController.clear();
    _unitController.clear();
    _emailController.clear();
    _userNameController.clear();

    setState(() {
      _forcePasswordChange = false;
      _isActive = true;
    });
  }

  void _showChangePasswordDialog() {
    final oldPasswordController = TextEditingController();
    final newPasswordController = TextEditingController();
    final confirmPasswordController = TextEditingController();
    final passwordFormKey = GlobalKey<FormState>();

    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return Dialog(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8),
          ),
          child: Container(
            width: 400,
            padding: EdgeInsets.all(24),
            child: Form(
              key: passwordFormKey,
              child: Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Header with close button
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(
                        'Change Password',
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.w600,
                          color: Colors.black87,
                        ),
                      ),
                      IconButton(
                        onPressed: () => Navigator.of(context).pop(),
                        icon: Icon(Icons.close, color: Colors.grey.shade600),
                        padding: EdgeInsets.zero,
                        constraints: BoxConstraints(),
                      ),
                    ],
                  ),
                  SizedBox(height: 16),

                  // Description text
                  Text(
                    'To change your password, please enter your old and new passwords in the text fields below.',
                    style: TextStyle(
                      fontSize: 14,
                      color: Colors.grey.shade700,
                    ),
                  ),
                  SizedBox(height: 24),

                  // Old Password field
                  Text(
                    'Old Password',
                    style: TextStyle(
                      fontSize: 14,
                      fontWeight: FontWeight.w500,
                      color: Colors.black87,
                    ),
                  ),
                  SizedBox(height: 8),
                  TextFormField(
                    controller: oldPasswordController,
                    obscureText: true,
                    decoration: InputDecoration(
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(4),
                        borderSide: BorderSide(color: Colors.grey.shade400),
                      ),
                      enabledBorder: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(4),
                        borderSide: BorderSide(color: Colors.grey.shade400),
                      ),
                      focusedBorder: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(4),
                        borderSide: BorderSide(color: Colors.orange.shade700, width: 2),
                      ),
                      contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 12),
                    ),
                    validator: (value) {
                      if (value == null || value.isEmpty) {
                        return 'Old password is required';
                      }
                      return null;
                    },
                  ),
                  SizedBox(height: 16),

                  // New Password field
                  Text(
                    'New Password',
                    style: TextStyle(
                      fontSize: 14,
                      fontWeight: FontWeight.w500,
                      color: Colors.black87,
                    ),
                  ),
                  SizedBox(height: 8),
                  TextFormField(
                    controller: newPasswordController,
                    obscureText: true,
                    decoration: InputDecoration(
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(4),
                        borderSide: BorderSide(color: Colors.grey.shade400),
                      ),
                      enabledBorder: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(4),
                        borderSide: BorderSide(color: Colors.grey.shade400),
                      ),
                      focusedBorder: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(4),
                        borderSide: BorderSide(color: Colors.orange.shade700, width: 2),
                      ),
                      contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 12),
                    ),
                    validator: (value) {
                      if (value == null || value.isEmpty) {
                        return 'New password is required';
                      }
                      if (value.length < 6) {
                        return 'Password must be at least 6 characters';
                      }
                      return null;
                    },
                  ),
                  SizedBox(height: 16),

                  // Confirm Password field
                  Text(
                    'Confirm Password',
                    style: TextStyle(
                      fontSize: 14,
                      fontWeight: FontWeight.w500,
                      color: Colors.black87,
                    ),
                  ),
                  SizedBox(height: 8),
                  TextFormField(
                    controller: confirmPasswordController,
                    obscureText: true,
                    decoration: InputDecoration(
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(4),
                        borderSide: BorderSide(color: Colors.grey.shade400),
                      ),
                      enabledBorder: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(4),
                        borderSide: BorderSide(color: Colors.grey.shade400),
                      ),
                      focusedBorder: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(4),
                        borderSide: BorderSide(color: Colors.orange.shade700, width: 2),
                      ),
                      contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 12),
                    ),
                    validator: (value) {
                      if (value == null || value.isEmpty) {
                        return 'Please confirm your password';
                      }
                      if (value != newPasswordController.text) {
                        return 'Passwords do not match';
                      }
                      return null;
                    },
                  ),
                  SizedBox(height: 32),

                  // Action buttons
                  Row(
                    mainAxisAlignment: MainAxisAlignment.end,
                    children: [
                      OutlinedButton(
                        onPressed: () => Navigator.of(context).pop(),
                        child: Text('Cancel'),
                        style: OutlinedButton.styleFrom(
                          foregroundColor: Colors.grey.shade700,
                          side: BorderSide(color: Colors.grey.shade400),
                          padding: EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                        ),
                      ),
                      SizedBox(width: 12),
                      ElevatedButton(
                        onPressed: () {
                          if (passwordFormKey.currentState!.validate()) {
                            // Handle password change logic here
                            // You can add your password change API call here

                            Navigator.of(context).pop();

                            // Show success message
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(
                                content: Text('Password changed successfully'),
                                backgroundColor: Colors.green,
                                duration: Duration(seconds: 2),
                              ),
                            );
                          }
                        },
                        child: Text('OK'),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.orange.shade700,
                          foregroundColor: Colors.white,
                          padding: EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildTextField({
    required String label,
    required TextEditingController controller,
    bool required = false,
    String? Function(String?)? validator,
    bool readOnly = false,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        RichText(
          text: TextSpan(
            text: label,
            style: TextStyle(
              color: Colors.black87,
              fontSize: 14,
              fontWeight: FontWeight.w500,
            ),
            children: required
                ? [
              TextSpan(
                text: '*',
                style: TextStyle(color: Colors.red),
              ),
            ]
                : [],
          ),
        ),
        SizedBox(height: 4),
        TextFormField(
          controller: controller,
          readOnly: readOnly,
          decoration: InputDecoration(
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(4),
              borderSide: BorderSide(color: Colors.grey.shade400),
            ),
            enabledBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(4),
              borderSide: BorderSide(color: Colors.grey.shade400),
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(4),
              borderSide: BorderSide(color: Colors.orange.shade700, width: 2),
            ),
            filled: readOnly,
            fillColor: readOnly ? Colors.grey.shade100 : Colors.white,
            contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
            suffixIcon: readOnly ? null : IconButton(
              icon: Icon(Icons.clear, size: 18, color: Colors.grey.shade600),
              onPressed: () => controller.clear(),
            ),
          ),
          validator: validator,
        ),
      ],
    );
  }

  Widget _buildDropdownField({
    required String label,
    required TextEditingController controller,
    required List<String> options,
    bool required = false,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        RichText(
          text: TextSpan(
            text: label,
            style: TextStyle(
              color: Colors.black87,
              fontSize: 14,
              fontWeight: FontWeight.w500,
            ),
            children: required
                ? [
              TextSpan(
                text: '*',
                style: TextStyle(color: Colors.red),
              ),
            ]
                : [],
          ),
        ),
        SizedBox(height: 4),
        Row(
          children: [
            Expanded(
              child: TextFormField(
                controller: controller,
                readOnly: true,
                decoration: InputDecoration(
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(4),
                    borderSide: BorderSide(color: Colors.grey.shade400),
                  ),
                  enabledBorder: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(4),
                    borderSide: BorderSide(color: Colors.grey.shade400),
                  ),
                  focusedBorder: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(4),
                    borderSide: BorderSide(color: Colors.orange.shade700, width: 2),
                  ),
                  contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                  suffixIcon: PopupMenuButton<String>(
                    icon: Icon(Icons.arrow_drop_down, size: 18, color: Colors.grey.shade600),
                    onSelected: (value) {
                      controller.text = value;
                    },
                    itemBuilder: (context) {
                      return options.map((option) {
                        return PopupMenuItem<String>(
                          value: option,
                          child: Text(option),
                        );
                      }).toList();
                    },
                  ),
                ),
                validator: required
                    ? (value) {
                  if (value == null || value.isEmpty) {
                    return '$label is required';
                  }
                  return null;
                }
                    : null,
              ),
            ),
          ],
        ),
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey.shade50,
      appBar: AppBar(
        backgroundColor: Colors.white,
        elevation: 1,
        title: Text(
          'Application User',
          style: TextStyle(color: Colors.black87, fontSize: 18),
        ),
        actions: [
          IconButton(
            onPressed: () {
              // Previous record
            },
            icon: Icon(Icons.chevron_left, color: Colors.black87),
          ),
          IconButton(
            onPressed: () {
              // Next record
            },
            icon: Icon(Icons.chevron_right, color: Colors.black87),
          ),
          IconButton(
            onPressed: () {
              // Refresh
            },
            icon: Icon(Icons.refresh, color: Colors.black87),
          ),
          SizedBox(width: 8),
        ],
      ),
      body: Column(
        children: [
          // Header with buttons
          Container(
            padding: EdgeInsets.symmetric(vertical: 8, horizontal: 16),
            decoration: BoxDecoration(
              color: Colors.white,
              border: Border(
                bottom: BorderSide(color: Colors.grey.shade300, width: 1),
              ),
            ),
            child: LayoutBuilder(
              builder: (context, constraints) {
                // Stack vertically on small screens, horizontally on larger screens
                if (constraints.maxWidth < 600) {
                  return Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Row(
                        children: [
                          Expanded(
                            child: OutlinedButton.icon(
                              onPressed: () {
                                // Delete functionality
                              },
                              icon: Icon(Icons.delete, color: Colors.red.shade400, size: 18),
                              label: Text('Delete', style: TextStyle(fontSize:12)),
                              style: OutlinedButton.styleFrom(
                                foregroundColor: Colors.red.shade400,
                                side: BorderSide(color: Colors.grey.shade300),
                                padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                              ),
                            ),
                          ),
                          SizedBox(width: 6),
                          Expanded(
                            child: OutlinedButton.icon(
                              onPressed: _showChangePasswordDialog,
                              icon: Icon(Icons.lock, color: Colors.orange.shade700, size: 18),
                              label: Text('Change Password',  style: TextStyle(fontSize:12)),
                              style: OutlinedButton.styleFrom(
                                backgroundColor: Colors.white,
                                foregroundColor: Colors.black,
                                side: BorderSide(color: Colors.grey.shade300),
                                padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                              ),
                            ),
                          ),
                        ],
                      ),
                      SizedBox(height: 6),
                      Row(
                        children: [
                          Expanded(
                            child: ElevatedButton.icon(
                              onPressed: () => _saveUser(saveAndNew: true),
                              icon: Icon(Icons.save, color: Colors.orange.shade700, size: 18),
                              label: Text('Save and New', style: TextStyle(fontSize: 12)),
                              style: ElevatedButton.styleFrom(
                                foregroundColor: Colors.orange.shade700,
                                side: BorderSide(color: Colors.orange.shade700),
                                padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                              ),
                            ),
                          ),
                          SizedBox(width: 6),
                          Expanded(
                            child: ElevatedButton.icon(
                              onPressed: () => _saveUser(),
                              icon: Icon(Icons.save, color: Colors.white, size: 18),
                              label: Text('Save', style: TextStyle(fontSize: 12)),
                              style: ElevatedButton.styleFrom(
                                backgroundColor: Colors.orange.shade700,
                                foregroundColor: Colors.white,
                                padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                              ),
                            ),
                          ),
                        ],
                      ),
                    ],
                  );
                } else {
                  return SingleChildScrollView(
                    scrollDirection: Axis.horizontal,
                    child: Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        OutlinedButton.icon(
                          onPressed: () {
                            // Delete functionality
                          },
                          icon: Icon(Icons.delete, color: Colors.red.shade400, size: 20),
                          label: Text('Delete'),
                          style: OutlinedButton.styleFrom(
                            foregroundColor: Colors.red,
                            side: BorderSide(color: Colors.grey.shade300),
                          ),
                        ),
                        SizedBox(width: 8),
                        OutlinedButton.icon(
                          onPressed: _showChangePasswordDialog,
                          icon: Icon(Icons.lock, color: Colors.orange.shade700, size: 20),
                          label: Text('Change My Password'),
                          style: OutlinedButton.styleFrom(
                            backgroundColor: Colors.white,
                            foregroundColor: Colors.black,
                            side: BorderSide(color: Colors.grey.shade300),
                          ),
                        ),
                        SizedBox(width: 8),
                        ElevatedButton.icon(
                          onPressed: () => _saveUser(saveAndNew: true),
                          icon: Icon(Icons.save, color: Colors.orange.shade700, size: 20),
                          label: Text('Save and New'),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.orange.shade700,
                            side: BorderSide(color: Colors.orange.shade700),
                          ),
                        ),
                        SizedBox(width: 8),
                        ElevatedButton.icon(
                          onPressed: () => _saveUser(),
                          icon: Icon(Icons.save, color: Colors.white, size: 20),
                          label: Text('Save'),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.orange.shade700,
                            foregroundColor: Colors.white,
                          ),
                        ),
                      ],
                    ),
                  );
                }
              },
            ),
          ),

          // Form content
          Expanded(
            child: SingleChildScrollView(
              padding: EdgeInsets.all(16),
              child: Container(
                constraints: BoxConstraints(
                  minWidth: double.infinity,
                ),
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.grey.shade300),
                ),
                child: Padding(
                  padding: EdgeInsets.all(24),
                  child: Form(
                    key: _formKey,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Application User',
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.w600,
                            color: Colors.black87,
                          ),
                        ),
                        SizedBox(height: 24),

                        // First row - Firstname and Lastname
                        Row(
                          children: [
                            Expanded(
                              child: _buildTextField(
                                label: 'Firstname',
                                controller: _firstnameController,
                                required: true,
                                validator: (value) {
                                  if (value == null || value.isEmpty) {
                                    return 'Firstname is required';
                                  }
                                  return null;
                                },
                              ),
                            ),
                            SizedBox(width: 16),
                            Expanded(
                              child: _buildTextField(
                                label: 'Lastname',
                                controller: _lastnameController,
                                required: true,
                                validator: (value) {
                                  if (value == null || value.isEmpty) {
                                    return 'Lastname is required';
                                  }
                                  return null;
                                },
                              ),
                            ),
                          ],
                        ),
                        SizedBox(height: 16),

                        // Full Name (read-only)
                        _buildTextField(
                          label: 'Full Name',
                          controller: _fullNameController,
                          readOnly: true,
                        ),
                        SizedBox(height: 16),

                        // Division and Unit
                        Row(
                          children: [
                            Expanded(
                              child: _buildDropdownField(
                                label: 'Division',
                                controller: _divisionController,
                                options: _divisionOptions,
                                required: true,
                              ),
                            ),
                            SizedBox(width: 16),
                            Expanded(
                              child: _buildDropdownField(
                                label: 'Unit',
                                controller: _unitController,
                                options: _unitOptions,
                                required: true,
                              ),
                            ),
                          ],
                        ),
                        SizedBox(height: 16),

                        // Email
                        _buildTextField(
                          label: 'Email',
                          controller: _emailController,
                          required: true,
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Email is required';
                            }
                            if (!RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$').hasMatch(value)) {
                              return 'Please enter a valid email address';
                            }
                            return null;
                          },
                        ),
                        SizedBox(height: 16),

                        // User Name
                        _buildTextField(
                          label: 'User Name',
                          controller: _userNameController,
                          required: true,
                          readOnly: widget.currentUsername != null,
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'User Name is required';
                            }
                            return null;
                          },
                        ),
                        SizedBox(height: 24),

                        // Checkboxes
                        Row(
                          children: [
                            Expanded(
                              child: Row(
                                children: [
                                  Checkbox(
                                    value: _forcePasswordChange,
                                    onChanged: (value) {
                                      setState(() {
                                        _forcePasswordChange = value ?? false;
                                      });
                                    },
                                  ),
                                  Text(
                                    'Force Password Change',
                                    style: TextStyle(fontSize: 14),
                                  ),
                                ],
                              ),
                            ),
                            Expanded(
                              child: Row(
                                children: [
                                  Checkbox(
                                    value: _isActive,
                                    onChanged: (value) {
                                      setState(() {
                                        _isActive = value ?? true;
                                      });
                                    },
                                  ),
                                  Text(
                                    'Is Active',
                                    style: TextStyle(fontSize: 14),
                                  ),
                                ],
                              ),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}

// Role Page
class RolePage extends StatefulWidget {
  @override
  _RolePageState createState() => _RolePageState();
}

class _RolePageState extends State<RolePage> {
  final ScrollController _horizontalScrollController = ScrollController();
  final TextEditingController _searchController = TextEditingController();

  // Column widths - can be adjusted
  Map<String, double> columnWidths = {
    'Checkbox': 60,
    'Name': 200,
    'Is Administrative': 150,
    'Can Edit Model': 150,
  };

  // Map column keys to data field names
  Map<String, String> columnToDataField = {
    'Name': 'name',
    'Is Administrative': 'isAdministrative',
    'Can Edit Model': 'canEditModel',
  };

  // Sorting state
  String _sortColumn = '';
  bool _sortAscending = true;

  // Pagination state
  int _currentPage = 1;
  int _pageSize = 20;
  final List<int> _pageSizeOptions = [10, 20, 50, 100];

  // Sample data structure
  List<Map<String, dynamic>> _rolesData = [
    {
      'selected': false,
      'name': 'Administrators',
      'isAdministrative': true,
      'canEditModel': false,
    },
    {
      'selected': false,
      'name': 'Commanding Officer',
      'isAdministrative': false,
      'canEditModel': false,
    },
    {
      'selected': false,
      'name': 'Default',
      'isAdministrative': false,
      'canEditModel': false,
    },
    {
      'selected': false,
      'name': 'Manager',
      'isAdministrative': true,
      'canEditModel': false,
    },
    {
      'selected': false,
      'name': 'Staff',
      'isAdministrative': false,
      'canEditModel': false,
    },
    {
      'selected': false,
      'name': 'System Administration',
      'isAdministrative': false,
      'canEditModel': false,
    },
    {
      'selected': false,
      'name': 'Technology Branch',
      'isAdministrative': false,
      'canEditModel': false,
    },
    {
      'selected': false,
      'name': 'Super Admin',
      'isAdministrative': true,
      'canEditModel': true,
    },
    {
      'selected': false,
      'name': 'Senior Officer',
      'isAdministrative': false,
      'canEditModel': false,
    },
    {
      'selected': false,
      'name': 'Data Analyst',
      'isAdministrative': false,
      'canEditModel': true,
    },
    {
      'selected': false,
      'name': 'IT Support',
      'isAdministrative': false,
      'canEditModel': false,
    },
    {
      'selected': false,
      'name': 'Finance Officer',
      'isAdministrative': false,
      'canEditModel': false,
    },
  ];

  bool _selectAll = false;

  @override
  void dispose() {
    _horizontalScrollController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  List<Map<String, dynamic>> get _filteredData {
    var filtered = _rolesData;

    // Apply search filter
    if (_searchController.text.isNotEmpty) {
      filtered = filtered.where((role) {
        return role.values.any((value) =>
            value.toString().toLowerCase().contains(_searchController.text.toLowerCase()));
      }).toList();
    }

    // Apply sorting
    if (_sortColumn.isNotEmpty) {
      String dataField = columnToDataField[_sortColumn] ?? _sortColumn;
      filtered.sort((a, b) {
        var aValue = a[dataField] ?? '';
        var bValue = b[dataField] ?? '';

        // Handle boolean sorting
        if (aValue is bool && bValue is bool) {
          int comparison = aValue == bValue ? 0 : (aValue ? 1 : -1);
          return _sortAscending ? comparison : -comparison;
        }

        int comparison = aValue.toString().compareTo(bValue.toString());
        return _sortAscending ? comparison : -comparison;
      });
    }

    return filtered;
  }

  List<Map<String, dynamic>> get _paginatedData {
    var filtered = _filteredData;
    int startIndex = (_currentPage - 1) * _pageSize;
    int endIndex = startIndex + _pageSize;

    if (startIndex >= filtered.length) return [];
    if (endIndex > filtered.length) endIndex = filtered.length;

    return filtered.sublist(startIndex, endIndex);
  }

  int get _totalPages {
    return (_filteredData.length / _pageSize).ceil();
  }

  void _refreshData() {
    setState(() {
      // Unselect all checkboxes
      for (var role in _rolesData) {
        role['selected'] = false;
      }
      _selectAll = false;
      // add actual data refresh logic here
    });
  }

  void _navigateToNewRolePage() async {
    final result = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => NewRolePage(),
      ),
    );

    if (result != null) {
      setState(() {
        _rolesData.add({
          'selected': false,
          'name': result['roleName'],
          'isAdministrative': result['isAdministrative'],
          'canEditModel': result['canEditModel'],
        });
      });

      // If keepOpen flag is set, reopen the page
      if (result['keepOpen'] == true) {
        _navigateToNewRolePage();
      }
    }
  }

  void _toggleSelectAll() {
    setState(() {
      _selectAll = !_selectAll;
      for (var role in _paginatedData) {
        role['selected'] = _selectAll;
      }
    });
  }

  void _deleteSelected() {
    setState(() {
      _rolesData.removeWhere((role) => role['selected'] == true);
      _selectAll = false;
      // Adjust current page if needed
      if (_currentPage > _totalPages && _totalPages > 0) {
        _currentPage = _totalPages;
      }
    });
  }

  void _exportData() {
    // Add export functionality here
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Export functionality would be implemented here')),
    );
  }

  void _showFilterDialog(String columnKey) {
    // Add filter dialog functionality here
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Filter ${columnKey}'),
        content: Text('Filter functionality would be implemented here'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Close'),
          ),
        ],
      ),
    );
  }

  void _sortData(String columnKey) {
    setState(() {
      if (_sortColumn == columnKey) {
        _sortAscending = !_sortAscending;
      } else {
        _sortColumn = columnKey;
        _sortAscending = true;
      }
    });
  }

  bool _hasSelectedItems() {
    return _rolesData.any((role) => role['selected'] == true);
  }

  Widget _buildResizableColumn({
    required String title,
    required String columnKey,
    required bool isLast,
    Widget? customContent,
  }) {
    return Container(
      width: columnWidths[columnKey],
      child: Row(
        children: [
          Expanded(
            child: Container(
              height: 40, // Fixed height for consistent checkbox alignment
              padding: EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.grey.shade200,
                border: Border(
                  right: BorderSide(color: Colors.grey.shade400),
                  bottom: BorderSide(color: Colors.grey.shade400),
                ),
              ),
              child: customContent ??
                  Row(
                    children: [
                      Expanded(
                        child: Text(
                          title,
                          style: TextStyle(fontWeight: FontWeight.bold, fontSize: 12),
                          overflow: TextOverflow.ellipsis,
                        ),
                      ),
                      if (columnKey != 'Checkbox') ...[
                        GestureDetector(
                          onTap: () => _sortData(columnKey),
                          child: Icon(
                            _sortColumn == columnKey
                                ? (_sortAscending ? Icons.arrow_upward : Icons.arrow_downward)
                                : Icons.unfold_more,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                        ),
                        SizedBox(width: 4),
                        GestureDetector(
                          onTap: () => _showFilterDialog(columnKey),
                          child: Icon(
                            Icons.filter_alt_outlined,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                        ),
                      ],
                    ],
                  ),
            ),
          ),
          if (!isLast)
            GestureDetector(
              onPanUpdate: (details) {
                setState(() {
                  columnWidths[columnKey] =
                      (columnWidths[columnKey]! + details.delta.dx).clamp(60.0, 400.0);
                });
              },
              child: Container(
                width: 4,
                height: 40,
                color: Colors.grey.shade400,
                child: MouseRegion(
                  cursor: SystemMouseCursors.resizeColumn,
                  child: Container(),
                ),
              ),
            ),
        ],
      ),
    );
  }

  Widget _buildDataCell(dynamic data, String columnKey, {Widget? customContent}) {
    return Container(
      width: columnWidths[columnKey],
      height: 40, // Fixed height for consistent alignment
      padding: EdgeInsets.all(8),
      decoration: BoxDecoration(
        border: Border(
          right: BorderSide(color: Colors.grey.shade400),
          bottom: BorderSide(color: Colors.grey.shade400),
        ),
      ),
      child: Align(
        alignment: Alignment.centerLeft,
        child: customContent ??
            Text(
              data.toString(),
              style: TextStyle(fontSize: 12),
              overflow: TextOverflow.ellipsis,
            ),
      ),
    );
  }

  Widget _buildCheckboxCell(Map<String, dynamic> role, String fieldKey, String columnKey) {
    return Container(
      width: columnWidths[columnKey],
      height: 40,
      padding: EdgeInsets.all(8),
      decoration: BoxDecoration(
        border: Border(
          right: BorderSide(color: Colors.grey.shade400),
          bottom: BorderSide(color: Colors.grey.shade400),
        ),
      ),
      child: Center(
        child: Checkbox(
          value: role[fieldKey] ?? false,
          onChanged: (value) {
            setState(() {
              role[fieldKey] = value ?? false;
            });
          },
          activeColor: Colors.orange.shade700,
          checkColor: Colors.white,
        ),
      ),
    );
  }

  Widget _buildPaginationControls() {
    return Container(
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        border: Border(
          top: BorderSide(color: Colors.grey.shade300, width: 1),
        ),
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          // Page numbers
          Row(
            children: [
              for (int i = 1; i <= _totalPages && i <= 4; i++)
                GestureDetector(
                  onTap: () {
                    setState(() {
                      _currentPage = i;
                    });
                  },
                  child: Container(
                    margin: EdgeInsets.symmetric(horizontal: 4),
                    padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                    decoration: BoxDecoration(
                      color: _currentPage == i ? Colors.orange.shade700 : Colors.transparent,
                      borderRadius: BorderRadius.circular(4),
                    ),
                    child: Text(
                      i.toString(),
                      style: TextStyle(
                        color: _currentPage == i ? Colors.white : Colors.black,
                        fontWeight: _currentPage == i ? FontWeight.bold : FontWeight.normal,
                      ),
                    ),
                  ),
                ),
            ],
          ),
          // Page size selector
          Row(
            children: [
              Text('Page Size: ', style: TextStyle(fontSize: 14)),
              DropdownButton<int>(
                value: _pageSize,
                items: _pageSizeOptions.map((size) {
                  return DropdownMenuItem<int>(
                    value: size,
                    child: Text(size.toString()),
                  );
                }).toList(),
                onChanged: (value) {
                  setState(() {
                    _pageSize = value!;
                    _currentPage = 1; // Reset to first page
                  });
                },
              ),
            ],
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        color: Colors.grey.shade50,
        child: Column(
          children: [
            // Header with buttons and search
            Container(
              width: double.infinity, // Full width
              padding: EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.white,
                border: Border(
                  bottom: BorderSide(color: Colors.grey.shade300, width: 1),
                ),
              ),
              child: LayoutBuilder(
                builder: (context, constraints) {
                  final isSmallScreen = constraints.maxWidth < 600;
                  final buttonStyle = OutlinedButton.styleFrom(
                    padding: isSmallScreen
                        ? EdgeInsets.symmetric(horizontal: 6, vertical: 4)
                        : EdgeInsets.symmetric(horizontal: 8, vertical: 6),
                    textStyle: TextStyle(
                      fontSize: isSmallScreen ? 12 : 14,
                    ),
                    minimumSize: Size(0, isSmallScreen ? 30 : 36),
                    side: BorderSide(color: Colors.grey.shade300),
                  );

                  return SingleChildScrollView(
                    scrollDirection: Axis.horizontal,
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.start, // Left-aligned content
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        // New Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _navigateToNewRolePage,
                            icon: Icon(Icons.add, color: Colors.orange.shade700, size: 20),
                            padding: EdgeInsets.all(4),
                            tooltip: 'New',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _navigateToNewRolePage,
                            icon: Icon(Icons.add, color: Colors.orange.shade700, size: 20),
                            label: Text('New'),
                            style: buttonStyle.copyWith(
                              backgroundColor: MaterialStateProperty.all(Colors.white),
                              foregroundColor: MaterialStateProperty.all(Colors.black),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Delete Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _hasSelectedItems() ? _deleteSelected : null,
                            icon: Icon(Icons.delete,
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                                size: 20
                            ),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Delete',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _hasSelectedItems() ? _deleteSelected : null,
                            icon: Icon(Icons.delete,
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                                size: 20
                            ),
                            label: Text(
                              'Delete',
                              style: TextStyle(
                                color: _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                              ),
                            ),
                            style: buttonStyle.copyWith(
                              foregroundColor: MaterialStateProperty.all(
                                _hasSelectedItems() ? Colors.red.shade400 : Colors.grey.shade400,
                              ),
                              side: MaterialStateProperty.all(
                                BorderSide(color: Colors.grey.shade300),
                              ),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Search Field
                        Container(
                          width: isSmallScreen ? 180 : 300,
                          child: TextField(
                            controller: _searchController,
                            onChanged: (value) {
                              setState(() {
                                _currentPage = 1;
                              });
                            },
                            decoration: InputDecoration(
                              isDense: true,
                              hintText: 'Search...',
                              suffixIcon: Icon(Icons.search, color: Colors.orange.shade700),
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(4),
                              ),
                              contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                            ),
                          ),
                        ),

                        SizedBox(width: 12),

                        // Export Button
                        if (isSmallScreen)
                          IconButton(
                            onPressed: _exportData,
                            icon: Icon(Icons.download, color: Colors.orange.shade700, size: 20),
                            padding: EdgeInsets.all(4),
                            tooltip: 'Export',
                          )
                        else
                          OutlinedButton.icon(
                            onPressed: _exportData,
                            icon: Icon(Icons.download, color: Colors.orange.shade700, size: 20),
                            label: Text('Export'),
                            style: buttonStyle.copyWith(
                              backgroundColor: MaterialStateProperty.all(Colors.white),
                              foregroundColor: MaterialStateProperty.all(Colors.black),
                            ),
                          ),

                        SizedBox(width: 12),

                        // Refresh Button
                        IconButton(
                          onPressed: _refreshData,
                          icon: Icon(Icons.refresh, color: Colors.orange.shade700, size: 20),
                          padding: EdgeInsets.all(4),
                          tooltip: 'Refresh',
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),

            // Table area
            Expanded(
              child: Container(
                margin: EdgeInsets.all(16),
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.grey.shade300),
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(4),
                ),
                child: Column(
                  children: [
                    // Table with synchronized scrolling
                    Expanded(
                      child: _paginatedData.isEmpty
                          ? Center(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(
                              Icons.admin_panel_settings,
                              size: 64,
                              color: Colors.grey.shade400,
                            ),
                            SizedBox(height: 16),
                            Text(
                              'No data to display',
                              style: TextStyle(
                                fontSize: 18,
                                color: Colors.grey.shade600,
                              ),
                            ),
                            SizedBox(height: 8),
                            Text(
                              'Click "New" to add your first role',
                              style: TextStyle(
                                fontSize: 14,
                                color: Colors.grey.shade500,
                              ),
                            ),
                          ],
                        ),
                      )
                          : SingleChildScrollView(
                        controller: _horizontalScrollController,
                        scrollDirection: Axis.horizontal,
                        child: Column(
                          children: [
                            // Table header
                            Row(
                              children: [
                                _buildResizableColumn(
                                  title: '',
                                  columnKey: 'Checkbox',
                                  isLast: false,
                                  customContent: Center(
                                    child: Checkbox(
                                      value: _selectAll,
                                      onChanged: (value) => _toggleSelectAll(),
                                    ),
                                  ),
                                ),
                                _buildResizableColumn(
                                  title: 'Name',
                                  columnKey: 'Name',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Is Administrative',
                                  columnKey: 'Is Administrative',
                                  isLast: false,
                                ),
                                _buildResizableColumn(
                                  title: 'Can Edit Model',
                                  columnKey: 'Can Edit Model',
                                  isLast: true,
                                ),
                              ],
                            ),

                            // Table body
                            Expanded(
                              child: SingleChildScrollView(
                                child: Column(
                                  children: _paginatedData.map((role) {
                                    return Row(
                                      children: [
                                        _buildDataCell(
                                          '',
                                          'Checkbox',
                                          customContent: Center(
                                            child: Checkbox(
                                              value: role['selected'],
                                              onChanged: (value) {
                                                setState(() {
                                                  role['selected'] = value;
                                                });
                                              },
                                            ),
                                          ),
                                        ),
                                        _buildDataCell(role['name'] ?? '', 'Name'),
                                        _buildCheckboxCell(role, 'isAdministrative', 'Is Administrative'),
                                        _buildCheckboxCell(role, 'canEditModel', 'Can Edit Model'),
                                      ],
                                    );
                                  }).toList(),
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                    // Pagination controls
                    if (_totalPages > 0) _buildPaginationControls(),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// New Role Page
class NewRolePage extends StatefulWidget {
  @override
  _NewRolePageState createState() => _NewRolePageState();
}

class _NewRolePageState extends State<NewRolePage> {
  final _formKey = GlobalKey<FormState>();
  final Map<String, TextEditingController> _controllers = {};

  // Form field values
  String _selectedPermissionPolicy = 'Deny all by default';
  bool _isAdministrative = false;
  bool _canEditModel = false;

  int _selectedTabIndex = 0;

  @override
  void initState() {
    super.initState();
    // Initialize controllers for all form fields
    [
      'roleName',
    ].forEach((field) {
      _controllers[field] = TextEditingController();
    });
  }

  @override
  void dispose() {
    _controllers.values.forEach((controller) => controller.dispose());
    super.dispose();
  }

  void _saveRole() {
    if (_formKey.currentState!.validate()) {
      // Prepare the data to return
      Map<String, dynamic> formData = {
        'roleName': _controllers['roleName']!.text,
        'isAdministrative': _isAdministrative,
        'canEditModel': _canEditModel,
        'permissionPolicy': _selectedPermissionPolicy,
        'keepOpen': false,
      };

      Navigator.pop(context, formData);
    }
  }

  void _saveAndNew() {
    if (_formKey.currentState!.validate()) {
      // Prepare the data to return
      Map<String, dynamic> formData = {
        'roleName': _controllers['roleName']!.text,
        'isAdministrative': _isAdministrative,
        'canEditModel': _canEditModel,
        'permissionPolicy': _selectedPermissionPolicy,
        'keepOpen': true,
      };

      Navigator.pop(context, formData);
    }
  }

  void _deleteRole() {
    Navigator.pop(context, null);
  }

  void _refreshData() {
    setState(() {
      // Refresh the data
    });
  }

  Widget _buildDropdownField({
    required String label,
    required String value,
    required List<String> items,
    required Function(String?) onChanged,
    bool isRequired = false,
  }) {
    return DropdownButtonFormField<String>(
      value: value.isEmpty ? null : value,
      decoration: InputDecoration(
        labelText: isRequired ? '$label*' : label,
        border: OutlineInputBorder(),
        contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
      ),
      items: items.map((item) => DropdownMenuItem(
        value: item,
        child: Text(item),
      )).toList(),
      onChanged: onChanged,
      validator: isRequired ? (value) {
        if (value == null || value.isEmpty) {
          return 'Please select a $label';
        }
        return null;
      } : null,
    );
  }

  Widget _buildCheckboxField({
    required String label,
    required bool value,
    required Function(bool?) onChanged,
  }) {
    return Container(
      padding: EdgeInsets.symmetric(vertical: 8),
      child: Row(
        children: [
          Checkbox(
            value: value,
            onChanged: onChanged,
            activeColor: Colors.orange.shade700,
          ),
          SizedBox(width: 8),
          Text(
            label,
            style: TextStyle(
              fontSize: 16,
              color: Colors.black87,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildUsersTab() {
    return Container(
      padding: EdgeInsets.all(16),
      child: Column(
        children: [
          // Action buttons
          Container(
            width: double.infinity,
            child: SingleChildScrollView(
              scrollDirection: Axis.horizontal,
              child: Row(
                children: [
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.add, size: 16),
                    label: Text('New'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.link, size: 16),
                    label: Text('Link'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.link_off, size: 16),
                    label: Text('Unlink'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.delete, size: 16, color: Colors.red),
                    label: Text('Delete'),
                    style: OutlinedButton.styleFrom(
                      foregroundColor: Colors.red,
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  Container(
                    width: 180,
                    child: TextField(
                      decoration: InputDecoration(
                        isDense: true,
                        hintText: 'Text to search...',
                        prefixIcon: Icon(Icons.search, size: 16),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(4),
                          borderSide: BorderSide(color: Colors.grey.shade300),
                        ),
                        contentPadding: EdgeInsets.symmetric(vertical: 8, horizontal: 8),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
          SizedBox(height: 16),
          // Table
          Expanded(
            child: Container(
              decoration: BoxDecoration(
                border: Border.all(color: Colors.grey.shade300),
                borderRadius: BorderRadius.circular(4),
              ),
              child: Column(
                children: [
                  // Table header
                  Container(
                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 12),
                    decoration: BoxDecoration(
                      color: Colors.grey.shade100,
                      border: Border(bottom: BorderSide(color: Colors.grey.shade300)),
                    ),
                    child: SingleChildScrollView(
                      scrollDirection: Axis.horizontal,
                      child: Row(
                        children: [
                          Container(width: 40, child: Checkbox(value: false, onChanged: (_) {})),
                          SizedBox(width: 8),
                          _buildCompactTableHeader('User Name'),
                          _buildCompactTableHeader('Force Password Change'),
                          _buildCompactTableHeader('Is Active'),
                        ],
                      ),
                    ),
                  ),
                  // Table content - No data
                  Expanded(
                    child: Center(child: Text('No data to display', style: TextStyle(color: Colors.grey))),
                  ),
                ],
              ),
            ),
          ),
          // Pagination
          Container(
            padding: EdgeInsets.symmetric(vertical: 16),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Container(
                  padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                  decoration: BoxDecoration(
                    color: Colors.orange.shade700,
                    borderRadius: BorderRadius.circular(4),
                  ),
                  child: Text('1', style: TextStyle(color: Colors.white, fontWeight: FontWeight.w600)),
                ),
                Row(
                  children: [
                    Text('Page Size: '),
                    DropdownButton<int>(
                      value: 20,
                      items: [10, 20, 50, 100].map((size) => DropdownMenuItem(
                        value: size,
                        child: Text(size.toString()),
                      )).toList(),
                      onChanged: (value) {},
                      underline: Container(),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildTypePermissionsTab() {
    return Container(
      padding: EdgeInsets.all(16),
      child: Column(
        children: [
          // Action buttons (same as Users tab)
          Container(
            width: double.infinity,
            child: SingleChildScrollView(
              scrollDirection: Axis.horizontal,
              child: Row(
                children: [
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.add, size: 16),
                    label: Text('New'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.link, size: 16),
                    label: Text('Link'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.link_off, size: 16),
                    label: Text('Unlink'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.delete, size: 16, color: Colors.red),
                    label: Text('Delete'),
                    style: OutlinedButton.styleFrom(
                      foregroundColor: Colors.red,
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  Container(
                    width: 180,
                    child: TextField(
                      decoration: InputDecoration(
                        isDense: true,
                        hintText: 'Text to search...',
                        prefixIcon: Icon(Icons.search, size: 16),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(4),
                          borderSide: BorderSide(color: Colors.grey.shade300),
                        ),
                        contentPadding: EdgeInsets.symmetric(vertical: 8, horizontal: 8),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
          SizedBox(height: 16),
          // Table
          Expanded(
            child: Container(
              decoration: BoxDecoration(
                border: Border.all(color: Colors.grey.shade300),
                borderRadius: BorderRadius.circular(4),
              ),
              child: Column(
                children: [
                  // Table header
                  Container(
                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 12),
                    decoration: BoxDecoration(
                      color: Colors.grey.shade100,
                      border: Border(bottom: BorderSide(color: Colors.grey.shade300)),
                    ),
                    child: SingleChildScrollView(
                      scrollDirection: Axis.horizontal,
                      child: Row(
                        children: [
                          Container(width: 40, child: Checkbox(value: false, onChanged: (_) {})),
                          SizedBox(width: 8),
                          _buildCompactTableHeader('Target Type'),
                          _buildCompactTableHeader('Read'),
                          _buildCompactTableHeader('Write'),
                          _buildCompactTableHeader('Create'),
                          _buildCompactTableHeader('Delete'),
                        ],
                      ),
                    ),
                  ),
                  // Table content - No data
                  Expanded(
                    child: Center(child: Text('No data to display', style: TextStyle(color: Colors.grey))),
                  ),
                ],
              ),
            ),
          ),
          // Pagination
          Container(
            padding: EdgeInsets.symmetric(vertical: 16),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Container(
                  padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                  decoration: BoxDecoration(
                    color: Colors.orange.shade700,
                    borderRadius: BorderRadius.circular(4),
                  ),
                  child: Text('1', style: TextStyle(color: Colors.white, fontWeight: FontWeight.w600)),
                ),
                Row(
                  children: [
                    Text('Page Size: '),
                    DropdownButton<int>(
                      value: 20,
                      items: [10, 20, 50, 100].map((size) => DropdownMenuItem(
                        value: size,
                        child: Text(size.toString()),
                      )).toList(),
                      onChanged: (value) {},
                      underline: Container(),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildNavigationPermissionsTab() {
    return Container(
      padding: EdgeInsets.all(16),
      child: Column(
        children: [
          // Action buttons (same as Users tab)
          Container(
            width: double.infinity,
            child: SingleChildScrollView(
              scrollDirection: Axis.horizontal,
              child: Row(
                children: [
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.add, size: 16),
                    label: Text('New'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.link, size: 16),
                    label: Text('Link'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.link_off, size: 16),
                    label: Text('Unlink'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.delete, size: 16, color: Colors.red),
                    label: Text('Delete'),
                    style: OutlinedButton.styleFrom(
                      foregroundColor: Colors.red,
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  Container(
                    width: 180,
                    child: TextField(
                      decoration: InputDecoration(
                        isDense: true,
                        hintText: 'Text to search...',
                        prefixIcon: Icon(Icons.search, size: 16),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(4),
                          borderSide: BorderSide(color: Colors.grey.shade300),
                        ),
                        contentPadding: EdgeInsets.symmetric(vertical: 8, horizontal: 8),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
          SizedBox(height: 16),
          // Table
          Expanded(
            child: Container(
              decoration: BoxDecoration(
                border: Border.all(color: Colors.grey.shade300),
                borderRadius: BorderRadius.circular(4),
              ),
              child: Column(
                children: [
                  // Table header
                  Container(
                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 12),
                    decoration: BoxDecoration(
                      color: Colors.grey.shade100,
                      border: Border(bottom: BorderSide(color: Colors.grey.shade300)),
                    ),
                    child: SingleChildScrollView(
                      scrollDirection: Axis.horizontal,
                      child: Row(
                        children: [
                          Container(width: 40, child: Checkbox(value: false, onChanged: (_) {})),
                          SizedBox(width: 8),
                          _buildCompactTableHeader('Navigation Item'),
                          _buildCompactTableHeader('Navigate'),
                        ],
                      ),
                    ),
                  ),
                  // Table content - No data
                  Expanded(
                    child: Center(child: Text('No data to display', style: TextStyle(color: Colors.grey))),
                  ),
                ],
              ),
            ),
          ),
          // Pagination
          Container(
            padding: EdgeInsets.symmetric(vertical: 16),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Container(
                  padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                  decoration: BoxDecoration(
                    color: Colors.orange.shade700,
                    borderRadius: BorderRadius.circular(4),
                  ),
                  child: Text('1', style: TextStyle(color: Colors.white, fontWeight: FontWeight.w600)),
                ),
                Row(
                  children: [
                    Text('Page Size: '),
                    DropdownButton<int>(
                      value: 20,
                      items: [10, 20, 50, 100].map((size) => DropdownMenuItem(
                        value: size,
                        child: Text(size.toString()),
                      )).toList(),
                      onChanged: (value) {},
                      underline: Container(),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildDeniedActionsTab() {
    return Container(
      padding: EdgeInsets.all(16),
      child: Column(
        children: [
          // Action buttons (same as Users tab)
          Container(
            width: double.infinity,
            child: SingleChildScrollView(
              scrollDirection: Axis.horizontal,
              child: Row(
                children: [
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.add, size: 16),
                    label: Text('New'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.link, size: 16),
                    label: Text('Link'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.link_off, size: 16),
                    label: Text('Unlink'),
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.delete, size: 16, color: Colors.red),
                    label: Text('Delete'),
                    style: OutlinedButton.styleFrom(
                      foregroundColor: Colors.red,
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      minimumSize: Size(0, 36),
                      side: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  SizedBox(width: 8),
                  Container(
                    width: 180,
                    child: TextField(
                      decoration: InputDecoration(
                        isDense: true,
                        hintText: 'Text to search...',
                        prefixIcon: Icon(Icons.search, size: 16),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(4),
                          borderSide: BorderSide(color: Colors.grey.shade300),
                        ),
                        contentPadding: EdgeInsets.symmetric(vertical: 8, horizontal: 8),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
          SizedBox(height: 16),
          // Table
          Expanded(
            child: Container(
              decoration: BoxDecoration(
                border: Border.all(color: Colors.grey.shade300),
                borderRadius: BorderRadius.circular(4),
              ),
              child: Column(
                children: [
                  // Table header
                  Container(
                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 12),
                    decoration: BoxDecoration(
                      color: Colors.grey.shade100,
                      border: Border(bottom: BorderSide(color: Colors.grey.shade300)),
                    ),
                    child: SingleChildScrollView(
                      scrollDirection: Axis.horizontal,
                      child: Row(
                        children: [
                          Container(width: 40, child: Checkbox(value: false, onChanged: (_) {})),
                          SizedBox(width: 8),
                          _buildCompactTableHeader('Action'),
                          _buildCompactTableHeader('Category'),
                        ],
                      ),
                    ),
                  ),
                  // Table content - No data
                  Expanded(
                    child: Center(child: Text('No data to display', style: TextStyle(color: Colors.grey))),
                  ),
                ],
              ),
            ),
          ),
          // Pagination
          Container(
            padding: EdgeInsets.symmetric(vertical: 16),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Container(
                  padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                  decoration: BoxDecoration(
                    color: Colors.orange.shade700,
                    borderRadius: BorderRadius.circular(4),
                  ),
                  child: Text('1', style: TextStyle(color: Colors.white, fontWeight: FontWeight.w600)),
                ),
                Row(
                  children: [
                    Text('Page Size: '),
                    DropdownButton<int>(
                      value: 20,
                      items: [10, 20, 50, 100].map((size) => DropdownMenuItem(
                        value: size,
                        child: Text(size.toString()),
                      )).toList(),
                      onChanged: (value) {},
                      underline: Container(),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildCompactTableHeader(String title) {
    return Container(
      width: 150,
      padding: EdgeInsets.symmetric(horizontal: 4),
      child: Row(
        children: [
          Expanded(
            child: Text(
              title,
              style: TextStyle(fontWeight: FontWeight.w600, fontSize: 10),
              overflow: TextOverflow.ellipsis,
            ),
          ),
          Icon(Icons.filter_list, size: 10, color: Colors.grey),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        Navigator.pop(context, null);
        return false;
      },
      child: Scaffold(
        appBar: AppBar(
          title: Text('Role'),
          backgroundColor: Colors.white,
          foregroundColor: Colors.black,
          elevation: 0,
          actions: [
            IconButton(
              onPressed: () => Navigator.pop(context),
              icon: Icon(Icons.arrow_back),
            ),
            IconButton(
              onPressed: () => Navigator.pop(context),
              icon: Icon(Icons.arrow_forward),
            ),
            IconButton(
              onPressed: _refreshData,
              icon: Icon(Icons.refresh),
            ),
          ],
        ),
        body: Container(
          color: Colors.grey.shade50,
          child: Column(
            children: [
              // Action buttons - Made responsive
              Container(
                padding: EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.white,
                  border: Border(
                    bottom: BorderSide(color: Colors.grey.shade300, width: 1),
                  ),
                ),
                child: LayoutBuilder(
                  builder: (context, constraints) {
                    bool isSmallScreen = constraints.maxWidth < 600;

                    if (isSmallScreen) {
                      // Stack buttons vertically on small screens
                      return Column(
                        children: [
                          Row(
                            children: [
                              Expanded(
                                child: OutlinedButton.icon(
                                  onPressed: _deleteRole,
                                  icon: Icon(Icons.delete, color: Colors.red.shade400, size: 18),
                                  label: Text('Delete', style: TextStyle(fontSize: 12)),
                                  style: OutlinedButton.styleFrom(
                                    foregroundColor: Colors.red.shade400,
                                    side: BorderSide(color: Colors.grey.shade300),
                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                  ),
                                ),
                              ),
                            ],
                          ),
                          SizedBox(height: 6),
                          Row(
                            children: [
                              Expanded(
                                child: OutlinedButton.icon(
                                  onPressed: _saveAndNew,
                                  icon: Icon(Icons.save, color: Colors.orange.shade700, size: 18),
                                  label: Text('Save & New', style: TextStyle(fontSize: 12)),
                                  style: OutlinedButton.styleFrom(
                                    foregroundColor: Colors.orange.shade700,
                                    side: BorderSide(color: Colors.orange.shade700),
                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                  ),
                                ),
                              ),
                              SizedBox(width: 6),
                              Expanded(
                                child: ElevatedButton.icon(
                                  onPressed: _saveRole,
                                  icon: Icon(Icons.save, color: Colors.white, size: 18),
                                  label: Text('Save', style: TextStyle(fontSize: 12)),
                                  style: ElevatedButton.styleFrom(
                                    backgroundColor: Colors.orange.shade700,
                                    foregroundColor: Colors.white,
                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ],
                      );
                    } else {
                      // Original horizontal layout for larger screens
                      return Row(
                        children: [
                          OutlinedButton.icon(
                            onPressed: _deleteRole,
                            icon: Icon(Icons.delete, color: Colors.red.shade400, size: 20),
                            label: Text('Delete'),
                            style: OutlinedButton.styleFrom(
                              foregroundColor: Colors.red.shade400,
                              side: BorderSide(color: Colors.grey.shade300),
                            ),
                          ),
                          Spacer(),
                          OutlinedButton.icon(
                            onPressed: _saveAndNew,
                            icon: Icon(Icons.save, color: Colors.orange.shade700, size: 20),
                            label: Text('Save and New'),
                            style: OutlinedButton.styleFrom(
                              foregroundColor: Colors.orange.shade700,
                              side: BorderSide(color: Colors.orange.shade700),
                            ),
                          ),
                          SizedBox(width: 8),
                          ElevatedButton.icon(
                            onPressed: _saveRole,
                            icon: Icon(Icons.save, color: Colors.white, size: 20),
                            label: Text('Save'),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.orange.shade700,
                              foregroundColor: Colors.white,
                            ),
                          ),
                        ],
                      );
                    }
                  },
                ),
              ),

              // Form content
              Expanded(
                child: SingleChildScrollView(
                  padding: EdgeInsets.all(12),
                  child: Form(
                    key: _formKey,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Role',
                          style: TextStyle(
                            fontSize: 24,
                            fontWeight: FontWeight.bold,
                            color: Colors.black87,
                          ),
                        ),
                        SizedBox(height: 20),

                        // Role Name - Full width on all screens
                        TextFormField(
                          controller: _controllers['roleName'],
                          decoration: InputDecoration(
                            labelText: 'Name*',
                            border: OutlineInputBorder(),
                            contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
                          ),
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Please enter a role name';
                            }
                            return null;
                          },
                        ),
                        SizedBox(height: 16),

                        // Checkboxes - Responsive layout
                        LayoutBuilder(
                          builder: (context, constraints) {
                            bool isSmallScreen = constraints.maxWidth < 600;

                            if (isSmallScreen) {
                              return Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  _buildCheckboxField(
                                    label: 'Is Administrative',
                                    value: _isAdministrative,
                                    onChanged: (value) {
                                      setState(() {
                                        _isAdministrative = value ?? false;
                                      });
                                    },
                                  ),
                                  _buildCheckboxField(
                                    label: 'Can Edit Model',
                                    value: _canEditModel,
                                    onChanged: (value) {
                                      setState(() {
                                        _canEditModel = value ?? false;
                                      });
                                    },
                                  ),
                                ],
                              );
                            } else {
                              return Row(
                                children: [
                                  Expanded(
                                    child: _buildCheckboxField(
                                      label: 'Is Administrative',
                                      value: _isAdministrative,
                                      onChanged: (value) {
                                        setState(() {
                                          _isAdministrative = value ?? false;
                                        });
                                      },
                                    ),
                                  ),
                                  Expanded(
                                    child: _buildCheckboxField(
                                      label: 'Can Edit Model',
                                      value: _canEditModel,
                                      onChanged: (value) {
                                        setState(() {
                                          _canEditModel = value ?? false;
                                        });
                                      },
                                    ),
                                  ),
                                ],
                              );
                            }
                          },
                        ),
                        SizedBox(height: 16),

                        // Permission Policy - Responsive width
                        LayoutBuilder(
                          builder: (context, constraints) {
                            bool isSmallScreen = constraints.maxWidth < 600;

                            return Container(
                              width: isSmallScreen ? double.infinity : constraints.maxWidth / 2 - 8,
                              child: _buildDropdownField(
                                label: 'Permission Policy',
                                value: _selectedPermissionPolicy,
                                items: [
                                  'Deny all by default',
                                  'Read only all by default'
                                  'Allow all by default',
                                ],
                                onChanged: (value) {
                                  setState(() {
                                    _selectedPermissionPolicy = value ?? '';
                                  });
                                },
                                isRequired: true,
                              ),
                            );
                          },
                        ),
                        SizedBox(height: 20),

                        // Tabbed Section
                        Container(
                          decoration: BoxDecoration(
                            color: Colors.white,
                            borderRadius: BorderRadius.circular(8),
                            border: Border.all(color: Colors.grey.shade300),
                          ),
                          child: Column(
                            children: [
                              // Tab headers
                              Container(
                                decoration: BoxDecoration(
                                  border: Border(bottom: BorderSide(color: Colors.grey.shade300)),
                                ),
                                child: SingleChildScrollView(
                                  scrollDirection: Axis.horizontal,
                                  child: Row(
                                    children: [
                                      _buildTabHeader('Users', 0, Icons.person),
                                      _buildTabHeader('Type Permissions', 1, Icons.type_specimen),
                                      _buildTabHeader('Navigation Permissions', 2, Icons.navigation),
                                      _buildTabHeader('Denied Actions', 3, Icons.block),
                                    ],
                                  ),
                                ),
                              ),
                              // Tab content
                              Container(
                                height: 400,
                                child: _buildTabContent(),
                              ),
                            ],
                          ),
                        ),
                        SizedBox(height: 32),
                      ],
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildTabHeader(String title, int index, IconData icon) {
    bool isSelected = _selectedTabIndex == index;
    return GestureDetector(
      onTap: () => setState(() => _selectedTabIndex = index),
      child: Container(
        padding: EdgeInsets.symmetric(horizontal: 16, vertical: 12),
        decoration: BoxDecoration(
          color: isSelected ? Colors.orange.shade700 : Colors.transparent,
          borderRadius: BorderRadius.only(
            topLeft: index == 0 ? Radius.circular(8) : Radius.zero,
          ),
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(
              icon,
              size: 16,
              color: isSelected ? Colors.white : Colors.orange.shade700,
            ),
            SizedBox(width: 8),
            Text(
              title,
              style: TextStyle(
                color: isSelected ? Colors.white : Colors.black87,
                fontWeight: FontWeight.w500,
                fontSize: 13,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildTabContent() {
    switch (_selectedTabIndex) {
      case 0:
        return _buildUsersTab();
      case 1:
        return _buildTypePermissionsTab();
      case 2:
        return _buildNavigationPermissionsTab();
      case 3:
        return _buildDeniedActionsTab();
      default:
        return _buildUsersTab();
    }
  }
}

